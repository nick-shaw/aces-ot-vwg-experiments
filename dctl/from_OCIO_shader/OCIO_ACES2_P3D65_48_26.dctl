// DEFINE_ACES_PARAM(IS_PARAMETRIC_ACES_TRANSFORM: 0, OUTPUT_COLORSPACE_TAG: P3D65_48nits)

// Declaration of tables

__CONSTANT__ float ocio_gamut_cusp_table_0_hues_array[362] = {-1.01858521f, 0.0f, 0.999435902f, 1.9988718f, 2.9983077f, 3.99774361f, 4.99717951f, 5.99661541f, 6.99605131f, 7.99548721f, 8.99492264f, 9.99435902f, 10.9937954f, 11.9932308f, 12.9926662f, 13.9921026f, 14.991539f, 15.9909744f, 16.9904099f, 17.9898453f, 18.9892826f, 19.988718f, 20.9881535f, 21.9875908f, 22.9870262f, 23.9864616f, 24.9858971f, 26.0706215f, 27.155344f, 28.2400684f, 29.2381306f, 30.2361927f, 31.2342567f, 32.2323189f, 33.230381f, 34.2284431f, 35.2265053f, 36.2245674f, 37.2226295f, 38.2206917f, 39.2187538f, 40.2168198f, 41.2148819f, 42.212944f, 43.2110062f, 44.2090683f, 45.2071304f, 46.2051926f, 47.2032547f, 48.2013168f, 49.199379f, 50.1974411f, 51.1955032f, 52.1935654f, 53.1916275f, 54.1896896f, 55.1877518f, 56.1858139f, 57.1838799f, 58.181942f, 59.1800041f, 60.1780663f, 61.1761322f, 62.1741943f, 63.1722565f, 64.1703186f, 65.1683807f, 66.1664429f, 67.164505f, 68.1625671f, 69.1606293f, 70.1586914f, 71.1567535f, 72.1548157f, 73.1528778f, 74.1509399f, 75.1490021f, 76.1470642f, 77.1451263f, 78.1431885f, 79.1412506f, 80.1393127f, 81.1373749f, 82.135437f, 83.1334991f, 84.1315613f, 85.1296234f, 86.1276932f, 87.1257553f, 88.1238174f, 89.1218796f, 90.1199417f, 91.1180038f, 92.116066f, 93.1141281f, 94.1121902f, 95.1102524f, 96.1083145f, 97.1063766f, 98.1044388f, 99.1025009f, 100.100563f, 101.098625f, 102.096687f, 103.094749f, 104.092812f, 105.090874f, 106.088936f, 107.194695f, 108.188972f, 109.18325f, 110.177521f, 111.171799f, 112.166077f, 113.160355f, 114.154633f, 115.148903f, 116.143181f, 117.137459f, 118.131737f, 119.126007f, 120.120285f, 121.114563f, 122.108841f, 123.103119f, 124.097397f, 125.091667f, 126.085945f, 127.080223f, 128.074493f, 129.068771f, 130.063049f, 131.057327f, 132.051605f, 133.045883f, 134.040161f, 135.034439f, 136.028717f, 137.02298f, 138.017258f, 139.011536f, 140.005814f, 141.000092f, 141.99437f, 143.037003f, 144.079651f, 145.122284f, 146.164932f, 147.207565f, 148.207993f, 149.20842f, 150.208847f, 151.209274f, 152.209702f, 153.210129f, 154.210556f, 155.210983f, 156.211411f, 157.211853f, 158.21228f, 159.212708f, 160.213135f, 161.213562f, 162.213989f, 163.214417f, 164.214844f, 165.215271f, 166.215698f, 167.216125f, 168.216553f, 169.21698f, 170.217407f, 171.217834f, 172.218262f, 173.218689f, 174.219116f, 175.219543f, 176.219971f, 177.220398f, 178.220825f, 179.221252f, 180.22168f, 181.222107f, 182.222549f, 183.222977f, 184.223404f, 185.223831f, 186.224258f, 187.224686f, 188.225113f, 189.22554f, 190.225967f, 191.226395f, 192.226822f, 193.031738f, 193.836639f, 194.641556f, 195.650192f, 196.658829f, 197.667465f, 198.676117f, 199.684753f, 200.69339f, 201.702026f, 202.710663f, 203.719299f, 204.727936f, 205.736572f, 206.745209f, 207.75386f, 208.762497f, 209.771133f, 210.77977f, 211.788406f, 212.797043f, 213.805679f, 214.814331f, 215.822968f, 216.831604f, 217.84024f, 218.848877f, 219.857513f, 220.86615f, 221.874786f, 222.883423f, 223.892075f, 224.900711f, 225.909348f, 226.917984f, 227.92662f, 228.935257f, 229.943909f, 230.952545f, 231.961182f, 232.969818f, 233.978455f, 234.987091f, 235.995728f, 237.004364f, 238.013f, 239.021637f, 240.030273f, 241.038925f, 242.047562f, 243.056198f, 244.064835f, 245.073471f, 246.082123f, 247.090759f, 248.099396f, 249.108032f, 250.116669f, 251.125305f, 252.133942f, 253.142578f, 254.151215f, 255.159851f, 256.168488f, 257.177124f, 258.185791f, 259.194397f, 260.203064f, 261.21167f, 262.220337f, 263.228973f, 264.23761f, 265.246246f, 266.254883f, 267.263519f, 268.272156f, 269.26947f, 270.266785f, 271.264069f, 272.261383f, 273.258698f, 274.255981f, 275.253296f, 276.25061f, 277.246796f, 278.24295f, 279.239136f, 280.235321f, 281.231506f, 282.227661f, 283.223846f, 284.220032f, 285.216187f, 286.212372f, 287.208557f, 288.204712f, 289.200897f, 290.197083f, 291.193237f, 292.189423f, 293.185608f, 294.181793f, 295.177948f, 296.174133f, 297.170319f, 298.166473f, 299.162659f, 300.158844f, 301.155029f, 302.151184f, 303.147369f, 304.143555f, 305.139709f, 306.135895f, 307.13208f, 308.128235f, 309.12442f, 310.120605f, 311.11676f, 312.112946f, 313.109131f, 314.105316f, 315.101471f, 316.097656f, 317.093842f, 318.089996f, 319.086182f, 320.082367f, 321.078552f, 322.074707f, 323.070892f, 324.067078f, 325.063232f, 326.059418f, 327.055603f, 328.051758f, 329.047943f, 330.044128f, 331.040283f, 332.036469f, 333.032654f, 334.028809f, 335.024994f, 336.021179f, 336.961884f, 337.902588f, 338.843262f, 339.783966f, 340.72467f, 341.665375f, 342.68396f, 343.702545f, 344.72113f, 345.739746f, 346.758331f, 347.776917f, 348.795502f, 349.814087f, 350.832703f, 351.851288f, 352.869873f, 353.888458f, 354.907043f, 355.925629f, 356.944244f, 357.96283f, 358.981415f, 360.0f};

__CONSTANT__ float  ocio_reach_m_table_0[362] = {165.07568359f, 166.79077148f, 168.48144531f, 170.13549805f, 171.75903320f, 173.34594727f, 174.88403320f, 176.37329102f, 177.80761719f, 179.18701172f, 180.51147461f, 181.76879883f, 182.97119141f, 184.11254883f, 185.19287109f, 186.21826172f, 187.18261719f, 188.09204102f, 188.95263672f, 189.76440430f, 190.53344727f, 191.25976562f, 191.95556641f, 192.62084961f, 193.25561523f, 193.87817383f, 194.36645508f, 187.09716797f, 180.40771484f, 174.24316406f, 168.53027344f, 163.23242188f, 158.30688477f, 153.71704102f, 149.43237305f, 145.42236328f, 141.66870117f, 138.14086914f, 134.82666016f, 131.70776367f, 128.77197266f, 126.00097656f, 123.38256836f, 120.90454102f, 118.56079102f, 116.34521484f, 114.23950195f, 112.24975586f, 110.35156250f, 108.55712891f, 106.84814453f, 105.22460938f, 103.68652344f, 102.21557617f, 100.82397461f, 99.49340820f, 98.22998047f, 97.02758789f, 95.88012695f, 94.78759766f, 93.75000000f, 92.76733398f, 91.82739258f, 90.93627930f, 90.08789062f, 89.28222656f, 88.51928711f, 87.79296875f, 87.10937500f, 86.45629883f, 85.84594727f, 85.26611328f, 84.71679688f, 84.20410156f, 83.72192383f, 83.27026367f, 82.84912109f, 82.45849609f, 82.09228516f, 81.75659180f, 81.45141602f, 81.17065430f, 80.91430664f, 80.68847656f, 80.48706055f, 80.31005859f, 80.15747070f, 80.02929688f, 79.92553711f, 79.84619141f, 79.79736328f, 79.76684570f, 79.76074219f, 79.77905273f, 79.82177734f, 79.89501953f, 79.98657227f, 80.10253906f, 80.24902344f, 80.41381836f, 80.60913086f, 80.82275391f, 81.06689453f, 81.34155273f, 81.64062500f, 81.96411133f, 82.31811523f, 82.69653320f, 83.10546875f, 83.54492188f, 84.01489258f, 84.51538086f, 85.05249023f, 85.62011719f, 86.21826172f, 86.85302734f, 87.52441406f, 88.23242188f, 88.98315430f, 89.77050781f, 90.60668945f, 91.47949219f, 92.40112305f, 93.36547852f, 94.38476562f, 95.45288086f, 96.57592773f, 97.75390625f, 98.99902344f, 100.29907227f, 101.66625977f, 103.10668945f, 104.62036133f, 106.20727539f, 107.88574219f, 109.64355469f, 111.49902344f, 113.45214844f, 115.50903320f, 117.67578125f, 119.97070312f, 122.38769531f, 124.94506836f, 127.65502930f, 130.52368164f, 133.56933594f, 136.79809570f, 140.22827148f, 143.88427734f, 141.69311523f, 138.11645508f, 134.73510742f, 131.53076172f, 128.49731445f, 125.62255859f, 122.89428711f, 120.30639648f, 117.84667969f, 115.50292969f, 113.27514648f, 111.15722656f, 109.13696289f, 107.20825195f, 105.37719727f, 103.62548828f, 101.95312500f, 100.36010742f, 98.83422852f, 97.38159180f, 95.98999023f, 94.66552734f, 93.39599609f, 92.18139648f, 91.02172852f, 89.91699219f, 88.85498047f, 87.84179688f, 86.87744141f, 85.95581055f, 85.07080078f, 84.22851562f, 83.42285156f, 82.65991211f, 81.92749023f, 81.23168945f, 80.56640625f, 79.93164062f, 79.33349609f, 78.75976562f, 78.22265625f, 77.70385742f, 77.22167969f, 76.76391602f, 76.33056641f, 75.92163086f, 75.54321289f, 75.18310547f, 74.85351562f, 74.54223633f, 74.25537109f, 73.99291992f, 73.74877930f, 73.52905273f, 73.33374023f, 73.15673828f, 72.99804688f, 72.86376953f, 72.74780273f, 72.65625000f, 72.58300781f, 72.52807617f, 72.49755859f, 72.48535156f, 72.49145508f, 72.52197266f, 72.57080078f, 72.63793945f, 72.72338867f, 72.83325195f, 72.96752930f, 73.11401367f, 73.28491211f, 73.48022461f, 73.69384766f, 73.93188477f, 74.18823242f, 74.46899414f, 74.77416992f, 75.09765625f, 75.45166016f, 75.82397461f, 76.22070312f, 76.64794922f, 77.09960938f, 77.57568359f, 78.07617188f, 78.60717773f, 79.16870117f, 79.75463867f, 80.37719727f, 81.03027344f, 81.71386719f, 82.42797852f, 83.17871094f, 83.96606445f, 84.79003906f, 85.65063477f, 86.55395508f, 87.49389648f, 88.48266602f, 89.51416016f, 90.59448242f, 91.71752930f, 92.89550781f, 94.12841797f, 95.41015625f, 96.75292969f, 98.16284180f, 99.62768555f, 101.15966797f, 102.76489258f, 104.44335938f, 106.20117188f, 108.03833008f, 109.95483398f, 111.96899414f, 114.07470703f, 116.27807617f, 118.59130859f, 121.00830078f, 120.93505859f, 119.94018555f, 118.99414062f, 118.09082031f, 117.23632812f, 116.42456055f, 115.64941406f, 114.91699219f, 114.22729492f, 113.57421875f, 112.95776367f, 112.37792969f, 111.82861328f, 111.32202148f, 110.84594727f, 110.40039062f, 109.99145508f, 109.61303711f, 109.27124023f, 108.95385742f, 108.66699219f, 108.41674805f, 108.19091797f, 107.99560547f, 107.83081055f, 107.69042969f, 107.58666992f, 107.50732422f, 107.45239258f, 107.42797852f, 107.43408203f, 107.46459961f, 107.52563477f, 107.61718750f, 107.73315430f, 107.87963867f, 108.05053711f, 108.25195312f, 108.47778320f, 108.73413086f, 109.02099609f, 109.33837891f, 109.68017578f, 110.05249023f, 110.45532227f, 110.88867188f, 111.35253906f, 111.84692383f, 112.37182617f, 112.92724609f, 113.51318359f, 114.12963867f, 114.78271484f, 115.46630859f, 116.18652344f, 116.93725586f, 117.72460938f, 118.54248047f, 119.40307617f, 120.29418945f, 121.22192383f, 122.19238281f, 123.19335938f, 124.23095703f, 125.31127930f, 126.42822266f, 127.58789062f, 128.77807617f, 130.01098633f, 131.28662109f, 132.59887695f, 133.94775391f, 135.33325195f, 136.76147461f, 138.22631836f, 139.72778320f, 141.25976562f, 142.82836914f, 144.42749023f, 146.06323242f, 147.71728516f, 149.40185547f, 151.10473633f, 152.83203125f, 154.57153320f, 156.32324219f, 158.08105469f, 159.83886719f, 161.59057617f, 163.34228516f, 165.07568359f, 166.79077148f};

__CONSTANT__ float3  ocio_gamut_cusp_table_0[362] = {{57.21237564f, 84.90914917f, 1.11647189f}, {56.85967255f, 85.24464417f, 1.11779726f}, {56.52393723f, 85.57681274f, 1.11905706f}, {56.19857788f, 85.91114044f, 1.12031186f}, {55.88374710f, 86.24654388f, 1.12158489f}, {55.57955551f, 86.58232117f, 1.12280703f}, {55.28611374f, 86.91765594f, 1.12400091f}, {55.00350571f, 87.25165558f, 1.12516654f}, {54.73179626f, 87.58377075f, 1.12632680f}, {54.47103500f, 87.91331482f, 1.12747395f}, {54.22121811f, 88.23992157f, 1.12855351f}, {53.98235321f, 88.56323242f, 1.12963498f}, {53.75437164f, 88.88272858f, 1.13066399f}, {53.53722382f, 89.19857025f, 1.13168705f}, {53.33078003f, 89.51047516f, 1.13265729f}, {53.13492966f, 89.81862640f, 1.13365257f}, {52.94949341f, 90.12313843f, 1.13453948f}, {52.77429199f, 90.42434692f, 1.13542020f}, {52.60913467f, 90.72272491f, 1.13624692f}, {52.45376968f, 91.01864624f, 1.13704336f}, {52.30792618f, 91.31284332f, 1.13785684f}, {52.17137146f, 91.60596466f, 1.13862383f}, {52.04378891f, 91.89881897f, 1.13935220f}, {51.92490387f, 92.19223022f, 1.14003408f}, {51.81438828f, 92.48712158f, 1.14070880f}, {51.71194077f, 92.78456879f, 1.14133656f}, {51.61724091f, 93.08557129f, 1.14195716f}, {51.52283478f, 93.41745758f, 1.14259410f}, {51.43673325f, 93.75637817f, 1.14318407f}, {51.35852051f, 94.10374451f, 1.14378262f}, {52.00476074f, 91.70009613f, 1.14052618f}, {52.62985229f, 89.46926880f, 1.13746965f}, {53.23570251f, 87.39305115f, 1.13457882f}, {53.82398987f, 85.45615387f, 1.13186693f}, {54.39613342f, 83.64540863f, 1.12933910f}, {54.95344543f, 81.94942474f, 1.12688458f}, {55.49704361f, 80.35847473f, 1.12457180f}, {56.02796173f, 78.86381531f, 1.12240696f}, {56.54713440f, 77.45784760f, 1.12022758f}, {57.05541992f, 76.13386536f, 1.11826265f}, {57.55358887f, 74.88594055f, 1.11631978f}, {58.04233551f, 73.70864105f, 1.11442900f}, {58.52235413f, 72.59717560f, 1.11263525f}, {58.99423218f, 71.54737854f, 1.11092281f}, {59.45857620f, 70.55516815f, 1.10923052f}, {59.91592407f, 69.61721802f, 1.10762572f}, {60.36672592f, 68.73021698f, 1.10606289f}, {60.81154251f, 67.89131165f, 1.10457158f}, {61.25073242f, 67.09789276f, 1.10306191f}, {61.68479919f, 66.34753418f, 1.10171211f}, {62.11407089f, 65.63807678f, 1.10026944f}, {62.53901672f, 64.96745300f, 1.09891152f}, {62.95994949f, 64.33384705f, 1.09760106f}, {63.37726593f, 63.73559189f, 1.09633768f}, {63.79124069f, 63.17116928f, 1.09512138f}, {64.20227814f, 62.63906860f, 1.09388566f}, {64.61065674f, 62.13804626f, 1.09268200f}, {65.01670074f, 61.66692352f, 1.09153903f}, {65.42068481f, 61.22457123f, 1.09043479f}, {65.82295227f, 60.80995178f, 1.08923137f}, {66.22374725f, 60.42217255f, 1.08818245f}, {66.62336731f, 60.06037903f, 1.08714271f}, {67.02209473f, 59.72376251f, 1.08606172f}, {67.42022705f, 59.41167450f, 1.08501875f}, {67.81798553f, 59.12339401f, 1.08402824f}, {68.21569061f, 58.85836411f, 1.08309650f}, {68.61360168f, 58.61605453f, 1.08208072f}, {69.01196289f, 58.39596939f, 1.08107400f}, {69.41109467f, 58.19767761f, 1.08014750f}, {69.81123352f, 58.02085114f, 1.07923675f}, {70.21266937f, 57.86503983f, 1.07837021f}, {70.61564636f, 57.73003769f, 1.07744110f}, {71.02053070f, 57.61554718f, 1.07654202f}, {71.42755890f, 57.52138138f, 1.07565153f}, {71.83699036f, 57.44734573f, 1.07474828f}, {72.24919128f, 57.39335251f, 1.07390296f}, {72.66441345f, 57.35923004f, 1.07308006f}, {73.08306885f, 57.34500885f, 1.07224429f}, {73.50535583f, 57.35062790f, 1.07152915f}, {73.93170929f, 57.37610626f, 1.07068169f}, {74.36244202f, 57.42151260f, 1.06981492f}, {74.79788208f, 57.48691177f, 1.06909585f}, {75.23851013f, 57.57249832f, 1.06839168f}, {75.68465424f, 57.67840576f, 1.06761885f}, {76.13672638f, 57.80486679f, 1.06692362f}, {76.59515381f, 57.95212173f, 1.06615305f}, {77.06042480f, 58.12051010f, 1.06553590f}, {77.53297424f, 58.31032181f, 1.06481576f}, {78.01333618f, 58.52198410f, 1.06414485f}, {78.50204468f, 58.75595856f, 1.06356454f}, {78.99963379f, 59.01270676f, 1.06294358f}, {79.50675964f, 59.29280090f, 1.06230271f}, {80.02396393f, 59.59681320f, 1.06184137f}, {80.55199432f, 59.92542648f, 1.06124985f}, {81.09155273f, 60.27940750f, 1.06084442f}, {81.64340973f, 60.65954208f, 1.06045306f}, {82.20840454f, 61.06671906f, 1.06006205f}, {82.78735352f, 61.50184250f, 1.05974650f}, {83.38131714f, 61.96606064f, 1.05950677f}, {83.99125671f, 62.46047592f, 1.05932856f}, {84.61824799f, 62.98630524f, 1.05929434f}, {85.26352692f, 63.54497147f, 1.05932856f}, {85.92840576f, 64.13796997f, 1.05954087f}, {86.61429596f, 64.76691437f, 1.06001389f}, {87.32270813f, 65.43358612f, 1.06054914f}, {88.05532074f, 66.13996124f, 1.07079363f}, {88.81401825f, 66.88819885f, 1.09252179f}, {89.60075378f, 67.68058014f, 1.11574936f}, {90.50785828f, 68.61322784f, 1.14379859f}, {90.13593292f, 68.69538879f, 1.13999438f}, {89.76448059f, 68.79945374f, 1.13645184f}, {89.39335632f, 68.92567444f, 1.13320565f}, {89.02222443f, 69.07417297f, 1.13004017f}, {88.65090179f, 69.24520111f, 1.12721789f}, {88.27912140f, 69.43911743f, 1.12444830f}, {87.90666199f, 69.65615845f, 1.12186909f}, {87.53328705f, 69.89672089f, 1.11943161f}, {87.15874481f, 70.16126251f, 1.11705029f}, {86.78278351f, 70.45014191f, 1.11492193f}, {86.40519714f, 70.76392365f, 1.11280155f}, {86.02564240f, 71.10317993f, 1.11087763f}, {85.64393616f, 71.46849060f, 1.10896027f}, {85.25978088f, 71.86045074f, 1.10720658f}, {84.87290955f, 72.27983856f, 1.10548830f}, {84.48304749f, 72.72747803f, 1.10387957f}, {84.08989716f, 73.20413208f, 1.10229015f}, {83.69316101f, 73.71068573f, 1.10089028f}, {83.29251862f, 74.24823761f, 1.09944975f}, {82.88768768f, 74.81778717f, 1.09816766f}, {82.47827148f, 75.42043304f, 1.09685159f}, {82.06398773f, 76.05750275f, 1.09565592f}, {81.64443207f, 76.73030090f, 1.09450686f}, {81.21922302f, 77.44027710f, 1.09344029f}, {80.78798676f, 78.18901062f, 1.09237587f}, {80.35028076f, 78.97811890f, 1.09138632f}, {79.90566254f, 79.80962372f, 1.09045660f}, {79.45369720f, 80.68523407f, 1.08952117f}, {78.99384308f, 81.60723114f, 1.08870304f}, {78.52561188f, 82.57785797f, 1.08790064f}, {78.04844666f, 83.59969330f, 1.08716440f}, {77.56173706f, 84.67547607f, 1.08642900f}, {77.06490326f, 85.80803680f, 1.08578813f}, {76.55719757f, 87.00070190f, 1.08517683f}, {76.03797913f, 88.25688171f, 1.08456624f}, {76.25382233f, 85.53092957f, 1.08065331f}, {76.47488403f, 82.99378204f, 1.07695949f}, {76.70002747f, 80.62786865f, 1.07355821f}, {76.92826080f, 78.41755676f, 1.07037401f}, {77.15880585f, 76.34920502f, 1.06741714f}, {77.38153839f, 74.48692322f, 1.06470490f}, {77.60523987f, 72.73474121f, 1.06217861f}, {77.82948303f, 71.08396912f, 1.05979455f}, {78.05391693f, 69.52711487f, 1.05755758f}, {78.27824402f, 68.05725098f, 1.05546618f}, {78.50219727f, 66.66819000f, 1.05346406f}, {78.72562408f, 65.35422516f, 1.05157089f}, {78.94833374f, 64.11029816f, 1.04979205f}, {79.17021179f, 62.93175888f, 1.04809976f}, {79.39115143f, 61.81446457f, 1.04654658f}, {79.61109924f, 60.75452423f, 1.04503798f}, {79.82997894f, 59.74834824f, 1.04360008f}, {80.04778290f, 58.79288483f, 1.04225910f}, {80.26448822f, 57.88498688f, 1.04094791f}, {80.48010254f, 57.02212143f, 1.03973246f}, {80.69462585f, 56.20163345f, 1.03857899f}, {80.90806580f, 55.42138672f, 1.03749406f}, {81.12047577f, 54.67914200f, 1.03644383f}, {81.33188629f, 53.97298431f, 1.03549397f}, {81.54232788f, 53.30111694f, 1.03450024f}, {81.75186157f, 52.66186905f, 1.03363860f}, {81.96054840f, 52.05379486f, 1.03281116f}, {82.16843414f, 51.47529602f, 1.03201759f}, {82.37556458f, 50.92518234f, 1.03126395f}, {82.58203888f, 50.40216064f, 1.03059578f}, {82.78792572f, 49.90500641f, 1.02989614f}, {82.99327850f, 49.43281555f, 1.02929437f}, {83.19816589f, 48.98448563f, 1.02869987f}, {83.40267944f, 48.55918121f, 1.02814472f}, {83.60689545f, 48.15595245f, 1.02766752f}, {83.81088257f, 47.77413559f, 1.02716494f}, {84.01472473f, 47.41288376f, 1.02678514f}, {84.21852875f, 47.07151413f, 1.02633476f}, {84.42235565f, 46.74953842f, 1.02600074f}, {84.62629700f, 46.44620514f, 1.02569878f}, {84.83045959f, 46.16094971f, 1.02539706f}, {85.03490448f, 45.89342117f, 1.02512121f}, {85.23975372f, 45.64309311f, 1.02492249f}, {85.44507599f, 45.40946198f, 1.02472365f}, {85.65100098f, 45.19215775f, 1.02459550f}, {85.85759735f, 44.99096298f, 1.02448022f}, {86.06497955f, 44.80531693f, 1.02441621f}, {86.27324677f, 44.63503265f, 1.02443540f}, {86.48251343f, 44.47983932f, 1.02440345f}, {86.69287109f, 44.33936691f, 1.02445459f}, {86.86299896f, 44.23707962f, 1.02449942f}, {87.03397369f, 44.14404678f, 1.02462757f}, {87.20587158f, 44.06029129f, 1.02480698f}, {86.55455780f, 43.59561157f, 1.00876141f}, {85.91802979f, 43.15345383f, 1.00889802f}, {85.29541779f, 42.73288345f, 1.00909686f}, {84.68595886f, 42.33290100f, 1.00927091f}, {84.08892059f, 41.95273972f, 1.00946987f}, {83.50353241f, 41.59174728f, 1.00962543f}, {82.92916107f, 41.24915695f, 1.00980592f}, {82.36521912f, 40.92433929f, 1.00995529f}, {81.81101990f, 40.61663818f, 1.01013577f}, {81.26606750f, 40.32550049f, 1.01029778f}, {80.72979736f, 40.05045319f, 1.01047230f}, {80.20169830f, 39.79093170f, 1.01064050f}, {79.68129730f, 39.54657745f, 1.01077771f}, {79.16813660f, 39.31691742f, 1.01096487f}, {78.66176605f, 39.10151672f, 1.01112080f}, {78.16176605f, 38.90008545f, 1.01126444f}, {77.66775513f, 38.71226883f, 1.01145172f}, {77.17931366f, 38.53779221f, 1.01160157f}, {76.69608307f, 38.37627411f, 1.01175153f}, {76.21772766f, 38.22750854f, 1.01190770f}, {75.74387360f, 38.09128952f, 1.01205146f}, {75.27420807f, 37.96734619f, 1.01222038f}, {74.80838776f, 37.85554123f, 1.01236415f}, {74.34615326f, 37.75559998f, 1.01251423f}, {73.88712311f, 37.66745377f, 1.01266456f}, {73.43104553f, 37.59094238f, 1.01282096f}, {72.97767639f, 37.52593613f, 1.01297128f}, {72.52667236f, 37.47228622f, 1.01313400f}, {72.07775879f, 37.43004608f, 1.01328444f}, {71.63072205f, 37.39896011f, 1.01343489f}, {71.18527985f, 37.37908173f, 1.01357913f}, {70.74111938f, 37.37041855f, 1.01374221f}, {70.29801941f, 37.37285233f, 1.01389277f}, {69.85574341f, 37.38639069f, 1.01404333f}, {69.41402435f, 37.41107559f, 1.01418149f}, {68.97260284f, 37.44698334f, 1.01435733f}, {68.53128815f, 37.49408340f, 1.01450169f}, {68.08976746f, 37.55238724f, 1.01463997f}, {67.64781189f, 37.62206650f, 1.01479709f}, {67.20519257f, 37.70320892f, 1.01495421f}, {66.76165009f, 37.79584885f, 1.01511145f}, {66.31694031f, 37.90018082f, 1.01525617f}, {65.87081146f, 38.01628494f, 1.01543856f}, {65.42299652f, 38.14437866f, 1.01558328f}, {64.97327423f, 38.28465271f, 1.01574707f}, {64.52136230f, 38.43719101f, 1.01591706f}, {64.06700897f, 38.60231018f, 1.01608098f}, {63.60995865f, 38.78022385f, 1.01623857f}, {63.14994812f, 38.97115707f, 1.01641500f}, {62.68664551f, 39.17542267f, 1.01657891f}, {62.21984482f, 39.39329147f, 1.01674938f}, {61.74922562f, 39.62512207f, 1.01691961f}, {61.27453613f, 39.87118149f, 1.01710272f}, {60.79542542f, 40.13190460f, 1.01727951f}, {60.31161118f, 40.40768814f, 1.01745021f}, {59.82278442f, 40.69891357f, 1.01764607f}, {59.32860565f, 41.00609589f, 1.01783574f}, {58.82878113f, 41.32963562f, 1.01801908f}, {58.32297134f, 41.67006683f, 1.01821530f}, {57.81077576f, 42.02800369f, 1.01841784f}, {57.29188919f, 42.40393829f, 1.01860762f}, {56.76590729f, 42.79856491f, 1.01881027f}, {56.23248672f, 43.21246338f, 1.01901317f}, {55.69122314f, 43.64635849f, 1.01922870f}, {55.14171219f, 44.10099792f, 1.01945066f}, {54.58358383f, 44.57710648f, 1.01966000f}, {54.01635742f, 45.07557297f, 1.01990128f}, {53.43964767f, 45.59723663f, 1.02013624f}, {52.85296631f, 46.14304733f, 1.02037120f}, {52.25590897f, 46.71392441f, 1.02061272f}, {51.64802170f, 47.31092072f, 1.02086079f}, {51.02880096f, 47.93513870f, 1.02111530f}, {50.39780045f, 48.58770752f, 1.02138269f}, {49.76190948f, 49.26189804f, 1.02165020f}, {49.11352539f, 49.96623993f, 1.02192426f}, {48.45228195f, 50.70190048f, 1.02220464f}, {47.77771378f, 51.47028732f, 1.02249825f}, {47.08936691f, 52.27272797f, 1.02279818f}, {46.38690186f, 53.11060715f, 1.02311110f}, {45.66987991f, 53.98546600f, 1.02342427f}, {44.93790436f, 54.89892197f, 1.02376330f}, {45.19026947f, 54.76486588f, 1.02370560f}, {45.44290924f, 54.64657593f, 1.02364814f}, {45.69599533f, 54.54383469f, 1.02360976f}, {45.94962692f, 54.45653915f, 1.02355218f}, {46.20396805f, 54.38452911f, 1.02350748f}, {46.45910263f, 54.32776642f, 1.02344990f}, {46.71521378f, 54.28609467f, 1.02341151f}, {46.97245026f, 54.25950241f, 1.02335405f}, {47.23090363f, 54.24794769f, 1.02329648f}, {47.49073792f, 54.25141144f, 1.02325809f}, {47.75212860f, 54.26986313f, 1.02320695f}, {48.01515961f, 54.30333710f, 1.02315581f}, {48.28003693f, 54.35187531f, 1.02309847f}, {48.54692078f, 54.41548920f, 1.02305996f}, {48.81592941f, 54.49431610f, 1.02300882f}, {49.08725739f, 54.58842087f, 1.02295780f}, {49.36106873f, 54.69791412f, 1.02290666f}, {49.63752747f, 54.82299042f, 1.02285552f}, {49.91682053f, 54.96368790f, 1.02280450f}, {50.19913864f, 55.12026978f, 1.02274704f}, {50.48467636f, 55.29295731f, 1.02269602f}, {50.77362061f, 55.48188019f, 1.02264488f}, {51.06618881f, 55.68736267f, 1.02259398f}, {51.36260223f, 55.90961838f, 1.02254283f}, {51.66307068f, 56.14898300f, 1.02248549f}, {51.96784592f, 56.40573883f, 1.02244079f}, {52.27716446f, 56.68023300f, 1.02238333f}, {52.59128952f, 56.97289276f, 1.02233231f}, {52.91044617f, 57.28398895f, 1.02226841f}, {53.23497772f, 57.61403275f, 1.02221751f}, {53.56515503f, 57.96351624f, 1.02216005f}, {53.90125656f, 58.33283234f, 1.02209628f}, {54.24364090f, 58.72263336f, 1.02204525f}, {54.59264374f, 59.13333130f, 1.02198792f}, {54.94858170f, 59.56561279f, 1.02192426f}, {55.31189346f, 60.02011490f, 1.02186692f}, {55.68295288f, 60.49743652f, 1.02180314f}, {56.06216812f, 60.99838257f, 1.02174568f}, {56.44999313f, 61.52365875f, 1.02166927f}, {56.84688568f, 62.07408905f, 1.02161825f}, {57.25337982f, 62.65055084f, 1.02154195f}, {57.66993713f, 63.25394440f, 1.02147186f}, {58.09717178f, 63.88523865f, 1.02140176f}, {58.53567886f, 64.54547882f, 1.02133167f}, {58.98606110f, 65.23572540f, 1.02126169f}, {59.44899750f, 65.95722961f, 1.02118528f}, {59.92521667f, 66.71112823f, 1.02110255f}, {60.41545105f, 67.49883270f, 1.02103257f}, {60.92053223f, 68.32164001f, 1.02095616f}, {61.44134521f, 69.18110657f, 1.02086711f}, {61.97879791f, 70.07878876f, 1.02077806f}, {62.53384781f, 71.01634216f, 1.02070177f}, {63.10761642f, 71.99555206f, 1.02061272f}, {63.70120621f, 73.01840973f, 1.02053010f}, {64.31582642f, 74.08673096f, 1.02042842f}, {64.95280457f, 75.20288086f, 1.03173161f}, {65.61354828f, 76.36899567f, 1.04510474f}, {66.29952240f, 77.58756256f, 1.05859613f}, {67.01241302f, 78.86112213f, 1.07223737f}, {67.75390625f, 80.19242096f, 1.08606172f}, {67.22401428f, 80.22055817f, 1.08720040f}, {66.70339203f, 80.26650238f, 1.08844995f}, {66.19181824f, 80.32981873f, 1.08957183f}, {65.68901825f, 80.41010284f, 1.09076881f}, {65.19482422f, 80.50682831f, 1.09200466f}, {64.70909119f, 80.61975861f, 1.09322882f}, {64.19248962f, 80.75947571f, 1.09456527f}, {63.68548203f, 80.91693878f, 1.09594178f}, {63.18793488f, 81.09151459f, 1.09726298f}, {62.69973373f, 81.28250122f, 1.09860194f}, {62.22087097f, 81.48923492f, 1.09998870f}, {61.75128174f, 81.71097565f, 1.10136402f}, {61.29096603f, 81.94712830f, 1.10275018f}, {60.83993149f, 82.19673920f, 1.10412490f}, {60.39822769f, 82.45918274f, 1.10551059f}, {59.96593094f, 82.73352051f, 1.10692239f}, {59.54311371f, 83.01885986f, 1.10828507f}, {59.12989807f, 83.31429291f, 1.10968888f}, {58.72639465f, 83.61887360f, 1.11103582f}, {58.33273697f, 83.93165588f, 1.11240113f}, {57.94906616f, 84.25167084f, 1.11376226f}, {57.57556534f, 84.57781982f, 1.11512697f}, {57.21237564f, 84.90914917f, 1.11647189f}, {56.85967255f, 85.24464417f, 1.11779726f}};

// Extra functions not from OCIO

typedef struct
{
    float3 x;
    float3 y;
    float3 z;
} float3x3;

__DEVICE__ inline float3 vecmul( float3x3 m, float3 v)
{
    float3 r;

    r.x = m.x.x * v.x + m.y.x * v.y + m.z.x * v.z;
    r.y = m.x.y * v.x + m.y.y * v.y + m.z.y * v.z;
    r.z = m.x.z * v.x + m.y.z * v.y + m.z.z * v.z;
    
    return r;
}

__DEVICE__ inline float vecdot( float3 a, float3 b)
{   
    return a.x*b.x + a.y*b.y + a.z*b.z;
}

__DEVICE__ inline float3 maxf3(float3 a, float b)
{
    float3 c;

    c.x = _fmaxf(a.x, b);
    c.y = _fmaxf(a.y, b);
    c.z = _fmaxf(a.z, b);

    return c;
}

__DEVICE__ inline float3 minf3(float3 a, float b)
{
    float3 c;

    c.x = _fminf(a.x, b);
    c.y = _fminf(a.y, b);
    c.z = _fminf(a.z, b);

    return c;
}

__DEVICE__ inline float3 powf3(float3 a, float b)
{
    a.x = _powf(a.x, b);
    a.y = _powf(a.y, b);
    a.z = _powf(a.z, b);

    return a;
}

__DEVICE__ inline float3 absf3(float3 a)
{
    a.x = _fabs(a.x);
    a.y = _fabs(a.y);
    a.z = _fabs(a.z);

    return a;
}

__DEVICE__ inline float3 signf3(float3 a)
{
    a.x = _copysignf(1.0f, a.x);
    a.y = _copysignf(1.0f, a.y);
    a.z = _copysignf(1.0f, a.z);

    return a;
}

// OCIO functions

__DEVICE__ float ocio_reach_m_table_0_sample(float h)
{
  int i_base = (int)_floorf(h);
  int i_lo = i_base + 1;
  int i_hi = i_lo + 1;
  float lo = ocio_reach_m_table_0[i_lo];
  float hi = ocio_reach_m_table_0[i_hi];
  float t = h - i_base;
  return _mix(lo, hi, t);
}

__DEVICE__ float ocio_tonescale_fwd0(float J)
{
  float A = 0.0323680267f * _powf(_fabs(J) * 0.00999999978f, 0.879464149f);
  float Y = _powf(( 27.1299992f * A) / (1.0f - A), 2.3809523809523809f);
  float f = 1.04710376f * _powf(Y / (Y + 0.73009213709383403f), 1.14999998f);
  float Y_ts = max(0.0f, f * f / (f + 0.0399999991f));
  float F_L_Y = _powf(0.79370057210326195f * Y_ts, 0.42f);
  float J_ts = 100. * _powf((F_L_Y / ( 27.1299992f + F_L_Y)) * 30.8946857f, 1.13705599f);
  return J_ts;
}

__DEVICE__ float ocio_toe_fwd0(float x, float limit, float k1_in, float k2_in)
{
  float k2 = max(k2_in, 0.001f);
  float k1 = _sqrtf(k1_in * k1_in + k2 * k2);
  float k3 = (limit + k1) / (limit + k2);
  return (x > limit) ? x : 0.5f * (k3 * x - k1 + _sqrtf((k3 * x - k1) * (k3 * x - k1) + 4.0f * k2 * k3 * x));
}

__DEVICE__ float3 ocio_gamut_cusp_table_0_sample(float h)
{
  int i = int(h) + 1;
  int i_lo = int(max(float(0), float(i + 0)));
  int i_hi = int(min(float(361), float(i + 2)));
  while (i_lo + 1 < i_hi)
  {
    float hcur = ocio_gamut_cusp_table_0_hues_array[i];
    if (h > hcur)
    {
      i_lo = i;
    }
    else
    {
      i_hi = i;
    }
    i = (i_lo + i_hi) / 2;
  }
  float3 lo = ocio_gamut_cusp_table_0[i_hi - 1];
  float3 hi = ocio_gamut_cusp_table_0[i_hi];
  float t = (h - ocio_gamut_cusp_table_0_hues_array[i_hi - 1]) / (ocio_gamut_cusp_table_0_hues_array[i_hi] - ocio_gamut_cusp_table_0_hues_array[i_hi - 1]);
  return _mix(lo, hi, t);
}

__DEVICE__ float ocio_get_focus_gain0(float J, float cuspJ)
{
  float thr = mix(cuspJ, 100.000000f, 0.300000f);
  if (J > thr)
  {
    float gain = ( 100.f - thr) / max(0.0001f, 100.f - J);
    gain = _logf(gain)/_logf(10.0f);
    return gain * gain + 1.0f;
  }
  else
  {
    return 1.0f;
  }
}

__DEVICE__ float ocio_solve_J_intersect0(float J, float M, float focusJ, float slope_gain)
{
  float M_scaled = M / slope_gain;
  float a = M_scaled / focusJ;
  if (J < focusJ)
  {
    float b = 1.0f - M_scaled;
    float c = -J;
    float det =  b * b - 4.f * a * c;
    float root =  _sqrtf(det);
    return -2.0f * c / (b + root);
  }
  else
  {
    float b = - (1.0f + M_scaled + 100.f * a);
    float c = 100.f * M_scaled + J;
    float det =  b * b - 4.f * a * c;
    float root =  _sqrtf(det);
    return -2.0f * c / (b - root);
  }
}

__DEVICE__ float ocio_find_gamut_boundary_intersection0(float2 JM_cusp, float gamma_top_inv, float gamma_bottom_inv, float J_intersect_source, float J_intersect_cusp, float slope)
{
  float M_boundary_lower = J_intersect_cusp * _powf(J_intersect_source / J_intersect_cusp, gamma_bottom_inv) / (JM_cusp.r / JM_cusp.g - slope);
  float M_boundary_upper = JM_cusp.g * (100.f - J_intersect_cusp) * _powf((100.f - J_intersect_source) / (100.f - J_intersect_cusp), gamma_top_inv) / (slope * JM_cusp.g + 100.f - JM_cusp.r);
  float smin = 0.0f;
  {
    float a = M_boundary_lower;
    float b = M_boundary_upper;
    float s = 0.119999997f * JM_cusp.g;
    float h = max(s - _fabs(a - b), 0.0f) / s;
    smin = min(a, b) - h * h * h * s * 0.16666666666666666f;
  }
  return smin;
}

__DEVICE__ float ocio_remap_M_fwd0(float M, float gamut_boundary_M, float reach_boundary_M)
{
  float boundary_ratio = gamut_boundary_M / reach_boundary_M;
  float proportion = max(boundary_ratio, 0.75f);
  float threshold = proportion * gamut_boundary_M;
  if (proportion >= 1.0f || M <= threshold)
  {
    return M;
  }
  float m_offset = M - threshold;
  float gamut_offset = gamut_boundary_M - threshold;
  float reach_offset = reach_boundary_M - threshold;
  float scale = reach_offset / ((reach_offset / gamut_offset) - 1.0f);
  float nd = m_offset / scale;
  return threshold + scale * nd / (1.0f + nd);
}

__DEVICE__ float3 ocio_gamut_compress0(float3 JMh, float Jx, float3 JMGcusp, float reachMaxM)
{
  float J = JMh.r;
  float M = JMh.g;
  float h = JMh.b;
  if (M <= 0.0f || J > 100.f)
  {
    return float3(J, 0.0f, h);
  }
  else
  {
    float2 JMcusp = JMGcusp.rg;
    float focusJ = mix(JMcusp.r, 34.096539f, min(1.0f, 1.300000f - (JMcusp.r / 100.000000f)));
    float slope_gain = 135.f * ocio_get_focus_gain0(Jx, JMcusp.r);
    float J_intersect_source = ocio_solve_J_intersect0(JMh.r, JMh.g, focusJ, slope_gain);
    float gamut_slope = (J_intersect_source < focusJ) ? J_intersect_source : (100.f - J_intersect_source);
    gamut_slope = gamut_slope * (J_intersect_source - focusJ) / (focusJ * slope_gain);
    float gamma_top_inv = JMGcusp.b;
    float gamma_bottom_inv = 0.877192974f;
    float J_intersect_cusp = ocio_solve_J_intersect0(JMcusp.r, JMcusp.g, focusJ, slope_gain);
    float gamutBoundaryM = ocio_find_gamut_boundary_intersection0(JMcusp, gamma_top_inv, gamma_bottom_inv, J_intersect_source, J_intersect_cusp, gamut_slope);
    if (gamutBoundaryM <= 0.0f)
    {
      return float3(J, 0.0f, h);
    }
    float reachBoundaryM = 100.f * _powf(J_intersect_source / 100.f,  0.879464149f);
    reachBoundaryM = reachBoundaryM / ((100.f / reachMaxM) - gamut_slope);
    float remapped_M = ocio_remap_M_fwd0(M, gamutBoundaryM, reachBoundaryM);
    float remapped_J = J_intersect_source + remapped_M * gamut_slope;
    return make_float3(remapped_J, remapped_M, h);
  }
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
{
  float3 inPixel = make_float3(p_R, p_G, p_B);
  float3 outColor = inPixel;
    
  // Add Matrix processing

  {
    outColor = vecmul({{1.4514393161456653f, -0.07655377339602043f, 0.008316148425697719f}, {-0.23651074689374019f, 1.1762296998335731f, -0.0060324497910210278f}, {-0.21492856925192524f, -0.099675926437552201f, 0.9977163013653233f}}, outColor);
  }

  // Add Range processing

  {
    outColor = maxf3(outColor, 0.f);
    outColor = minf3(outColor, 1024.f);
  }

  // Add Matrix processing

  {
    outColor = vecmul({{0.69545224135745176f, 0.044794563372037632f, -0.0055258825581135443f}, {0.14067869647029416f, 0.85967111845642163f, 0.0040252103059786586f}, {0.16386906217225403f, 0.095534318171540358f, 1.0015006722521349f}}, outColor);
  }

  // Add FixedFunction 'ACES_OutputTransform20 (Forward)' processing
  
  {
    
    // Add RGB to JMh
    
    float3 JMh;
    float3 Aab;
    {
      {
        float3 lms = vecmul({{0.445181042f, 0.123734146f, 0.0117007261f}, {0.34964928f, 0.613643706f, 0.0280607939f}, {-0.00112973212f, 0.0563228019f, 0.753939033f}}, outColor);
        float3 F_L_v = powf3(absf3(lms), 0.419999987f);
        float3 rgb_a = (signf3(lms) * F_L_v) / ( 27.1299992f + F_L_v);
        Aab = vecmul({{20.25881f, 15480.f, 1720.f}, {10.129405f, -16887.2734f, 1720.f}, {0.506470263f, 1407.27271f, -3440.f}}, rgb_a);
      }
      {
        float J = 100.f * _powf(Aab.r, 1.13705599f);
        float M = (J == 0.0f) ? 0.0f : _sqrtf(Aab.g * Aab.g + Aab.b * Aab.b);
        float h = (Aab.g == 0.0f) ? 0.0f : _atan2f(Aab.b, Aab.g) * 57.29577951308238f;
        h = h - _floorf(h / 360.0f) * 360.0f;
        h = (h < 0.0f) ? h + 360.0f : h;
        JMh = make_float3(J, M, h);
      }
      outColor = JMh;
    }
    float h_rad = outColor.b * 0.0174532924f;
    float cos_hr = _cosf(h_rad);
    float sin_hr = _sinf(h_rad);

    // Add ToneScale and ChromaCompress (fwd)
    
    float J_ts = ocio_tonescale_fwd0(outColor.r);
    // Sample tables (fwd)
    float reachMaxM = ocio_reach_m_table_0_sample(outColor.b);

    {
      float J = outColor.r;
      float M = outColor.g;
      float h = outColor.b;
      float M_cp = M;
      if (M != 0.0f)
      {
        float nJ = J_ts / 100.f;
        float snJ = max(0.0f, 1.0f - nJ);
        float Mnorm;
        {
          float cos_hr2 = 2.0f * cos_hr * cos_hr - 1.0f;
          float sin_hr2 = 2.0f * cos_hr * sin_hr;
          float cos_hr3 = 4.0f * cos_hr * cos_hr * cos_hr - 3.0f * cos_hr;
          float sin_hr3 = 3.0f * sin_hr - 4.0f * sin_hr * sin_hr * sin_hr;
          float3 cosines = make_float3(cos_hr, cos_hr2, cos_hr3);
          float3 cosine_weights = float3(11.341321604032515f, 16.469863649185896f, 7.8842182208776475f);
          float3 sines = float3(sin_hr, sin_hr2, sin_hr3);
          float3 sine_weights = float3(14.665187919584513f, -6.3725780354404442f, 9.1941277054452897f);
          Mnorm = vecdot(cosines, cosine_weights) + vecdot(sines, sine_weights) + 77.133051547393805f;
        }
        float limit = _powf(nJ, 0.879464149f) * reachMaxM / Mnorm;
        M_cp = M * _powf(J_ts / J, 0.879464149f);
        M_cp = M_cp / Mnorm;
        M_cp = limit - ocio_toe_fwd0(limit - M_cp, limit - 0.001f, snJ * 1.29999995f, _sqrtf(nJ * nJ + 0.00499999989f));
        M_cp = ocio_toe_fwd0(M_cp, limit, nJ * 2.4000001f, snJ);
        M_cp = M_cp * Mnorm;
      }
      outColor = make_float3(J_ts, M_cp, h);
    }

    // Add GamutCompress (fwd)
    
    {
      float3 JMGcusp = ocio_gamut_cusp_table_0_sample(outColor.b);
      outColor = ocio_gamut_compress0(outColor, outColor.r, JMGcusp, reachMaxM);
    }

    // Add JMh to RGB
    
    {
      float3 JMh = outColor;
      float3 Aab;
      {
        Aab.r = _powf(JMh.r * 0.00999999978f, 0.879464149f);
        Aab.g = JMh.g * cos_hr;
        Aab.b = JMh.g * sin_hr;
      }
      {
        float3 rgb_a = vecmul({{0.0323680267f, 0.0323680267, 0.0323680267f}, {2.07657631e-05f, -4.10250432e-05f, -1.01296409e-05f}, {1.3260621e-05f, -1.20174373e-05f, -0.000290076074f}}, Aab);
        float3 lms = signf3(rgb_a) * powf3( 27.1299992f * absf3(rgb_a) / (1.0f - absf3(rgb_a)), 2.38095236f);
        outColor = vecmul({{5.86586046, -1.17879069, 0.0301606283}, {-4.48821688, 2.81135988, -0.16902554}, {-0.117723338, -0.372647762, 1.39878595}}, lms);
      }
    }
  }

  // Add Range processing
  
  {
    outColor = maxf3(outColor, 0.f);
    outColor = minf3(outColor, 1.f);
  }

  // Add Gamma 'basicRev' processing
  
  {
    float gamma = 0.3846153846153846f;
    outColor = powf3(outColor, gamma );
  }

  return outColor;
}

