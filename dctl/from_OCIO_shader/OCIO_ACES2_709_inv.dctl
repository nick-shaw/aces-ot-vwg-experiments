// DEFINE_ACES_PARAM(IS_PARAMETRIC_ACES_TRANSFORM: 0)

// Declaration of tables

__CONSTANT__ float ocio_gamut_cusp_table_0_hues_array[362] = {-1.01858521f, 0.0f, 0.999435902f, 1.9988718f, 2.9983077f, 3.99774361f, 4.99717951f, 5.99661541f, 6.99605131f, 7.99548721f, 8.99492264f, 9.99435902f, 10.9937954f, 11.9932308f, 12.9926662f, 13.9921026f, 14.991539f, 15.9909744f, 16.9904099f, 17.9898453f, 18.9892826f, 19.988718f, 20.9881535f, 21.9875908f, 22.9870262f, 23.9864616f, 24.9858971f, 26.2510033f, 27.2489777f, 28.2469521f, 29.2449265f, 30.2429008f, 31.2408752f, 32.2388496f, 33.236824f, 34.2347984f, 35.2327728f, 36.2307434f, 37.2287216f, 38.2266922f, 39.2246704f, 40.222641f, 41.2206154f, 42.2185898f, 43.2165642f, 44.2145386f, 45.212513f, 46.2104874f, 47.2084618f, 48.2064362f, 49.2044106f, 50.2023849f, 51.2003593f, 52.1983337f, 53.1963043f, 54.1942825f, 55.1922531f, 56.1902313f, 57.1882019f, 58.1861801f, 59.1841507f, 60.1821251f, 61.1800995f, 62.1780739f, 63.1760483f, 64.1740265f, 65.1719971f, 66.1699677f, 67.1679459f, 68.1659241f, 69.1638947f, 70.1618652f, 71.1598434f, 72.1578217f, 73.1557922f, 74.1537628f, 75.151741f, 76.1497192f, 77.1476898f, 78.1456604f, 79.1436386f, 80.1416092f, 81.1395874f, 82.137558f, 83.1355286f, 84.1335068f, 85.131485f, 86.1294556f, 87.1274261f, 88.1254044f, 89.1233826f, 90.1213531f, 91.1193237f, 92.1172943f, 93.1152802f, 94.1132507f, 95.1112213f, 96.1091919f, 97.1071777f, 98.1051483f, 99.1031189f, 100.101089f, 101.099075f, 102.097046f, 103.095016f, 104.092987f, 105.090973f, 106.088936f, 106.548775f, 107.571564f, 108.594353f, 109.617142f, 110.639931f, 111.66272f, 112.685509f, 113.708298f, 114.731087f, 115.753876f, 116.776665f, 117.799454f, 118.822243f, 119.845032f, 120.867821f, 121.89061f, 122.913399f, 123.936188f, 124.958977f, 125.981766f, 127.004555f, 128.027344f, 129.05014f, 130.072922f, 131.095703f, 132.1185f, 133.141296f, 134.164078f, 135.186859f, 136.209656f, 137.232452f, 138.255234f, 139.278015f, 140.300812f, 141.287491f, 142.27417f, 143.260849f, 144.247528f, 145.234207f, 146.220886f, 147.207565f, 148.207993f, 149.20842f, 150.208847f, 151.209274f, 152.209702f, 153.210129f, 154.210556f, 155.210983f, 156.211411f, 157.211853f, 158.21228f, 159.212708f, 160.213135f, 161.213562f, 162.213989f, 163.214417f, 164.214844f, 165.215271f, 166.215698f, 167.216125f, 168.216553f, 169.21698f, 170.217407f, 171.217834f, 172.218262f, 173.218689f, 174.219116f, 175.219543f, 176.219971f, 177.220398f, 178.220825f, 179.221252f, 180.22168f, 181.222107f, 182.222549f, 183.222977f, 184.223404f, 185.223831f, 186.224258f, 187.224686f, 188.225113f, 189.22554f, 190.225967f, 191.226395f, 192.226822f, 193.12616f, 194.025482f, 194.92482f, 195.824158f, 196.830383f, 197.836609f, 198.842819f, 199.849045f, 200.85527f, 201.861496f, 202.867706f, 203.873932f, 204.880157f, 205.886383f, 206.892609f, 207.898819f, 208.905045f, 209.91127f, 210.917496f, 211.923706f, 212.929932f, 213.936157f, 214.942383f, 215.948608f, 216.954819f, 217.961044f, 218.96727f, 219.973495f, 220.979706f, 221.985931f, 222.992157f, 223.998383f, 225.004608f, 226.010834f, 227.017044f, 228.02327f, 229.029495f, 230.035706f, 231.041931f, 232.048157f, 233.054382f, 234.060608f, 235.066833f, 236.073044f, 237.079269f, 238.085495f, 239.091705f, 240.097931f, 241.104156f, 242.110382f, 243.116608f, 244.122833f, 245.129044f, 246.135269f, 247.141495f, 248.147705f, 249.153931f, 250.160156f, 251.166382f, 252.172607f, 253.178833f, 254.185043f, 255.191269f, 256.19751f, 257.203705f, 258.20993f, 259.216156f, 260.222382f, 261.228607f, 262.234833f, 263.241058f, 264.247253f, 265.253479f, 266.259705f, 267.26593f, 268.272156f, 269.270721f, 270.269287f, 271.267853f, 272.266418f, 273.264984f, 274.26355f, 275.262115f, 276.260681f, 277.249512f, 278.238342f, 279.227203f, 280.216034f, 281.204865f, 282.193695f, 283.182556f, 284.171387f, 285.160217f, 286.149048f, 287.137878f, 288.12674f, 289.11557f, 290.104401f, 291.093231f, 292.082092f, 293.070923f, 294.059753f, 295.048584f, 296.037445f, 297.026276f, 298.015106f, 299.003937f, 299.992798f, 300.981628f, 301.970459f, 302.95929f, 303.94812f, 304.936981f, 305.925812f, 306.914642f, 307.903473f, 308.892334f, 309.881165f, 310.869995f, 311.858826f, 312.847656f, 313.836517f, 314.825348f, 315.814178f, 316.803009f, 317.79187f, 318.780701f, 319.769531f, 320.758362f, 321.747192f, 322.736053f, 323.724884f, 324.713715f, 325.702545f, 326.691406f, 327.680237f, 328.669067f, 329.657898f, 330.646759f, 331.63559f, 332.62442f, 333.628967f, 334.633514f, 335.638062f, 336.642609f, 337.647186f, 338.651733f, 339.656281f, 340.660828f, 341.665375f, 342.68396f, 343.702545f, 344.72113f, 345.739746f, 346.758331f, 347.776917f, 348.795502f, 349.814087f, 350.832703f, 351.851288f, 352.869873f, 353.888458f, 354.907043f, 355.925629f, 356.944244f, 357.96283f, 358.981415f, 360.0f};

__CONSTANT__ float  ocio_reach_m_table_0[362] = {165.07568359f, 166.79077148f, 168.48144531f, 170.13549805f, 171.75903320f, 173.34594727f, 174.88403320f, 176.37329102f, 177.80761719f, 179.18701172f, 180.51147461f, 181.76879883f, 182.97119141f, 184.11254883f, 185.19287109f, 186.21826172f, 187.18261719f, 188.09204102f, 188.95263672f, 189.76440430f, 190.53344727f, 191.25976562f, 191.95556641f, 192.62084961f, 193.25561523f, 193.87817383f, 194.36645508f, 187.09716797f, 180.40771484f, 174.24316406f, 168.53027344f, 163.23242188f, 158.30688477f, 153.71704102f, 149.43237305f, 145.42236328f, 141.66870117f, 138.14086914f, 134.82666016f, 131.70776367f, 128.77197266f, 126.00097656f, 123.38256836f, 120.90454102f, 118.56079102f, 116.34521484f, 114.23950195f, 112.24975586f, 110.35156250f, 108.55712891f, 106.84814453f, 105.22460938f, 103.68652344f, 102.21557617f, 100.82397461f, 99.49340820f, 98.22998047f, 97.02758789f, 95.88012695f, 94.78759766f, 93.75000000f, 92.76733398f, 91.82739258f, 90.93627930f, 90.08789062f, 89.28222656f, 88.51928711f, 87.79296875f, 87.10937500f, 86.45629883f, 85.84594727f, 85.26611328f, 84.71679688f, 84.20410156f, 83.72192383f, 83.27026367f, 82.84912109f, 82.45849609f, 82.09228516f, 81.75659180f, 81.45141602f, 81.17065430f, 80.91430664f, 80.68847656f, 80.48706055f, 80.31005859f, 80.15747070f, 80.02929688f, 79.92553711f, 79.84619141f, 79.79736328f, 79.76684570f, 79.76074219f, 79.77905273f, 79.82177734f, 79.89501953f, 79.98657227f, 80.10253906f, 80.24902344f, 80.41381836f, 80.60913086f, 80.82275391f, 81.06689453f, 81.34155273f, 81.64062500f, 81.96411133f, 82.31811523f, 82.69653320f, 83.10546875f, 83.54492188f, 84.01489258f, 84.51538086f, 85.05249023f, 85.62011719f, 86.21826172f, 86.85302734f, 87.52441406f, 88.23242188f, 88.98315430f, 89.77050781f, 90.60668945f, 91.47949219f, 92.40112305f, 93.36547852f, 94.38476562f, 95.45288086f, 96.57592773f, 97.75390625f, 98.99902344f, 100.29907227f, 101.66625977f, 103.10668945f, 104.62036133f, 106.20727539f, 107.88574219f, 109.64355469f, 111.49902344f, 113.45214844f, 115.50903320f, 117.67578125f, 119.97070312f, 122.38769531f, 124.94506836f, 127.65502930f, 130.52368164f, 133.56933594f, 136.79809570f, 140.22827148f, 143.88427734f, 141.69311523f, 138.11645508f, 134.73510742f, 131.53076172f, 128.49731445f, 125.62255859f, 122.89428711f, 120.30639648f, 117.84667969f, 115.50292969f, 113.27514648f, 111.15722656f, 109.13696289f, 107.20825195f, 105.37719727f, 103.62548828f, 101.95312500f, 100.36010742f, 98.83422852f, 97.38159180f, 95.98999023f, 94.66552734f, 93.39599609f, 92.18139648f, 91.02172852f, 89.91699219f, 88.85498047f, 87.84179688f, 86.87744141f, 85.95581055f, 85.07080078f, 84.22851562f, 83.42285156f, 82.65991211f, 81.92749023f, 81.23168945f, 80.56640625f, 79.93164062f, 79.33349609f, 78.75976562f, 78.22265625f, 77.70385742f, 77.22167969f, 76.76391602f, 76.33056641f, 75.92163086f, 75.54321289f, 75.18310547f, 74.85351562f, 74.54223633f, 74.25537109f, 73.99291992f, 73.74877930f, 73.52905273f, 73.33374023f, 73.15673828f, 72.99804688f, 72.86376953f, 72.74780273f, 72.65625000f, 72.58300781f, 72.52807617f, 72.49755859f, 72.48535156f, 72.49145508f, 72.52197266f, 72.57080078f, 72.63793945f, 72.72338867f, 72.83325195f, 72.96752930f, 73.11401367f, 73.28491211f, 73.48022461f, 73.69384766f, 73.93188477f, 74.18823242f, 74.46899414f, 74.77416992f, 75.09765625f, 75.45166016f, 75.82397461f, 76.22070312f, 76.64794922f, 77.09960938f, 77.57568359f, 78.07617188f, 78.60717773f, 79.16870117f, 79.75463867f, 80.37719727f, 81.03027344f, 81.71386719f, 82.42797852f, 83.17871094f, 83.96606445f, 84.79003906f, 85.65063477f, 86.55395508f, 87.49389648f, 88.48266602f, 89.51416016f, 90.59448242f, 91.71752930f, 92.89550781f, 94.12841797f, 95.41015625f, 96.75292969f, 98.16284180f, 99.62768555f, 101.15966797f, 102.76489258f, 104.44335938f, 106.20117188f, 108.03833008f, 109.95483398f, 111.96899414f, 114.07470703f, 116.27807617f, 118.59130859f, 121.00830078f, 120.93505859f, 119.94018555f, 118.99414062f, 118.09082031f, 117.23632812f, 116.42456055f, 115.64941406f, 114.91699219f, 114.22729492f, 113.57421875f, 112.95776367f, 112.37792969f, 111.82861328f, 111.32202148f, 110.84594727f, 110.40039062f, 109.99145508f, 109.61303711f, 109.27124023f, 108.95385742f, 108.66699219f, 108.41674805f, 108.19091797f, 107.99560547f, 107.83081055f, 107.69042969f, 107.58666992f, 107.50732422f, 107.45239258f, 107.42797852f, 107.43408203f, 107.46459961f, 107.52563477f, 107.61718750f, 107.73315430f, 107.87963867f, 108.05053711f, 108.25195312f, 108.47778320f, 108.73413086f, 109.02099609f, 109.33837891f, 109.68017578f, 110.05249023f, 110.45532227f, 110.88867188f, 111.35253906f, 111.84692383f, 112.37182617f, 112.92724609f, 113.51318359f, 114.12963867f, 114.78271484f, 115.46630859f, 116.18652344f, 116.93725586f, 117.72460938f, 118.54248047f, 119.40307617f, 120.29418945f, 121.22192383f, 122.19238281f, 123.19335938f, 124.23095703f, 125.31127930f, 126.42822266f, 127.58789062f, 128.77807617f, 130.01098633f, 131.28662109f, 132.59887695f, 133.94775391f, 135.33325195f, 136.76147461f, 138.22631836f, 139.72778320f, 141.25976562f, 142.82836914f, 144.42749023f, 146.06323242f, 147.71728516f, 149.40185547f, 151.10473633f, 152.83203125f, 154.57153320f, 156.32324219f, 158.08105469f, 159.83886719f, 161.59057617f, 163.34228516f, 165.07568359f, 166.79077148f};

__CONSTANT__ float3  ocio_gamut_cusp_table_0[362] = {{54.54076385f, 70.64421082f, 1.12447917f}, {54.25070953f, 70.83341980f, 1.12561488f}, {53.97383118f, 71.02529907f, 1.12665212f}, {53.70462418f, 71.22275543f, 1.12778437f}, {53.44310379f, 71.42557526f, 1.12877893f}, {53.18931198f, 71.63332367f, 1.12981415f}, {52.94325256f, 71.84573364f, 1.13084340f}, {52.70491409f, 72.06248474f, 1.13182783f}, {52.47431564f, 72.28325653f, 1.13280594f}, {52.25144196f, 72.50787354f, 1.13369179f}, {52.03627777f, 72.73613739f, 1.13464177f}, {51.82880783f, 72.96784210f, 1.13549089f}, {51.62900162f, 73.20287323f, 1.13637292f}, {51.43678284f, 73.44126129f, 1.13720918f}, {51.25212860f, 73.68283081f, 1.13799119f}, {51.07494736f, 73.92766571f, 1.13879800f}, {50.90518188f, 74.17595673f, 1.13953447f}, {50.74271011f, 74.42760468f, 1.14027214f}, {50.58746338f, 74.68292999f, 1.14100277f}, {50.43932343f, 74.94202423f, 1.14169443f}, {50.29816055f, 75.20524597f, 1.14231527f}, {50.16386414f, 75.47290802f, 1.14294481f}, {50.03627396f, 75.74520111f, 1.14353514f}, {49.91526794f, 76.02268219f, 1.14410210f}, {49.80068588f, 76.30568695f, 1.14466953f}, {49.69237900f, 76.59477234f, 1.14516568f}, {49.59016037f, 76.89031982f, 1.14568627f}, {49.46929550f, 77.27471161f, 1.14626336f}, {50.14492416f, 75.22270203f, 1.14276946f}, {50.80022812f, 73.31602478f, 1.13953447f}, {51.43671036f, 71.54032135f, 1.13642025f}, {52.05575180f, 69.88317871f, 1.13344860f}, {52.65854645f, 68.33383942f, 1.13070309f}, {53.24627304f, 66.88285065f, 1.12802505f}, {53.81994247f, 65.52192688f, 1.12552214f}, {54.38053513f, 64.24363708f, 1.12309945f}, {54.92892838f, 63.04163361f, 1.12075639f}, {55.46592331f, 61.91002274f, 1.11856031f}, {55.99230576f, 60.84363174f, 1.11638057f}, {56.50878525f, 59.83794403f, 1.11434567f}, {57.01602554f, 58.88874054f, 1.11238611f}, {57.51463699f, 57.99221039f, 1.11044848f}, {58.00519562f, 57.14505768f, 1.10857010f}, {58.48825455f, 56.34421921f, 1.10676527f}, {58.96436691f, 55.58685684f, 1.10498869f}, {59.43397141f, 54.87047577f, 1.10332203f}, {59.89759445f, 54.19274902f, 1.10171211f}, {60.35559845f, 53.55163574f, 1.10008466f}, {60.80846786f, 52.94514847f, 1.09853566f}, {61.25658798f, 52.37155914f, 1.09696162f}, {61.70032501f, 51.82928848f, 1.09550214f}, {62.14009094f, 51.31674194f, 1.09406817f}, {62.57622910f, 50.83274841f, 1.09266734f}, {63.00909042f, 50.37593460f, 1.09128451f}, {63.43896484f, 49.94513702f, 1.08991969f}, {63.86621094f, 49.53934860f, 1.08855116f}, {64.29117584f, 49.15764999f, 1.08729422f}, {64.71411896f, 48.79906845f, 1.08597541f}, {65.13534546f, 48.46284866f, 1.08471000f}, {65.55521393f, 48.14818954f, 1.08344746f}, {65.97394562f, 47.85442734f, 1.08222365f}, {66.39184570f, 47.58090591f, 1.08098853f}, {66.80924988f, 47.32710266f, 1.07979155f}, {67.22637177f, 47.09244156f, 1.07863283f}, {67.64353943f, 46.87643051f, 1.07748365f}, {68.06103516f, 46.67868805f, 1.07631576f}, {68.47908783f, 46.49879837f, 1.07518554f}, {68.89805603f, 46.33636856f, 1.07407892f}, {69.31818390f, 46.19116592f, 1.07296050f}, {69.73978424f, 46.06283569f, 1.07176745f}, {70.16313171f, 45.95117188f, 1.07071674f}, {70.58853912f, 45.85596848f, 1.06961238f}, {71.01629639f, 45.77704239f, 1.06851017f}, {71.44673920f, 45.71425247f, 1.06750762f}, {71.88016510f, 45.66752243f, 1.06645143f}, {72.31691742f, 45.63671494f, 1.06539047f}, {72.75726318f, 45.62179947f, 1.06432462f}, {73.20166016f, 45.62276840f, 1.06326091f}, {73.65042877f, 45.63966751f, 1.06219256f}, {74.10388947f, 45.67246628f, 1.06120861f}, {74.56243896f, 45.72127914f, 1.06013739f}, {75.02658081f, 45.78623581f, 1.05912316f}, {75.49660492f, 45.86743546f, 1.05808353f}, {75.97308350f, 45.96506882f, 1.05705953f}, {76.45634460f, 46.07932281f, 1.05601728f}, {76.94692230f, 46.21045685f, 1.05501759f}, {77.44538116f, 46.35874939f, 1.05402660f}, {77.95220947f, 46.52447510f, 1.05305779f}, {78.46798706f, 46.70803833f, 1.05209088f}, {78.99333954f, 46.90982819f, 1.05097055f}, {79.52880859f, 47.13021851f, 1.04997373f}, {80.07523346f, 47.36978149f, 1.04901910f}, {80.63323212f, 47.62901688f, 1.04799926f}, {81.20361328f, 47.90851974f, 1.04698801f}, {81.78717041f, 48.20891953f, 1.04600537f}, {82.38488770f, 48.53097153f, 1.04503798f}, {82.99759674f, 48.87538528f, 1.04408562f}, {83.62642670f, 49.24307632f, 1.04326785f}, {84.27242279f, 49.63494492f, 1.04236519f}, {84.93683624f, 50.05198669f, 1.04146409f}, {85.62094116f, 50.49534607f, 1.04067683f}, {86.32609558f, 50.96619415f, 1.03989089f}, {87.05388641f, 51.46585846f, 1.03894126f}, {87.80595398f, 51.99581528f, 1.03853953f}, {88.58417511f, 52.55764389f, 1.03785539f}, {89.39057159f, 53.15311432f, 1.04937518f}, {90.22726440f, 53.78409958f, 1.07562327f}, {91.09671783f, 54.45272827f, 1.10406554f}, {91.50909424f, 54.77408981f, 1.11820924f}, {91.15755463f, 54.84579849f, 1.11491442f}, {90.80641174f, 54.93582916f, 1.11189532f}, {90.45541382f, 55.04442596f, 1.10909545f}, {90.10438538f, 55.17172623f, 1.10649621f}, {89.75305176f, 55.31803513f, 1.10399115f}, {89.40115356f, 55.48348618f, 1.10171950f}, {89.04853821f, 55.66846085f, 1.09959733f}, {88.69488525f, 55.87323761f, 1.09752750f}, {88.33998108f, 56.09820175f, 1.09575105f}, {87.98358154f, 56.34374619f, 1.09395862f}, {87.62543488f, 56.61031723f, 1.09223020f}, {87.26528931f, 56.89839172f, 1.09065998f}, {86.90289307f, 57.20853806f, 1.08920968f}, {86.53799438f, 57.54132462f, 1.08782125f}, {86.17025757f, 57.89738464f, 1.08645058f}, {85.79947662f, 58.27742767f, 1.08525586f}, {85.42531586f, 58.68217468f, 1.08403540f}, {85.04747772f, 59.11247635f, 1.08296037f}, {84.66567993f, 59.56919479f, 1.08185911f}, {84.27957153f, 60.05326462f, 1.08089566f}, {83.88880157f, 60.56574631f, 1.07997656f}, {83.49301910f, 61.10773087f, 1.07905197f}, {83.09188843f, 61.68046570f, 1.07824945f}, {82.68499756f, 62.28515625f, 1.07747650f}, {82.27193451f, 62.92328644f, 1.07674718f}, {81.85227966f, 63.59637833f, 1.07603300f}, {81.42556763f, 64.30606842f, 1.07544661f}, {80.99134827f, 65.05410767f, 1.07483292f}, {80.54908752f, 65.84241486f, 1.07427621f}, {80.09822083f, 66.67320251f, 1.07378328f}, {79.63825226f, 67.54862976f, 1.07329094f}, {79.16851807f, 68.47123718f, 1.07291138f}, {78.68832397f, 69.44367218f, 1.07255316f}, {78.91064453f, 67.33638763f, 1.06940293f}, {79.13185120f, 65.37575531f, 1.06656253f}, {79.35151672f, 63.54758835f, 1.06390297f}, {79.56925201f, 61.83978271f, 1.06134605f}, {79.78481293f, 60.24142838f, 1.05903411f}, {79.99800110f, 58.74303055f, 1.05684125f}, {80.20870209f, 57.33620071f, 1.05480027f}, {80.41968536f, 55.99547577f, 1.05283451f}, {80.62793732f, 54.73425674f, 1.05101097f}, {80.83345795f, 53.54628372f, 1.04930127f}, {81.03625488f, 52.42598343f, 1.04763067f}, {81.23633575f, 51.36843109f, 1.04613900f}, {81.43374634f, 50.36903381f, 1.04468477f}, {81.62854004f, 49.42378616f, 1.04333425f}, {81.82077789f, 48.52909088f, 1.04203367f}, {82.01056671f, 47.68148041f, 1.04084218f}, {82.19793701f, 46.87803268f, 1.03966641f}, {82.38299561f, 46.11598969f, 1.03855276f}, {82.56582642f, 45.39284897f, 1.03753340f}, {82.74652100f, 44.70619202f, 1.03653562f}, {82.92518616f, 44.05401230f, 1.03565109f}, {83.10186005f, 43.43438339f, 1.03473532f}, {83.27669525f, 42.84552765f, 1.03386045f}, {83.44976807f, 42.28579712f, 1.03307819f}, {83.62115479f, 41.75363922f, 1.03234255f}, {83.79096222f, 41.24773788f, 1.03160167f}, {83.95927429f, 40.76672363f, 1.03093314f}, {84.12619019f, 40.30956268f, 1.03032362f}, {84.29178619f, 39.87495804f, 1.02966964f}, {84.45616913f, 39.46216965f, 1.02912629f}, {84.61940765f, 39.07006073f, 1.02858365f}, {84.78160858f, 38.69771576f, 1.02803504f}, {84.94284821f, 38.34444427f, 1.02751923f}, {85.10321045f, 38.00952911f, 1.02713263f}, {85.26278687f, 37.69220352f, 1.02670145f}, {85.42166901f, 37.39175415f, 1.02628350f}, {85.57991028f, 37.10775375f, 1.02586579f}, {85.73762512f, 36.83951569f, 1.02555764f}, {85.89489746f, 36.58654404f, 1.02519178f}, {86.05178833f, 36.34834290f, 1.02494168f}, {86.20838165f, 36.12459564f, 1.02462113f}, {86.36479187f, 35.91475677f, 1.02444816f}, {86.52105713f, 35.71851349f, 1.02414727f}, {86.67729950f, 35.53543091f, 1.02401924f}, {86.83357239f, 35.36541748f, 1.02379525f}, {86.98997498f, 35.20795441f, 1.02371204f}, {87.14658356f, 35.06276703f, 1.02353942f}, {87.30349731f, 34.92974091f, 1.02345634f}, {87.46079254f, 34.80853653f, 1.02342427f}, {87.61854553f, 34.69907379f, 1.02330923f}, {87.77687836f, 34.60114670f, 1.02331555f}, {87.93585205f, 34.51448441f, 1.02336681f}, {88.07939148f, 34.44617844f, 1.02349460f}, {88.22360229f, 34.38688660f, 1.02355218f}, {88.36853790f, 34.33641434f, 1.02353942f}, {88.51428986f, 34.29471588f, 1.02367365f}, {87.93281555f, 34.01280975f, 1.00960684f}, {87.36203766f, 33.74588013f, 1.00981843f}, {86.80136108f, 33.49336624f, 1.01006114f}, {86.25015259f, 33.25495148f, 1.01030409f}, {85.70786285f, 33.02989197f, 1.01050961f}, {85.17391968f, 32.81808090f, 1.01076519f}, {84.64785004f, 32.61909485f, 1.01099598f}, {84.12912750f, 32.43237305f, 1.01120198f}, {83.61731720f, 32.25772095f, 1.01145792f}, {83.11193848f, 32.09484100f, 1.01166403f}, {82.61258698f, 31.94341660f, 1.01188898f}, {82.11888123f, 31.80317307f, 1.01212025f}, {81.63033295f, 31.67398262f, 1.01232660f}, {81.14665985f, 31.55552292f, 1.01254547f}, {80.66749573f, 31.44754601f, 1.01275837f}, {80.19245148f, 31.35003471f, 1.01298380f}, {79.72119904f, 31.26269531f, 1.01320934f}, {79.25336456f, 31.18544769f, 1.01340353f}, {78.78870392f, 31.11817551f, 1.01362932f}, {78.32681274f, 31.06073952f, 1.01383626f}, {77.86752319f, 31.01308060f, 1.01406217f}, {77.41037750f, 30.97510719f, 1.01428199f}, {76.95518494f, 30.94673920f, 1.01450169f}, {76.50165558f, 30.92794991f, 1.01470912f}, {76.04946136f, 30.91863060f, 1.01491010f}, {75.59832001f, 30.91897392f, 1.01513660f}, {75.14803314f, 30.92871094f, 1.01534414f}, {74.69824219f, 30.94804955f, 1.01555181f}, {74.24865723f, 30.97691917f, 1.01578486f}, {73.79907990f, 31.01538658f, 1.01599276f}, {73.34920502f, 31.06347847f, 1.01621330f}, {72.89872742f, 31.12138176f, 1.01642132f}, {72.44743347f, 31.18901825f, 1.01665473f}, {71.99500275f, 31.26659203f, 1.01686287f}, {71.54117584f, 31.35422707f, 1.01709008f}, {71.08568573f, 31.45198822f, 1.01731110f}, {70.62818909f, 31.56008911f, 1.01753223f}, {70.16844940f, 31.67871094f, 1.01777244f}, {69.70616150f, 31.80795670f, 1.01799381f}, {69.24103546f, 31.94805336f, 1.01821530f}, {68.77269745f, 32.09934998f, 1.01846206f}, {68.30097198f, 32.26188660f, 1.01869631f}, {67.82536316f, 32.43611908f, 1.01893067f}, {67.34564972f, 32.62220001f, 1.01917791f}, {66.86149597f, 32.82050323f, 1.01941895f}, {66.37252808f, 33.03131104f, 1.01966631f}, {65.87825775f, 33.25515366f, 1.01992667f}, {65.37852478f, 33.49221420f, 1.02016795f}, {64.87275696f, 33.74304199f, 1.02042842f}, {64.36067963f, 34.00798798f, 1.02069545f}, {63.84177399f, 34.28767014f, 1.02096260f}, {63.31564331f, 34.58248138f, 1.02124894f}, {62.78178024f, 34.89307022f, 1.02151012f}, {62.23980331f, 35.21992493f, 1.02180314f}, {61.68907928f, 35.56384277f, 1.02207088f}, {61.12919617f, 35.92535400f, 1.02237689f}, {60.55952454f, 36.30529022f, 1.02267051f}, {59.97952652f, 36.70438004f, 1.02298975f}, {59.38854980f, 37.12353134f, 1.02330279f}, {58.78590775f, 37.56368256f, 1.02362883f}, {58.17111588f, 38.02562714f, 1.02396166f}, {57.54324341f, 38.51061249f, 1.02428806f}, {56.90166473f, 39.01961136f, 1.02464044f}, {56.24557877f, 39.55390167f, 1.02500570f}, {55.57409668f, 40.11477661f, 1.02537787f}, {54.88632202f, 40.70361710f, 1.02575660f}, {54.18141937f, 41.32187653f, 1.02614856f}, {53.45839310f, 41.97113800f, 1.02655351f}, {52.71614075f, 42.65318298f, 1.02696526f}, {51.95364380f, 43.36979675f, 1.02740324f}, {51.16970062f, 44.12302399f, 1.02784801f}, {50.36314774f, 44.91493225f, 1.02830601f}, {49.53921509f, 45.74124908f, 1.02878380f}, {48.69045258f, 46.61035919f, 1.02928793f}, {47.81560898f, 47.52472687f, 1.02979255f}, {46.91327286f, 48.48711395f, 1.03034306f}, {45.98208618f, 49.50037003f, 1.03090715f}, {45.02064896f, 50.56753540f, 1.03148472f}, {44.02751160f, 51.69189072f, 1.03209555f}, {43.00127411f, 52.87684250f, 1.03273308f}, {43.27404022f, 52.72061539f, 1.03264844f}, {43.54720306f, 52.57915115f, 1.03257692f}, {43.82089996f, 52.45228577f, 1.03249228f}, {44.09526825f, 52.33982086f, 1.03242064f}, {44.37042999f, 52.24163818f, 1.03234255f}, {44.64651871f, 52.15760422f, 1.03225803f}, {44.92372131f, 52.08758163f, 1.03218007f}, {45.20211029f, 52.03151321f, 1.03210843f}, {45.48184204f, 51.98927689f, 1.03202403f}, {45.76308441f, 51.96086884f, 1.03195238f}, {46.04596329f, 51.94620132f, 1.03186798f}, {46.33063889f, 51.94527435f, 1.03178346f}, {46.61724854f, 51.95808029f, 1.03171206f}, {46.90597916f, 51.98459625f, 1.03163409f}, {47.19696426f, 52.02487183f, 1.03155625f}, {47.49038315f, 52.07894897f, 1.03147817f}, {47.78639984f, 52.14686203f, 1.03138077f}, {48.08515549f, 52.22871399f, 1.03130281f}, {48.38689423f, 52.32456970f, 1.03123152f}, {48.69175720f, 52.43457413f, 1.03114712f}, {48.99994278f, 52.55881119f, 1.03106940f}, {49.31167221f, 52.69744110f, 1.03097844f}, {49.62712097f, 52.85061646f, 1.03090072f}, {49.94652557f, 53.01853943f, 1.03081632f}, {50.27006912f, 53.20137787f, 1.03072548f}, {50.59801865f, 53.39935684f, 1.03063476f}, {50.93061447f, 53.61274338f, 1.03055048f}, {51.26805878f, 53.84176636f, 1.03045976f}, {51.61070251f, 54.08673096f, 1.03036904f}, {51.95871735f, 54.34788895f, 1.03028476f}, {52.31244659f, 54.62563705f, 1.03018749f}, {52.67217255f, 54.92024994f, 1.03008389f}, {53.03821564f, 55.23216629f, 1.02999973f}, {53.41087723f, 55.56173325f, 1.02988970f}, {53.79050446f, 55.90937805f, 1.02979898f}, {54.17745590f, 56.27557755f, 1.02969551f}, {54.57213593f, 56.66085052f, 1.02959836f}, {54.97491837f, 57.06565094f, 1.02948833f}, {55.38620377f, 57.49051285f, 1.02938497f}, {55.80643845f, 57.93600464f, 1.02927506f}, {56.23610687f, 58.40285492f, 1.02917159f}, {56.67570114f, 58.89165115f, 1.02905524f}, {57.12569809f, 59.40300751f, 1.02893889f}, {57.58666992f, 59.93771362f, 1.02882254f}, {58.05916595f, 60.49656296f, 1.02869987f}, {58.54383087f, 61.08037567f, 1.02857721f}, {59.04130173f, 61.69001007f, 1.02844167f}, {59.55223846f, 62.32640076f, 1.02832544f}, {60.07740021f, 62.99047470f, 1.02819622f}, {60.61753464f, 63.68334961f, 1.02804792f}, {61.17348099f, 64.40604401f, 1.02791250f}, {61.74607086f, 65.15968323f, 1.03032362f}, {62.33627319f, 65.94569397f, 1.04231882f}, {62.94504929f, 66.76514435f, 1.05432510f}, {63.57348633f, 67.61959076f, 1.06647217f}, {64.22264862f, 68.51039886f, 1.07858312f}, {64.89376068f, 69.43911743f, 1.09084129f}, {64.38577271f, 69.30471039f, 1.09221578f}, {63.88869476f, 69.18841553f, 1.09354973f}, {63.40216446f, 69.08968353f, 1.09488714f}, {62.92582703f, 69.00807953f, 1.09630108f}, {62.45933914f, 68.94309235f, 1.09764528f}, {62.00241852f, 68.89417267f, 1.09900737f}, {61.55481339f, 68.86096191f, 1.10035062f}, {61.11620712f, 68.84279633f, 1.10168242f}, {60.68645859f, 68.83940887f, 1.10305452f}, {60.25947952f, 68.85059357f, 1.10438538f}, {59.84119034f, 68.87585449f, 1.10571957f}, {59.43142700f, 68.91495514f, 1.10701954f}, {59.03003693f, 68.96732330f, 1.10834503f}, {58.63690948f, 69.03246307f, 1.10967386f}, {58.25193024f, 69.11003113f, 1.11098313f}, {57.87503052f, 69.19944000f, 1.11228037f}, {57.50611496f, 69.30029297f, 1.11354280f}, {57.14511871f, 69.41207123f, 1.11479294f}, {56.79205704f, 69.53435516f, 1.11606872f}, {56.44685745f, 69.66664124f, 1.11730182f}, {56.10953140f, 69.80850983f, 1.11855268f}, {55.78003693f, 69.95938873f, 1.11977577f}, {55.45840836f, 70.11888123f, 1.12094796f}, {55.14463043f, 70.28652191f, 1.12216103f}, {54.83875275f, 70.46180725f, 1.12333059f}, {54.54076385f, 70.64421082f, 1.12447917f}, {54.25070953f, 70.83341980f, 1.12561488f}};

// Extra functions not from OCIO

typedef struct
{
    float3 x;
    float3 y;
    float3 z;
} float3x3;

__DEVICE__ inline float3 vecmul( float3x3 m, float3 v)
{
    float3 r;

    r.x = m.x.x * v.x + m.y.x * v.y + m.z.x * v.z;
    r.y = m.x.y * v.x + m.y.y * v.y + m.z.y * v.z;
    r.z = m.x.z * v.x + m.y.z * v.y + m.z.z * v.z;
    
    return r;
}

__DEVICE__ inline float vecdot( float3 a, float3 b)
{   
    return a.x*b.x + a.y*b.y + a.z*b.z;
}

__DEVICE__ inline float3 maxf3(float3 a, float b)
{
    float3 c;

    c.x = _fmaxf(a.x, b);
    c.y = _fmaxf(a.y, b);
    c.z = _fmaxf(a.z, b);

    return c;
}

__DEVICE__ inline float3 minf3(float3 a, float b)
{
    float3 c;

    c.x = _fminf(a.x, b);
    c.y = _fminf(a.y, b);
    c.z = _fminf(a.z, b);

    return c;
}

__DEVICE__ inline float3 powf3(float3 a, float b)
{
    a.x = _powf(a.x, b);
    a.y = _powf(a.y, b);
    a.z = _powf(a.z, b);

    return a;
}

__DEVICE__ inline float3 absf3(float3 a)
{
    a.x = _fabs(a.x);
    a.y = _fabs(a.y);
    a.z = _fabs(a.z);

    return a;
}

__DEVICE__ inline float3 signf3(float3 a)
{
    a.x = _copysignf(1.0f, a.x);
    a.y = _copysignf(1.0f, a.y);
    a.z = _copysignf(1.0f, a.z);

    return a;
}

// OCIO functions

__DEVICE__ float ocio_reach_m_table_0_sample(float h)
{
  int i_base = (int)_floorf(h);
  int i_lo = i_base + 1;
  int i_hi = i_lo + 1;
  float lo = ocio_reach_m_table_0[i_lo];
  float hi = ocio_reach_m_table_0[i_hi];
  float t = h - i_base;
  return _mix(lo, hi, t);
}

__DEVICE__ float ocio_tonescale_inv0(float J)
{
  float A = 0.0323680267f * _powf(_fabs(J) * 0.00999999978f, 0.879464149f);
  float Y = _powf(( 27.1299992f * A) / (1.0f - A), 2.3809523809523809f);
  float Y_i = Y / 0.79370057210326195f;
  float Z = _fmaxf(0.0f, _fminf(1.00826871f, Y_i));
  float ht = 0.5f * (Z + _sqrtf(Z * (0.15999999642372131f + Z)));
  float Yo = 0.73009213709383403f / (_powf((1.04710376f / ht), (0.86956523541917463f)) - 1.0f);
  float F_L_Y = _powf(_fabs(Yo), 0.42f);
  float J_ts = 100.f * _powf((F_L_Y / ( 27.1299992f + F_L_Y)) * 30.8946857f, 1.13705599f);
  return J_ts;
}

__DEVICE__ float3 ocio_gamut_cusp_table_0_sample(float h)
{
  int i = int(h) + 1;
  int i_lo = int(max(float(0), float(i + 0)));
  int i_hi = int(min(float(361), float(i + 2)));
  while (i_lo + 1 < i_hi)
  {
    float hcur = ocio_gamut_cusp_table_0_hues_array[i];
    if (h > hcur)
    {
      i_lo = i;
    }
    else
    {
      i_hi = i;
    }
    i = (i_lo + i_hi) / 2;
  }
  float3 lo = ocio_gamut_cusp_table_0[i_hi - 1];
  float3 hi = ocio_gamut_cusp_table_0[i_hi];
  float t = (h - ocio_gamut_cusp_table_0_hues_array[i_hi - 1]) / (ocio_gamut_cusp_table_0_hues_array[i_hi] - ocio_gamut_cusp_table_0_hues_array[i_hi - 1]);
  return _mix(lo, hi, t);
}

__DEVICE__ float ocio_get_focus_gain0(float J, float cuspJ)
{
  float thr = _mix(cuspJ, 100.000000f, 0.300000f);
  if (J > thr)
  {
    float gain = ( 100.f - thr) / max(0.0001f, 100.f - J);
    gain = _logf(gain)/_logf(10.0f);
    return gain * gain + 1.0f;
  }
  else
  {
    return 1.0f;
  }
}

__DEVICE__ float ocio_solve_J_intersect0(float J, float M, float focusJ, float slope_gain)
{
  float M_scaled = M / slope_gain;
  float a = M_scaled / focusJ;
  if (J < focusJ)
  {
    float b = 1.0f - M_scaled;
    float c = -J;
    float det =  b * b - 4.f * a * c;
    float root =  _sqrtf(det);
    return -2.0f * c / (b + root);
  }
  else
  {
    float b = - (1.0f + M_scaled + 100.f * a);
    float c = 100.f * M_scaled + J;
    float det =  b * b - 4.f * a * c;
    float root =  _sqrtf(det);
    return -2.0f * c / (b - root);
  }
}

__DEVICE__ float ocio_find_gamut_boundary_intersection0(float2 JM_cusp, float gamma_top_inv, float gamma_bottom_inv, float J_intersect_source, float J_intersect_cusp, float slope)
{
  float M_boundary_lower = J_intersect_cusp * _powf(J_intersect_source / J_intersect_cusp, gamma_bottom_inv) / (JM_cusp.x / JM_cusp.y - slope);
  float M_boundary_upper = JM_cusp.y * (100.f - J_intersect_cusp) * _powf((100.f - J_intersect_source) / (100.f - J_intersect_cusp), gamma_top_inv) / (slope * JM_cusp.y + 100.f - JM_cusp.x);
  float smin = 0.0f;
  {
    float a = M_boundary_lower;
    float b = M_boundary_upper;
    float s = 0.119999997f * JM_cusp.y;
    float h = max(s - _fabs(a - b), 0.0f) / s;
    smin = min(a, b) - h * h * h * s * 0.16666666666666666f;
  }
  return smin;
}

__DEVICE__ float ocio_remap_M_inv0(float M, float gamut_boundary_M, float reach_boundary_M)
{
  float boundary_ratio = gamut_boundary_M / reach_boundary_M;
  float proportion = max(boundary_ratio, 0.75f);
  float threshold = proportion * gamut_boundary_M;
  if (proportion >= 1.0f || M <= threshold)
  {
    return M;
  }
  float m_offset = M - threshold;
  float gamut_offset = gamut_boundary_M - threshold;
  float reach_offset = reach_boundary_M - threshold;
  float scale = reach_offset / ((reach_offset / gamut_offset) - 1.0f);
  float nd = m_offset / scale;
  if (nd >= 1.0f)
  {
    return threshold + scale;
  }
  else
  {
    return threshold + scale * -(nd / (nd - 1.0f));
  }
}

__DEVICE__ float3 ocio_gamut_compress0(float3 JMh, float Jx, float3 JMGcusp, float reachMaxM)
{
  float J = JMh.x;
  float M = JMh.y;
  float h = JMh.z;
  if (M <= 0.0f || J > 100.f)
  {
    return make_float3(J, 0.0f, h);
  }
  else
  {
    float2 JMcusp;
	  JMcusp.x = JMGcusp.x;
	  JMcusp.y = JMGcusp.y;
    float focusJ = _mix(JMcusp.x, 34.096539f, min(1.0f, 1.300000f - (JMcusp.x / 100.000000f)));
    float slope_gain = 135.f * ocio_get_focus_gain0(Jx, JMcusp.x);
    float J_intersect_source = ocio_solve_J_intersect0(JMh.x, JMh.y, focusJ, slope_gain);
    float gamut_slope = (J_intersect_source < focusJ) ? J_intersect_source : (100.f - J_intersect_source);
    gamut_slope = gamut_slope * (J_intersect_source - focusJ) / (focusJ * slope_gain);
    float gamma_top_inv = JMGcusp.z;
    float gamma_bottom_inv = 0.877192974f;
    float J_intersect_cusp = ocio_solve_J_intersect0(JMcusp.x, JMcusp.y, focusJ, slope_gain);
    float gamutBoundaryM = ocio_find_gamut_boundary_intersection0(JMcusp, gamma_top_inv, gamma_bottom_inv, J_intersect_source, J_intersect_cusp, gamut_slope);
    if (gamutBoundaryM <= 0.0f)
    {
      return make_float3(J, 0.0f, h);
    }
    float reachBoundaryM = 100.f * _powf(J_intersect_source / 100.f,  0.879464149f);
    reachBoundaryM = reachBoundaryM / ((100.f / reachMaxM) - gamut_slope);
    float remapped_M = ocio_remap_M_inv0(M, gamutBoundaryM, reachBoundaryM);
    float remapped_J = J_intersect_source + remapped_M * gamut_slope;
    return make_float3(remapped_J, remapped_M, h);
  }
}

__DEVICE__ float ocio_toe_inv0(float x, float limit, float k1_in, float k2_in)
{
  float k2 = _fmaxf(k2_in, 0.001f);
  float k1 = _sqrtf(k1_in * k1_in + k2 * k2);
  float k3 = (limit + k1) / (limit + k2);
  return (x > limit) ? x : (x * x + k1 * x) / (k3 * (x + k2));
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
{
  float3 inPixel = make_float3(p_R, p_G, p_B);
  float3 outColor = inPixel;

  // Add Range processing
  
  {
    outColor = maxf3(outColor, 0.f);
    outColor = minf3(outColor, 1.f);
  }

  // Add Gamma 'basicFwd' processing
  
  {
    outColor = powf3(outColor, 2.4f );
  }
  
  // Add FixedFunction 'ACES_OutputTransform20 (Inverse)' processing
  
  {
    
    // Add RGB to JMh

    float3 Aab;
    {
      {
        float3 lms = vecmul({{0.223405808f, 0.108193472f, 0.020469198f}, {0.451332718f, 0.547473967f, 0.10818094f}, {0.118962049f, 0.138033181f, 0.665050387f}}, outColor);
        float3 F_L_v = powf3(absf3(lms), 0.419999987f);
        float3 rgb_a = (signf3(lms) * F_L_v) / ( 27.1299992f + F_L_v);
        Aab = vecmul({{20.25881f, 15480.f, 1720.f}, {10.129405f, -16887.2734f, 1720.f}, {0.506470263f, 1407.27271f, -3440.f}}, rgb_a);
      }
      {
        float J = 100.f * _powf(Aab.x, 1.13705599f);
        float M = (J == 0.0f) ? 0.0f : _sqrtf(Aab.y * Aab.y + Aab.z * Aab.z);
        float h = (Aab.y == 0.0f) ? 0.0f : _atan2f(Aab.z, Aab.y) * 57.29577951308238f;
        h = h - _floorf(h / 360.0f) * 360.0f;
        h = (h < 0.0f) ? h + 360.0f : h;
        outColor = make_float3(J, M, h);
      }
    }
    float h_rad = outColor.z * 0.0174532924f;
    float cos_hr = _cosf(h_rad);
    float sin_hr = _sinf(h_rad);
    float reachMaxM = ocio_reach_m_table_0_sample(outColor.z);
    
    // Add GamutCompress (inv)
    
    {
      float3 JMGcusp = ocio_gamut_cusp_table_0_sample(outColor.z);
      float Jx = outColor.x;
      float3 unCompressedJMh;
      if (Jx <= _mix(JMGcusp.x, 100.0f, 0.3f))
      {
        unCompressedJMh = ocio_gamut_compress0(outColor, Jx, JMGcusp, reachMaxM);
      }
      else
      {
        Jx = ocio_gamut_compress0(outColor, Jx, JMGcusp, reachMaxM).x;
        unCompressedJMh = ocio_gamut_compress0(outColor, Jx, JMGcusp, reachMaxM);
      }
      outColor = unCompressedJMh;
    }
    
    // Add ToneScale and ChromaCompress (inv)
    
    float J = ocio_tonescale_inv0(outColor.x);
    {
      float J_ts = outColor.x;
      float M_cp = outColor.y;
      float h = outColor.z;
      float M = M_cp;
      if (M_cp != 0.0f)
      {
        float nJ = J_ts / 100.f;
        float snJ = max(0.0f, 1.0f - nJ);
        float Mnorm;
        {
          float cos_hr2 = 2.0f * cos_hr * cos_hr - 1.0f;
          float sin_hr2 = 2.0f * cos_hr * sin_hr;
          float cos_hr3 = 4.0f * cos_hr * cos_hr * cos_hr - 3.0f * cos_hr;
          float sin_hr3 = 3.0f * sin_hr - 4.0f * sin_hr * sin_hr * sin_hr;
          float3 cosines = make_float3(cos_hr, cos_hr2, cos_hr3);
          float3 cosine_weights = make_float3(11.341321604032515f, 16.469863649185896f, 7.8842182208776475f);
          float3 sines = make_float3(sin_hr, sin_hr2, sin_hr3);
          float3 sine_weights = make_float3(14.665187919584513f, -6.3725780354404442f, 9.1941277054452897f);
          Mnorm = vecdot(cosines, cosine_weights) + vecdot(sines, sine_weights) + 77.133051547393805f;
        }
        float limit = _powf(nJ, 0.879464149f) * reachMaxM / Mnorm;
        M = M_cp / Mnorm;
        M = ocio_toe_inv0(M, limit, nJ * 2.4000001f, snJ);
        M = limit - ocio_toe_inv0(limit - M, limit - 0.001f, snJ * 1.29999995f, _sqrtf(nJ * nJ + 0.00499999989f));
        M = M * Mnorm;
        M = M * _powf(J_ts / J, -0.879464149f);
      }
      outColor = make_float3(J, M, h);
    }
    
    // Add JMh to RGB
    
    {
      float3 JMh = outColor;
      float3 Aab;
      {
        Aab.x = _powf(JMh.x * 0.00999999978f, 0.879464149f);
        Aab.y = JMh.y * cos_hr;
        Aab.z = JMh.y * sin_hr;
      }
      {
        float3 rgb_a = vecmul({{0.0323680267f, 0.0323680267f, 0.0323680267f}, {2.07657631e-05f, -4.10250432e-05f, -1.01296409e-05f}, {1.3260621e-05f, -1.20174373e-05f, -0.000290076074f}}, Aab);
        float3 rgb_a_lim = minf3(absf3(rgb_a), 0.99f);
        float3 lms = signf3(rgb_a) * powf3( 27.1299992f * rgb_a_lim / (1.0f - rgb_a_lim), 2.38095236f);
        outColor = vecmul({{2.66705441f, -0.535811961f, -0.0214489009f}, {-1.52505875f, 1.94158089f, -0.0485954471f}, {0.117925502f, -0.145848125f, 1.32996535f}}, lms);
      }
    }
  }
  
  // Add Matrix processing
  
  {
    outColor = vecmul({{1.4514393161456653f, -0.07655377339602043f, 0.008316148425697719f}, {-0.23651074689374019f, 1.1762296998335731f, -0.0060324497910210278f}, {-0.21492856925192524f, -0.099675926437552201f, 0.9977163013653233f}}, outColor);
  }
  
  // Add Range processing
  
  {
    outColor = maxf3(outColor, 0.f);
    outColor = minf3(outColor, 1024.f);
  }
  
  // Add Matrix processing
  
  {
    outColor = vecmul({{0.69545224135745176f, 0.044794563372037632f, -0.0055258825581135443f}, {0.14067869647029416f, 0.85967111845642163f, 0.0040252103059786586f}, {0.16386906217225403f, 0.095534318171540358f, 1.0015006722521349f}}, outColor);
  }

  return outColor;
}
