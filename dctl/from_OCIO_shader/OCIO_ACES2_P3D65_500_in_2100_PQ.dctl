// DEFINE_ACES_PARAM(IS_PARAMETRIC_ACES_TRANSFORM: 0, OUTPUT_COLORSPACE_TAG: Rec2020_1000nits_15nits_ST2084)

// Declaration of tables

__CONSTANT__ float ocio_gamut_cusp_table_0_hues_array[362] = {-1.00979614f, 0.0f, 0.982369125f, 1.96473825f, 2.94710732f, 3.9294765f, 4.91184568f, 5.89421463f, 6.87658405f, 7.858953f, 8.84132195f, 9.82369137f, 10.8060608f, 11.7884293f, 12.7707987f, 13.7531681f, 14.7355366f, 15.717906f, 16.7002754f, 17.6826439f, 18.6650143f, 19.6473827f, 20.6297512f, 21.6121216f, 22.5944901f, 23.5768585f, 24.5592289f, 25.5415974f, 26.5512657f, 27.560936f, 28.5706043f, 29.5791283f, 30.5876522f, 31.5961761f, 32.6046982f, 33.613224f, 34.6217461f, 35.6302719f, 36.6387939f, 37.647316f, 38.6558418f, 39.6643639f, 40.6728897f, 41.6814117f, 42.6899338f, 43.6984596f, 44.7069855f, 45.7155075f, 46.7240295f, 47.7325554f, 48.7410812f, 49.7496033f, 50.7581253f, 51.7666473f, 52.7751732f, 53.783699f, 54.7922211f, 55.8007431f, 56.8092651f, 57.817791f, 58.8263168f, 59.8348389f, 60.8433609f, 61.8518829f, 62.8604126f, 63.8689346f, 64.8774567f, 65.8859787f, 66.8945084f, 67.9030304f, 68.9115524f, 69.9200745f, 70.9285965f, 71.9371262f, 72.9456482f, 73.9541702f, 74.9626923f, 75.9712219f, 76.979744f, 77.988266f, 78.996788f, 80.0053101f, 81.0138397f, 82.0223618f, 83.0308838f, 84.0394058f, 85.0479279f, 86.0564575f, 87.0649796f, 88.0735016f, 89.0820236f, 90.0905533f, 91.0990753f, 92.1075974f, 93.1161194f, 94.1246414f, 95.1331635f, 96.1416931f, 97.1502151f, 98.1587372f, 99.1672592f, 100.175789f, 101.184311f, 102.192833f, 103.201355f, 104.209877f, 105.218407f, 106.226929f, 107.284889f, 108.268822f, 109.252747f, 110.236679f, 111.220604f, 112.204536f, 113.188461f, 114.172394f, 115.156319f, 116.140251f, 117.124176f, 118.108109f, 119.092033f, 120.075966f, 121.059891f, 122.043823f, 123.027748f, 124.011681f, 124.995605f, 125.979538f, 126.963463f, 127.947395f, 128.93132f, 129.915253f, 130.899185f, 131.883118f, 132.867035f, 133.850967f, 134.8349f, 135.818817f, 136.80275f, 137.786682f, 138.770615f, 139.754547f, 140.738464f, 141.722397f, 142.737793f, 143.753174f, 144.76857f, 145.783951f, 146.799347f, 147.807953f, 148.816559f, 149.82515f, 150.833755f, 151.842361f, 152.850967f, 153.859558f, 154.868164f, 155.87677f, 156.885376f, 157.893967f, 158.902573f, 159.911179f, 160.919785f, 161.928375f, 162.936981f, 163.945587f, 164.954193f, 165.962784f, 166.97139f, 167.979996f, 168.988602f, 169.997192f, 171.005798f, 172.014404f, 173.02301f, 174.031616f, 175.040207f, 176.048813f, 177.057419f, 178.06601f, 179.074615f, 180.083221f, 181.091827f, 182.100433f, 183.109024f, 184.11763f, 185.126236f, 186.134827f, 187.143433f, 188.152039f, 189.160645f, 190.16925f, 191.177841f, 192.186447f, 192.992706f, 193.798981f, 194.60524f, 195.616837f, 196.628448f, 197.640045f, 198.651642f, 199.663254f, 200.67485f, 201.686462f, 202.698059f, 203.709656f, 204.721268f, 205.732864f, 206.744476f, 207.756073f, 208.76767f, 209.779282f, 210.790878f, 211.802475f, 212.814087f, 213.825684f, 214.83728f, 215.848892f, 216.860489f, 217.872101f, 218.883698f, 219.895294f, 220.906906f, 221.918503f, 222.930115f, 223.941711f, 224.953308f, 225.96492f, 226.976517f, 227.988129f, 228.999725f, 230.011322f, 231.022919f, 232.034531f, 233.046127f, 234.057739f, 235.069336f, 236.080933f, 237.092545f, 238.104141f, 239.115753f, 240.12735f, 241.138947f, 242.150543f, 243.162155f, 244.173767f, 245.185364f, 246.19696f, 247.208557f, 248.220169f, 249.231766f, 250.243378f, 251.254974f, 252.266571f, 253.278183f, 254.28978f, 255.301392f, 256.312988f, 257.324585f, 258.336182f, 259.347778f, 260.359406f, 261.371002f, 262.382599f, 263.394196f, 264.405823f, 265.417419f, 266.429016f, 267.440613f, 268.391968f, 269.343323f, 270.294708f, 271.246063f, 272.197418f, 273.148773f, 274.100159f, 275.051514f, 276.002869f, 277.005585f, 278.008301f, 279.011017f, 280.013702f, 281.016418f, 282.019135f, 283.021851f, 284.024567f, 285.027283f, 286.029968f, 287.032684f, 288.0354f, 289.038116f, 290.040833f, 291.043549f, 292.046265f, 293.04895f, 294.051666f, 295.054382f, 296.057098f, 297.059814f, 298.062531f, 299.065247f, 300.067932f, 301.070648f, 302.073364f, 303.07608f, 304.078796f, 305.081512f, 306.084229f, 307.086914f, 308.08963f, 309.092346f, 310.095062f, 311.097778f, 312.100494f, 313.10321f, 314.105896f, 315.108612f, 316.111328f, 317.114044f, 318.11676f, 319.119476f, 320.122192f, 321.124878f, 322.127594f, 323.13031f, 324.133026f, 325.135742f, 326.138458f, 327.141144f, 328.14386f, 329.146576f, 330.149292f, 331.152008f, 332.154724f, 333.15741f, 334.160126f, 335.162842f, 336.165558f, 337.108551f, 338.051575f, 338.994568f, 339.937561f, 340.880585f, 341.823578f, 342.833374f, 343.84317f, 344.852966f, 345.862793f, 346.872589f, 347.882385f, 348.892181f, 349.901978f, 350.911804f, 351.9216f, 352.931396f, 353.941193f, 354.950989f, 355.960785f, 356.970612f, 357.980408f, 358.990204f, 360.0f};

__CONSTANT__ float  ocio_reach_m_table_0[362] = {306.44531250f, 309.64965820f, 312.79296875f, 315.87524414f, 318.88427734f, 321.80786133f, 324.64599609f, 327.38037109f, 330.01708984f, 332.53784180f, 334.95483398f, 337.25585938f, 339.44702148f, 341.52221680f, 343.49365234f, 345.35522461f, 347.11303711f, 348.77929688f, 350.36010742f, 351.85546875f, 353.27148438f, 354.62646484f, 355.92041016f, 357.16552734f, 358.36791992f, 359.54589844f, 360.69335938f, 355.10253906f, 342.34619141f, 330.58471680f, 319.70214844f, 309.60693359f, 300.22583008f, 291.47949219f, 283.31909180f, 275.68969727f, 268.53637695f, 261.82861328f, 255.51757812f, 249.58496094f, 243.99414062f, 238.72070312f, 233.74023438f, 229.02832031f, 224.57885742f, 220.35522461f, 216.35742188f, 212.56713867f, 208.97216797f, 205.55419922f, 202.30712891f, 199.22485352f, 196.28906250f, 193.49975586f, 190.85083008f, 188.32397461f, 185.91918945f, 183.63037109f, 181.45751953f, 179.38232422f, 177.41088867f, 175.53710938f, 173.75488281f, 172.05810547f, 170.44677734f, 168.91479492f, 167.46215820f, 166.08276367f, 164.77661133f, 163.54370117f, 162.37792969f, 161.27319336f, 160.23559570f, 159.25292969f, 158.33740234f, 157.47680664f, 156.67724609f, 155.92651367f, 155.23681641f, 154.59594727f, 154.00390625f, 153.46679688f, 152.98461914f, 152.54516602f, 152.15454102f, 151.81884766f, 151.52587891f, 151.27563477f, 151.08032227f, 150.92773438f, 150.81787109f, 150.75683594f, 150.74462891f, 150.77514648f, 150.85449219f, 150.97656250f, 151.14746094f, 151.36718750f, 151.62963867f, 151.94091797f, 152.30102539f, 152.70385742f, 153.16162109f, 153.66821289f, 154.22363281f, 154.83398438f, 155.49316406f, 156.20727539f, 156.97631836f, 157.80029297f, 158.67919922f, 159.61914062f, 160.62011719f, 161.68212891f, 162.81127930f, 164.00756836f, 165.26489258f, 166.60156250f, 168.00537109f, 169.48852539f, 171.04492188f, 172.69287109f, 174.42016602f, 176.23901367f, 178.14941406f, 180.15747070f, 182.26318359f, 184.48486328f, 186.81030273f, 189.25781250f, 191.83349609f, 194.53735352f, 197.37548828f, 200.36010742f, 203.50341797f, 206.81152344f, 210.29052734f, 213.95874023f, 217.82226562f, 221.89941406f, 226.19628906f, 230.73730469f, 235.54077148f, 240.62500000f, 246.00219727f, 251.70898438f, 257.76977539f, 264.20898438f, 268.20068359f, 261.22436523f, 254.63867188f, 248.41308594f, 242.51708984f, 236.93847656f, 231.64672852f, 226.62963867f, 221.86279297f, 217.33398438f, 213.03100586f, 208.92944336f, 205.02929688f, 201.31835938f, 197.77221680f, 194.39697266f, 191.17431641f, 188.10424805f, 185.16845703f, 182.36694336f, 179.68750000f, 177.13623047f, 174.68872070f, 172.35717773f, 170.12329102f, 167.98706055f, 165.94848633f, 164.00146484f, 162.13989258f, 160.35766602f, 158.65478516f, 157.03125000f, 155.48095703f, 153.99780273f, 152.58178711f, 151.23291016f, 149.95117188f, 148.72436523f, 147.55859375f, 146.44775391f, 145.39794922f, 144.39697266f, 143.45092773f, 142.55371094f, 141.71142578f, 140.91186523f, 140.16113281f, 139.45312500f, 138.79394531f, 138.17749023f, 137.60375977f, 137.07275391f, 136.57836914f, 136.13281250f, 135.72387695f, 135.35156250f, 135.02197266f, 134.72900391f, 134.47875977f, 134.26513672f, 134.08813477f, 133.94775391f, 133.84399414f, 133.77685547f, 133.74633789f, 133.75854492f, 133.80126953f, 133.88671875f, 134.00268555f, 134.16137695f, 134.35668945f, 134.58862305f, 134.85717773f, 135.16235352f, 135.51025391f, 135.89477539f, 136.32202148f, 136.78588867f, 137.29248047f, 137.84179688f, 138.43383789f, 139.06250000f, 139.73999023f, 140.46020508f, 141.22924805f, 142.04101562f, 142.90161133f, 143.81103516f, 144.76928711f, 145.78247070f, 146.84448242f, 147.96752930f, 149.13940430f, 150.37231445f, 151.66625977f, 153.02124023f, 154.43725586f, 155.92651367f, 157.47680664f, 159.10034180f, 160.79711914f, 162.57324219f, 164.42871094f, 166.36352539f, 168.38989258f, 170.50170898f, 172.70507812f, 175.00610352f, 177.41088867f, 179.91943359f, 182.54394531f, 185.28442383f, 188.14086914f, 191.12548828f, 194.24438477f, 197.50366211f, 200.90942383f, 204.46777344f, 208.19091797f, 212.08496094f, 216.14990234f, 216.99829102f, 215.27099609f, 213.62304688f, 212.06054688f, 210.57128906f, 209.16137695f, 207.82470703f, 206.56127930f, 205.36499023f, 204.23583984f, 203.17382812f, 202.17895508f, 201.24511719f, 200.37231445f, 199.56054688f, 198.80371094f, 198.11401367f, 197.47314453f, 196.89331055f, 196.36840820f, 195.89843750f, 195.48339844f, 195.12329102f, 194.81201172f, 194.55566406f, 194.34814453f, 194.19555664f, 194.09179688f, 194.04296875f, 194.04296875f, 194.09179688f, 194.19555664f, 194.34204102f, 194.54345703f, 194.79980469f, 195.10498047f, 195.45898438f, 195.86181641f, 196.31958008f, 196.83227539f, 197.39379883f, 198.00415039f, 198.67553711f, 199.39575195f, 200.17089844f, 201.00097656f, 201.88598633f, 202.82592773f, 203.82690430f, 204.88281250f, 205.99365234f, 207.17163086f, 208.40454102f, 209.69848633f, 211.05346680f, 212.47558594f, 213.95874023f, 215.50903320f, 217.12036133f, 218.80493164f, 220.55053711f, 222.36938477f, 224.25537109f, 226.21459961f, 228.24096680f, 230.34667969f, 232.51953125f, 234.76562500f, 237.08496094f, 239.47753906f, 241.94335938f, 244.48242188f, 247.09472656f, 249.78027344f, 252.53295898f, 255.35278320f, 258.24584961f, 261.19384766f, 264.20898438f, 267.28515625f, 270.41015625f, 273.58398438f, 276.80053711f, 280.05371094f, 283.33740234f, 286.63940430f, 289.95971680f, 293.28613281f, 296.60644531f, 299.91455078f, 303.19824219f, 306.44531250f, 309.64965820f};

__CONSTANT__ float3  ocio_gamut_cusp_table_0[362] = {{120.71044159f, 161.00343323f, 1.11712658f}, {119.98513031f, 161.66816711f, 1.11841536f}, {119.30068970f, 162.31822205f, 1.11964583f}, {118.63739777f, 162.96992493f, 1.12085605f}, {117.99552155f, 163.62191772f, 1.12203813f}, {117.37522888f, 164.27249146f, 1.12321508f}, {116.77676392f, 164.92024231f, 1.12437117f}, {116.20018768f, 165.56399536f, 1.12549126f}, {115.64562225f, 166.20263672f, 1.12659788f}, {115.11312866f, 166.83531189f, 1.12768340f}, {114.60270691f, 167.46121216f, 1.12873232f}, {114.11421204f, 168.07957458f, 1.12972844f}, {113.64760590f, 168.69026184f, 1.13074207f}, {113.20268250f, 169.29293823f, 1.13171065f}, {112.77919006f, 169.88783264f, 1.13263381f}, {112.37683105f, 170.47488403f, 1.13355052f}, {111.99529266f, 171.05477905f, 1.13439822f}, {111.63414764f, 171.62794495f, 1.13523924f}, {111.29299164f, 172.19541931f, 1.13606572f}, {110.97134399f, 172.75807190f, 1.13683033f}, {110.66867065f, 173.31710815f, 1.13758028f}, {110.38447571f, 173.87373352f, 1.13833904f}, {110.11814117f, 174.42951965f, 1.13901961f}, {109.86908722f, 174.98597717f, 1.13968515f}, {109.63673401f, 175.54487610f, 1.14031971f}, {109.42044067f, 176.10792542f, 1.14093113f}, {109.21958923f, 176.67718506f, 1.14151144f}, {109.03354645f, 177.25444031f, 1.14205253f}, {108.85705566f, 177.85829163f, 1.14261806f}, {108.69483948f, 178.47509766f, 1.14315212f}, {108.54619598f, 179.10736084f, 1.14367080f}, {109.88816833f, 174.49238586f, 1.14056587f}, {111.18587494f, 170.21060181f, 1.13769090f}, {112.44335175f, 166.22691345f, 1.13494039f}, {113.66415405f, 162.51155090f, 1.13234401f}, {114.85124969f, 159.03935242f, 1.12989998f}, {116.00735474f, 155.78826904f, 1.12755930f}, {117.13494873f, 152.73933411f, 1.12531340f}, {118.23612213f, 149.87590027f, 1.12319195f}, {119.31282043f, 147.18325806f, 1.12115514f}, {120.36692047f, 144.64849854f, 1.11914873f}, {121.39994812f, 142.25996399f, 1.11729419f}, {122.41349030f, 140.00741577f, 1.11547601f}, {123.40888977f, 137.88165283f, 1.11373961f}, {124.38748169f, 135.87429810f, 1.11203885f}, {125.35044861f, 133.97789001f, 1.11041844f}, {126.29895020f, 132.18568420f, 1.10884011f}, {127.23397064f, 130.49159241f, 1.10728884f}, {128.15658569f, 128.88990784f, 1.10580170f}, {129.06771851f, 127.37570190f, 1.10436320f}, {129.96824646f, 125.94418335f, 1.10294306f}, {130.85902405f, 124.59138489f, 1.10156393f}, {131.74087524f, 123.31325531f, 1.10029149f}, {132.61459351f, 122.10617065f, 1.09897792f}, {133.48091125f, 120.96714020f, 1.09771144f}, {134.34059143f, 119.89295197f, 1.09647715f}, {135.19422913f, 118.88105774f, 1.09526050f}, {136.04252625f, 117.92885590f, 1.09407556f}, {136.88623047f, 117.03411102f, 1.09294426f}, {137.72589111f, 116.19461823f, 1.09179354f}, {138.56214905f, 115.40852356f, 1.09068167f}, {139.39566040f, 114.67398834f, 1.08959365f}, {140.22692871f, 113.98944855f, 1.08850062f}, {141.05664062f, 113.35341644f, 1.08745301f}, {141.88529968f, 112.76443481f, 1.08642900f}, {142.71362305f, 112.22137451f, 1.08540702f}, {143.54205322f, 111.72303772f, 1.08437967f}, {144.37123108f, 111.26847076f, 1.08343315f}, {145.20175171f, 110.85669708f, 1.08244526f}, {146.03410339f, 110.48693085f, 1.08151639f}, {146.86900330f, 110.15843201f, 1.08053935f}, {147.70695496f, 109.87057495f, 1.07959950f}, {148.54859924f, 109.62286377f, 1.07870388f}, {149.39459229f, 109.41477966f, 1.07782388f}, {150.24549866f, 109.24592590f, 1.07698083f}, {151.10194397f, 109.11600494f, 1.07608950f}, {151.96461487f, 109.02478027f, 1.07522082f}, {152.83415222f, 108.97208405f, 1.07433963f}, {153.71127319f, 108.95785522f, 1.07354414f}, {154.59671021f, 108.98216248f, 1.07270765f}, {155.49119568f, 109.04495239f, 1.07189357f}, {156.39553833f, 109.14643860f, 1.07111573f}, {157.31040955f, 109.28681183f, 1.07035303f}, {158.23672485f, 109.46636200f, 1.06955647f}, {159.17539978f, 109.68551636f, 1.06881690f}, {160.12733459f, 109.94474030f, 1.06811297f}, {161.09342957f, 110.24451447f, 1.06729198f}, {162.07475281f, 110.58553314f, 1.06664574f}, {163.07237244f, 110.96849060f, 1.06599355f}, {164.08741760f, 111.39423370f, 1.06532812f}, {165.12100220f, 111.86363220f, 1.06467736f}, {166.17456055f, 112.37779236f, 1.06405497f}, {167.24923706f, 112.93774414f, 1.06348181f}, {168.34660339f, 113.54484558f, 1.06298494f}, {169.46812439f, 114.20040131f, 1.06257820f}, {170.61550903f, 114.90596008f, 1.06207538f}, {171.79048157f, 115.66323853f, 1.06167626f}, {172.99496460f, 116.47403717f, 1.06135297f}, {174.23092651f, 117.34028625f, 1.06111920f}, {175.50056458f, 118.26425171f, 1.06094742f}, {176.80622864f, 119.24824524f, 1.06092680f}, {178.15068054f, 120.29499054f, 1.06098175f}, {179.53649902f, 121.40726471f, 1.06120861f}, {180.96672058f, 122.58818054f, 1.06166244f}, {182.44482422f, 123.84117889f, 1.06235087f}, {183.97430420f, 125.17002869f, 1.07487524f}, {185.55917358f, 126.57882690f, 1.09695435f}, {187.20379639f, 128.07208252f, 1.12071800f}, {188.99867249f, 129.73483276f, 1.14772475f}, {188.23764038f, 129.89558411f, 1.14387047f}, {187.47769165f, 130.09701538f, 1.14024830f}, {186.71838379f, 130.33955383f, 1.13689339f}, {185.95915222f, 130.62344360f, 1.13365257f}, {185.19963074f, 130.94931030f, 1.13064849f}, {184.43930054f, 131.31755066f, 1.12780762f}, {183.67762756f, 131.72883606f, 1.12515116f}, {182.91423035f, 132.18377686f, 1.12263775f}, {182.14855957f, 132.68319702f, 1.12026584f}, {181.38005066f, 133.22798157f, 1.11797261f}, {180.60832214f, 133.81893921f, 1.11579514f}, {179.83283997f, 134.45712280f, 1.11376226f}, {179.05297852f, 135.14369202f, 1.11184251f}, {178.26837158f, 135.87979126f, 1.10996699f}, {177.47833252f, 136.66687012f, 1.10821760f}, {176.68237305f, 137.50616455f, 1.10654855f}, {175.87985229f, 138.39941406f, 1.10492909f}, {175.07023621f, 139.34809875f, 1.10342598f}, {174.25288391f, 140.35424805f, 1.10199368f}, {173.42715454f, 141.41961670f, 1.10057974f}, {172.59234619f, 142.54644775f, 1.09928739f}, {171.74778748f, 143.73696899f, 1.09802771f}, {170.89279175f, 144.99362183f, 1.09680009f}, {170.02659607f, 146.31904602f, 1.09564865f}, {169.14834595f, 147.71612549f, 1.09454334f}, {168.25721741f, 149.18782043f, 1.09354246f}, {167.35241699f, 150.73765564f, 1.09254348f}, {166.43290710f, 152.36918640f, 1.09158993f}, {165.49781799f, 154.08624268f, 1.09067440f}, {164.54600525f, 155.89295959f, 1.08984005f}, {163.57653809f, 157.79396057f, 1.08905768f}, {162.58802795f, 159.79429626f, 1.08829081f}, {161.57937622f, 161.89915466f, 1.08758295f}, {160.54928589f, 164.11444092f, 1.08692646f}, {159.49626160f, 166.44639587f, 1.08628500f}, {159.92367554f, 161.36671448f, 1.08243811f}, {160.36074829f, 156.63227844f, 1.07886004f}, {160.80548096f, 152.21118164f, 1.07545376f}, {161.25607300f, 148.07559204f, 1.07231450f}, {161.71113586f, 144.20045471f, 1.06936800f}, {162.16624451f, 140.58782959f, 1.06660414f}, {162.62339783f, 137.19183350f, 1.06403434f}, {163.08174133f, 133.99533081f, 1.06158686f}, {163.54052734f, 130.98318481f, 1.05928051f}, {163.99919128f, 128.14134216f, 1.05711412f}, {164.45712280f, 125.45755768f, 1.05507874f}, {164.91404724f, 122.92086792f, 1.05314577f}, {165.36959839f, 120.52072144f, 1.05130100f}, {165.82348633f, 118.24821472f, 1.04954326f}, {166.27552795f, 116.09490967f, 1.04789197f}, {166.72554016f, 114.05319214f, 1.04632604f}, {167.17352295f, 112.11602020f, 1.04485810f}, {167.61930847f, 110.27739716f, 1.04345393f}, {168.06294250f, 108.53096771f, 1.04213977f}, {168.50436401f, 106.87177277f, 1.04086864f}, {168.94361877f, 105.29480743f, 1.03964007f}, {169.38075256f, 103.79545593f, 1.03851974f}, {169.81582642f, 102.36974335f, 1.03746772f}, {170.24888611f, 101.01372528f, 1.03643727f}, {170.68005371f, 99.72393799f, 1.03544819f}, {171.10943604f, 98.49688721f, 1.03454590f}, {171.53715515f, 97.32977295f, 1.03367782f}, {171.96328735f, 96.21972656f, 1.03283072f}, {172.38800049f, 95.16418457f, 1.03206944f}, {172.81137085f, 94.16057587f, 1.03132880f}, {173.23365784f, 93.20693207f, 1.03064764f}, {173.65490723f, 92.30083466f, 1.02998030f}, {174.07530212f, 91.44068909f, 1.02938497f}, {174.49501038f, 90.62458038f, 1.02881610f}, {174.91416931f, 89.85074615f, 1.02829957f}, {175.33299255f, 89.11779022f, 1.02777696f}, {175.75161743f, 88.42431641f, 1.02733874f}, {176.17021179f, 87.76882172f, 1.02693307f}, {176.58895874f, 87.14999390f, 1.02657282f}, {177.00808716f, 86.56691742f, 1.02622557f}, {177.42770386f, 86.01834869f, 1.02589786f}, {177.84808350f, 85.50348663f, 1.02565384f}, {178.26936340f, 85.02117920f, 1.02540350f}, {178.69175720f, 84.57091522f, 1.02523017f}, {179.11547852f, 84.15147400f, 1.02510834f}, {179.54071045f, 83.76258850f, 1.02499294f}, {179.96768188f, 83.40326691f, 1.02491605f}, {180.39665222f, 83.07298279f, 1.02490962f}, {180.82775879f, 82.77140045f, 1.02490962f}, {181.26129150f, 82.49774170f, 1.02496731f}, {181.60975647f, 82.29911804f, 1.02503788f}, {181.96005249f, 82.11769104f, 1.02513397f}, {182.31227112f, 81.95356750f, 1.02524948f}, {180.97543335f, 81.11191559f, 1.00906575f}, {179.66828918f, 80.31108856f, 1.00887322f}, {178.38929749f, 79.54937744f, 1.00905335f}, {177.13673401f, 78.82533264f, 1.00922120f}, {175.90902710f, 78.13740540f, 1.00938296f}, {174.70492554f, 77.48436737f, 1.00956321f}, {173.52301025f, 76.86474609f, 1.00973749f}, {172.36201477f, 76.27766418f, 1.00992417f}, {171.22068787f, 75.72192383f, 1.01008606f}, {170.09796143f, 75.19658661f, 1.01026666f}, {168.99272156f, 74.70063782f, 1.01042247f}, {167.90393066f, 74.23341370f, 1.01058447f}, {166.83064270f, 73.79388428f, 1.01075280f}, {165.77189636f, 73.38125610f, 1.01090860f}, {164.72688293f, 72.99492645f, 1.01109576f}, {163.69462585f, 72.63435364f, 1.01122701f}, {162.67440796f, 72.29885101f, 1.01140797f}, {161.66537476f, 71.98796082f, 1.01155162f}, {160.66679382f, 71.70103455f, 1.01171398f}, {159.67802429f, 71.43776703f, 1.01187646f}, {158.69822693f, 71.19763947f, 1.01203895f}, {157.72677612f, 70.98020935f, 1.01218903f}, {156.76310730f, 70.78521729f, 1.01233280f}, {155.80639648f, 70.61253357f, 1.01249552f}, {154.85615540f, 70.46160126f, 1.01263940f}, {153.91183472f, 70.33226013f, 1.01280212f}, {152.97273254f, 70.22430420f, 1.01295877f}, {152.03828430f, 70.13768768f, 1.01310277f}, {151.10795593f, 70.07220459f, 1.01325309f}, {150.18124390f, 70.02762604f, 1.01340985f}, {149.25758362f, 70.00395203f, 1.01355398f}, {148.33633423f, 70.00125885f, 1.01371086f}, {147.41702271f, 70.01935577f, 1.01386762f}, {146.49932861f, 70.05832672f, 1.01402462f}, {145.58241272f, 70.11812592f, 1.01417530f}, {144.66596985f, 70.19892883f, 1.01431966f}, {143.74937439f, 70.30081177f, 1.01447034f}, {142.83226013f, 70.42381287f, 1.01463366f}, {141.91395569f, 70.56824493f, 1.01478457f}, {140.99409485f, 70.73410797f, 1.01492906f}, {140.07206726f, 70.92182922f, 1.01509881f}, {139.14739990f, 71.13150024f, 1.01524985f}, {138.21951294f, 71.36356354f, 1.01541340f}, {137.28794861f, 71.61805725f, 1.01557076f}, {136.35217285f, 71.89567566f, 1.01573443f}, {135.41165161f, 72.19656372f, 1.01589823f}, {134.46575928f, 72.52127838f, 1.01605570f}, {133.51416016f, 72.87017822f, 1.01621962f}, {132.55606079f, 73.24378204f, 1.01638985f}, {131.59100342f, 73.64274597f, 1.01655364f}, {130.61842346f, 74.06747437f, 1.01673663f}, {129.63764954f, 74.51870728f, 1.01690710f}, {128.64814758f, 74.99705505f, 1.01708376f}, {127.64934540f, 75.50328827f, 1.01726067f}, {126.64044189f, 76.03816986f, 1.01743746f}, {125.62088013f, 76.60252380f, 1.01761448f}, {124.58995819f, 77.19719696f, 1.01780415f}, {123.54706573f, 77.82308960f, 1.01799381f}, {122.49147797f, 78.48124695f, 1.01818359f}, {121.42234802f, 79.17277527f, 1.01837349f}, {120.33911896f, 79.89865875f, 1.01857603f}, {119.24098969f, 80.66007996f, 1.01877868f}, {118.12702179f, 81.45847321f, 1.01898146f}, {116.99658966f, 82.29497528f, 1.01919055f}, {115.84862518f, 83.17121124f, 1.01940632f}, {114.68261719f, 84.08848572f, 1.01962829f}, {113.49742126f, 85.04845428f, 1.01985037f}, {112.29225159f, 86.05281067f, 1.02007270f}, {111.06623077f, 87.10329437f, 1.02031398f}, {109.81839752f, 88.20175171f, 1.02054918f}, {108.54780579f, 89.35018158f, 1.02080345f}, {107.25349426f, 90.55063629f, 1.02104533f}, {106.01378632f, 91.72901154f, 1.02129984f}, {104.75141907f, 92.95729065f, 1.02154195f}, {103.46569061f, 94.23732758f, 1.02180314f}, {102.15583038f, 95.57118988f, 1.02206445f}, {100.82098389f, 96.96112061f, 1.02232587f}, {99.46034241f, 98.40940094f, 1.02261305f}, {98.07328033f, 99.91828918f, 1.02290034f}, {96.65924072f, 101.49002838f, 1.02318776f}, {95.21749878f, 103.12724304f, 1.02348828f}, {95.73937225f, 102.86655426f, 1.02344346f}, {96.26174927f, 102.63586426f, 1.02339876f}, {96.78492737f, 102.43490601f, 1.02334762f}, {97.30921936f, 102.26332092f, 1.02330279f}, {97.83483887f, 102.12094116f, 1.02325165f}, {98.36214447f, 102.00749969f, 1.02320695f}, {98.89139557f, 101.92283630f, 1.02316213f}, {99.42285156f, 101.86685181f, 1.02311110f}, {99.95685577f, 101.83944702f, 1.02307284f}, {100.49364471f, 101.84057617f, 1.02302170f}, {101.03360748f, 101.87023163f, 1.02297699f}, {101.57698059f, 101.92840576f, 1.02293229f}, {102.12414551f, 102.01519012f, 1.02287471f}, {102.67539215f, 102.13067627f, 1.02283645f}, {103.23106384f, 102.27501678f, 1.02278543f}, {103.79146576f, 102.44834900f, 1.02273428f}, {104.35699463f, 102.65090179f, 1.02268970f}, {104.92807770f, 102.88293457f, 1.02264488f}, {105.50497437f, 103.14469147f, 1.02259398f}, {106.08808899f, 103.43659210f, 1.02254283f}, {106.67792511f, 103.75897217f, 1.02249825f}, {107.27485657f, 104.11218262f, 1.02244711f}, {107.87925720f, 104.49674988f, 1.02240241f}, {108.49162292f, 104.91311646f, 1.02235138f}, {109.11245728f, 105.36189270f, 1.02229393f}, {109.74222565f, 105.84369659f, 1.02224290f}, {110.38142395f, 106.35903168f, 1.02219832f}, {111.03064728f, 106.90873718f, 1.02214086f}, {111.69034576f, 107.49348450f, 1.02208996f}, {112.36121368f, 108.11415863f, 1.02203250f}, {113.04383087f, 108.77153015f, 1.02198160f}, {113.73882294f, 109.46652222f, 1.02192426f}, {114.44687653f, 110.20026398f, 1.02186692f}, {115.16874695f, 110.97360992f, 1.02181590f}, {115.90515137f, 111.78779602f, 1.02175856f}, {116.65686035f, 112.64398956f, 1.02170122f}, {117.42477417f, 113.54344940f, 1.02163744f}, {118.20970917f, 114.48757172f, 1.02158010f}, {119.01265717f, 115.47780609f, 1.02151012f}, {119.83460236f, 116.51554871f, 1.02145910f}, {120.67650604f, 117.60256958f, 1.02139544f}, {121.53961945f, 118.74051666f, 1.02132535f}, {122.42501068f, 119.93131256f, 1.02126801f}, {123.33401489f, 121.17689514f, 1.02119172f}, {124.26782990f, 122.47907257f, 1.02112162f}, {125.22799683f, 123.84030151f, 1.02105165f}, {126.21597290f, 125.26286316f, 1.02097523f}, {127.23343658f, 126.74918365f, 1.02089894f}, {128.28198242f, 128.30189514f, 1.02082253f}, {129.36355591f, 129.92378235f, 1.02075267f}, {130.47998047f, 131.61773682f, 1.02066994f}, {131.63343811f, 133.38690186f, 1.02058733f}, {132.82621765f, 135.23458862f, 1.02050471f}, {134.06063843f, 137.16450500f, 1.02041566f}, {135.33923340f, 139.18022156f, 1.02033305f}, {136.66484070f, 141.28575134f, 1.03310418f}, {138.04037476f, 143.48515320f, 1.04639947f}, {139.46907043f, 145.78318787f, 1.05983567f}, {140.95434570f, 148.18458557f, 1.07345259f}, {142.49980164f, 150.69425964f, 1.08727252f}, {141.39631653f, 150.83125305f, 1.08843541f}, {140.31188965f, 151.00013733f, 1.08957183f}, {139.24612427f, 151.20001221f, 1.09077609f}, {138.19857788f, 151.43028259f, 1.09194636f}, {137.16888428f, 151.68980408f, 1.09316313f}, {136.15675354f, 151.97807312f, 1.09438992f}, {135.09207153f, 152.31745911f, 1.09568524f}, {134.04701233f, 152.68754578f, 1.09699845f}, {133.02134705f, 153.08737183f, 1.09833682f}, {132.01486206f, 153.51544189f, 1.09967864f}, {131.02757263f, 153.97076416f, 1.10103095f}, {130.05946350f, 154.45188904f, 1.10239398f}, {129.11047363f, 154.95739746f, 1.10374558f}, {128.18072510f, 155.48580933f, 1.10508561f}, {127.27035522f, 156.03581238f, 1.10648882f}, {126.37946320f, 156.60554504f, 1.10782039f}, {125.50834656f, 157.19346619f, 1.10916293f}, {124.65714264f, 157.79786682f, 1.11052370f}, {123.82617950f, 158.41706848f, 1.11185765f}, {123.01571655f, 159.04899597f, 1.11317194f}, {122.22601318f, 159.69194031f, 1.11451244f}, {121.45749664f, 160.34410095f, 1.11579514f}, {120.71044159f, 161.00343323f, 1.11712658f}, {119.98513031f, 161.66816711f, 1.11841536f}};

// Extra functions not from OCIO

// ST2084 constants
__CONSTANT__ float st2084_m_1=2610.0f / 4096.0f * (1.0f / 4.0f);
__CONSTANT__ float st2084_m_2=2523.0f / 4096.0f * 128.0f;
__CONSTANT__ float st2084_c_1=3424.0f / 4096.0f;
__CONSTANT__ float st2084_c_2=2413.0f / 4096.0f * 32.0f;
__CONSTANT__ float st2084_c_3=2392.0f / 4096.0f * 32.0f;
__CONSTANT__ float st2084_m_1_d = 8192.0f / 1305.0f; // 1.0f / st2084_m_1;
__CONSTANT__ float st2084_m_2_d = 32.0f / 2523.0f; // 1.0f / st2084_m_2;
__CONSTANT__ float st2084_L_p = 10000.0f;

typedef struct
{
    float3 x;
    float3 y;
    float3 z;
} float3x3;

__DEVICE__ inline float3 vecmul( float3x3 m, float3 v)
{
    float3 r;

    r.x = m.x.x * v.x + m.y.x * v.y + m.z.x * v.z;
    r.y = m.x.y * v.x + m.y.y * v.y + m.z.y * v.z;
    r.z = m.x.z * v.x + m.y.z * v.y + m.z.z * v.z;
    
    return r;
}

__DEVICE__ inline float vecdot( float3 a, float3 b)
{   
    return a.x*b.x + a.y*b.y + a.z*b.z;
}

__DEVICE__ inline float3 maxf3(float3 a, float b)
{
    float3 c;

    c.x = _fmaxf(a.x, b);
    c.y = _fmaxf(a.y, b);
    c.z = _fmaxf(a.z, b);

    return c;
}

__DEVICE__ inline float3 minf3(float3 a, float b)
{
    float3 c;

    c.x = _fminf(a.x, b);
    c.y = _fminf(a.y, b);
    c.z = _fminf(a.z, b);

    return c;
}

__DEVICE__ inline float3 powf3(float3 a, float b)
{
    a.x = _powf(a.x, b);
    a.y = _powf(a.y, b);
    a.z = _powf(a.z, b);

    return a;
}

__DEVICE__ inline float3 absf3(float3 a)
{
    a.x = _fabs(a.x);
    a.y = _fabs(a.y);
    a.z = _fabs(a.z);

    return a;
}

__DEVICE__ inline float3 signf3(float3 a)
{
    a.x = _copysignf(1.0f, a.x);
    a.y = _copysignf(1.0f, a.y);
    a.z = _copysignf(1.0f, a.z);

    return a;
}

__DEVICE__ inline float linear_to_ST2084( float v )
{
    float Y_p = _powf(_fmaxf(0.0f, v) / st2084_L_p, st2084_m_1);

    return _powf((st2084_c_1 + st2084_c_2 * Y_p) / (st2084_c_3 * Y_p + 1.0f), st2084_m_2);
}

// OCIO functions

__DEVICE__ float ocio_reach_m_table_0_sample(float h)
{
  int i_base = (int)_floorf(h);
  int i_lo = i_base + 1;
  int i_hi = i_lo + 1;
  float lo = ocio_reach_m_table_0[i_lo];
  float hi = ocio_reach_m_table_0[i_hi];
  float t = h - i_base;
  return _mix(lo, hi, t);
}

__DEVICE__ float ocio_tonescale_fwd0(float J)
{
  float A = 0.0323680267f * _powf(_fabs(J) * 0.00999999978f, 0.879464149f);
  float Y = _powf(( 27.1299992f * A) / (1.0f - A), 2.3809523809523809f);
  float f = 5.08923578f * _powf(Y / (Y + 2.6881951446344488f), 1.14999998f);
  float Y_ts = max(0.0f, f * f / (f + 0.0399999991f));
  float F_L_Y = _powf(0.79370057210326195f * Y_ts, 0.42f);
  float J_ts = 100.f * _powf((F_L_Y / ( 27.1299992f + F_L_Y)) * 30.8946857f, 1.13705599f);
  return J_ts;
}

__DEVICE__ float ocio_toe_fwd0(float x, float limit, float k1_in, float k2_in)
{
  float k2 = max(k2_in, 0.001f);
  float k1 = _sqrtf(k1_in * k1_in + k2 * k2);
  float k3 = (limit + k1) / (limit + k2);
  return (x > limit) ? x : 0.5f * (k3 * x - k1 + _sqrtf((k3 * x - k1) * (k3 * x - k1) + 4.0f * k2 * k3 * x));
}

__DEVICE__ float3 ocio_gamut_cusp_table_0_sample(float h)
{
  int i = int(h) + 1;
  int i_lo = int(max(float(0), float(i + 0)));
  int i_hi = int(min(float(361), float(i + 2)));
  while (i_lo + 1 < i_hi)
  {
    float hcur = ocio_gamut_cusp_table_0_hues_array[i];
    if (h > hcur)
    {
      i_lo = i;
    }
    else
    {
      i_hi = i;
    }
    i = (i_lo + i_hi) / 2;
  }
  float3 lo = ocio_gamut_cusp_table_0[i_hi - 1];
  float3 hi = ocio_gamut_cusp_table_0[i_hi];
  float t = (h - ocio_gamut_cusp_table_0_hues_array[i_hi - 1]) / (ocio_gamut_cusp_table_0_hues_array[i_hi] - ocio_gamut_cusp_table_0_hues_array[i_hi - 1]);
  return _mix(lo, hi, t);
}

__DEVICE__ float ocio_get_focus_gain0(float J, float cuspJ)
{
  float thr = mix(cuspJ, 208.257080f, 0.300000f);
  if (J > thr)
  {
    float gain = ( 208.25708f - thr) / max(0.0001f, 208.25708f - J);
    gain = _logf(gain)/_logf(10.0f);
    return gain * gain + 1.0f;
  }
  else
  {
    return 1.0f;
  }
}

__DEVICE__ float ocio_solve_J_intersect0(float J, float M, float focusJ, float slope_gain)
{
  float M_scaled = M / slope_gain;
  float a = M_scaled / focusJ;
  if (J < focusJ)
  {
    float b = 1.0f - M_scaled;
    float c = -J;
    float det =  b * b - 4.f * a * c;
    float root =  _sqrtf(det);
    return -2.0f * c / (b + root);
  }
  else
  {
    float b = - (1.0f + M_scaled + 208.25708f * a);
    float c = 208.25708f * M_scaled + J;
    float det =  b * b - 4.f * a * c;
    float root =  _sqrtf(det);
    return -2.0f * c / (b - root);
  }
}

__DEVICE__ float ocio_find_gamut_boundary_intersection0(float2 JM_cusp, float gamma_top_inv, float gamma_bottom_inv, float J_intersect_source, float J_intersect_cusp, float slope)
{
  float M_boundary_lower = J_intersect_cusp * _powf(J_intersect_source / J_intersect_cusp, gamma_bottom_inv) / (JM_cusp.r / JM_cusp.g - slope);
  float M_boundary_upper = JM_cusp.g * (208.25708f - J_intersect_cusp) * _powf((208.25708f - J_intersect_source) / (208.25708f - J_intersect_cusp), gamma_top_inv) / (slope * JM_cusp.g + 208.25708f - JM_cusp.r);
  float smin = 0.0f;
  {
    float a = M_boundary_lower;
    float b = M_boundary_upper;
    float s = 0.119999997f * JM_cusp.g;
    float h = max(s - _fabs(a - b), 0.0f) / s;
    smin = min(a, b) - h * h * h * s * 0.16666666666666666f;
  }
  return smin;
}

__DEVICE__ float ocio_remap_M_fwd0(float M, float gamut_boundary_M, float reach_boundary_M)
{
  float boundary_ratio = gamut_boundary_M / reach_boundary_M;
  float proportion = max(boundary_ratio, 0.75f);
  float threshold = proportion * gamut_boundary_M;
  if (proportion >= 1.0f || M <= threshold)
  {
    return M;
  }
  float m_offset = M - threshold;
  float gamut_offset = gamut_boundary_M - threshold;
  float reach_offset = reach_boundary_M - threshold;
  float scale = reach_offset / ((reach_offset / gamut_offset) - 1.0f);
  float nd = m_offset / scale;
  return threshold + scale * nd / (1.0f + nd);
}

__DEVICE__ float3 ocio_gamut_compress0(float3 JMh, float Jx, float3 JMGcusp, float reachMaxM)
{
  float J = JMh.r;
  float M = JMh.g;
  float h = JMh.b;
  if (M <= 0.0f || J >  208.25708f)
  {
    return make_float3(J, 0.0f, h);
  }
  else
  {
    float2 JMcusp = JMGcusp.rg;
    float focusJ = mix(JMcusp.r, 38.932209f, min(1.0f, 1.300000f - (JMcusp.r / 208.25708f)));
    float slope_gain = 625.04541f * ocio_get_focus_gain0(Jx, JMcusp.r);
    float J_intersect_source = ocio_solve_J_intersect0(JMh.r, JMh.g, focusJ, slope_gain);
    float gamut_slope = (J_intersect_source < focusJ) ? J_intersect_source : (208.25708f - J_intersect_source);
    gamut_slope = gamut_slope * (J_intersect_source - focusJ) / (focusJ * slope_gain);
    float gamma_top_inv = JMGcusp.b;
    float gamma_bottom_inv = 0.841093898f;
    float J_intersect_cusp = ocio_solve_J_intersect0(JMcusp.r, JMcusp.g, focusJ, slope_gain);
    float gamutBoundaryM = ocio_find_gamut_boundary_intersection0(JMcusp, gamma_top_inv, gamma_bottom_inv, J_intersect_source, J_intersect_cusp, gamut_slope);
    if (gamutBoundaryM <= 0.0f)
    {
      return make_float3(J, 0.0f, h);
    }
    float reachBoundaryM = 208.25708f * _powf(J_intersect_source / 208.25708f,  0.879464149f);
    reachBoundaryM = reachBoundaryM / ((208.25708f / reachMaxM) - gamut_slope);
    float remapped_M = ocio_remap_M_fwd0(M, gamutBoundaryM, reachBoundaryM);
    float remapped_J = J_intersect_source + remapped_M * gamut_slope;
    return make_float3(remapped_J, remapped_M, h);
  }
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
{
  float3 inPixel = make_float3(p_R, p_G, p_B);
  float3 outColor = inPixel;
    
  // Add Matrix processing

  {
    outColor = vecmul({{1.4514393161456653f, -0.07655377339602043f, 0.008316148425697719f}, {-0.23651074689374019f, 1.1762296998335731f, -0.0060324497910210278f}, {-0.21492856925192524f, -0.099675926437552201f, 0.9977163013653233f}}, outColor);
  }

  // Add Range processing

  {
    outColor = maxf3(outColor, 0.f);
    outColor = minf3(outColor, 3171.23583984375f);
  }

  // Add Matrix processing

  {
    outColor = vecmul({{0.69545224135745176f, 0.044794563372037632f, -0.0055258825581135443f}, {0.14067869647029416f, 0.85967111845642163f, 0.0040252103059786586f}, {0.16386906217225403f, 0.095534318171540358f, 1.0015006722521349f}}, outColor);
  }

  // Add FixedFunction 'ACES_OutputTransform20 (Forward)' processing
  
  {
    
    // Add RGB to JMh
    
    float3 JMh;
    float3 Aab;
    {
      {
        float3 lms = vecmul({{0.445181042f, 0.123734146f, 0.0117007261f}, {0.34964928f, 0.613643706f, 0.0280607939f}, {-0.00112973212f, 0.0563228019f, 0.753939033f}}, outColor);
        float3 F_L_v = powf3(absf3(lms), 0.419999987f);
        float3 rgb_a = (signf3(lms) * F_L_v) / ( 27.1299992f + F_L_v);
        Aab = vecmul({{20.25881f, 15480.f, 1720.f}, {10.129405f, -16887.2734f, 1720.f}, {0.506470263f, 1407.27271f, -3440.f}}, rgb_a);
      }
      {
        float J = 100.f * _powf(Aab.r, 1.13705599f);
        float M = (J == 0.0f) ? 0.0f : _sqrtf(Aab.g * Aab.g + Aab.b * Aab.b);
        float h = (Aab.g == 0.0f) ? 0.0f : _atan2f(Aab.b, Aab.g) * 57.29577951308238f;
        h = h - _floorf(h / 360.0f) * 360.0f;
        h = (h < 0.0f) ? h + 360.0f : h;
        JMh = make_float3(J, M, h);
      }
      outColor = JMh;
    }
    float h_rad = outColor.b * 0.0174532924f;
    float cos_hr = _cosf(h_rad);
    float sin_hr = _sinf(h_rad);

    // Add ToneScale and ChromaCompress (fwd)
    
    float J_ts = ocio_tonescale_fwd0(outColor.r);
    // Sample tables (fwd)
    float reachMaxM = ocio_reach_m_table_0_sample(outColor.b);

    {
      float J = outColor.r;
      float M = outColor.g;
      float h = outColor.b;
      float M_cp = M;
      if (M != 0.0f)
      {
        float nJ = J_ts / 208.25708f;
        float snJ = max(0.0f, 1.0f - nJ);
        float Mnorm;
        {
          float cos_hr2 = 2.0f * cos_hr * cos_hr - 1.0f;
          float sin_hr2 = 2.0f * cos_hr * sin_hr;
          float cos_hr3 = 4.0f * cos_hr * cos_hr * cos_hr - 3.0f * cos_hr;
          float sin_hr3 = 3.0f * sin_hr - 4.0f * sin_hr * sin_hr * sin_hr;
          float3 cosines = make_float3(cos_hr, cos_hr2, cos_hr3);
          float3 cosine_weights = float3(21.814416379852293f, 31.678888572826388f, 15.164865710067749f);
          float3 sines = float3(sin_hr, sin_hr2, sin_hr3);
          float3 sine_weights = float3(28.207692783603669f, -12.257307881011963f, 17.68440548805237f);
          Mnorm = vecdot(cosines, cosine_weights) + vecdot(sines, sine_weights) + 148.36123706298829f;
        }
        float limit = _powf(nJ, 0.879464149f) * reachMaxM / Mnorm;
        M_cp = M * _powf(J_ts / J, 0.879464149f);
        M_cp = M_cp / Mnorm;
        M_cp = limit - ocio_toe_fwd0(limit - M_cp, limit - 0.001f, snJ * 0.67302388f, _sqrtf(nJ * nJ + 0.00100000005f));
        M_cp = ocio_toe_fwd0(M_cp, limit, nJ * 7.93584251f, snJ);
        M_cp = M_cp * Mnorm;
      }
      outColor = make_float3(J_ts, M_cp, h);
    }

    // Add GamutCompress (fwd)
    
    {
      float3 JMGcusp = ocio_gamut_cusp_table_0_sample(outColor.b);
      outColor = ocio_gamut_compress0(outColor, outColor.r, JMGcusp, reachMaxM);
    }

    // Add JMh to RGB
    
    {
      float3 JMh = outColor;
      float3 Aab;
      {
        Aab.r = _powf(JMh.r * 0.00999999978f, 0.879464149f);
        Aab.g = JMh.g * cos_hr;
        Aab.b = JMh.g * sin_hr;
      }
      {
        float3 rgb_a = vecmul({{0.0323680267f, 0.0323680267, 0.0323680267f}, {2.07657631e-05f, -4.10250432e-05f, -1.01296409e-05f}, {1.3260621e-05f, -1.20174373e-05f, -0.000290076074f}}, Aab);
        float3 lms = signf3(rgb_a) * powf3( 27.1299992f * absf3(rgb_a) / (1.0f - absf3(rgb_a)), 2.38095236f);
        outColor = vecmul({{5.86586046f, -1.17879069f, 0.0301606283f}, {-4.48821688f, 2.81135988f, -0.16902554f}, {-0.117723338f, -0.372647762f, 1.39878595f}}, lms);
      }
    }
  }

  // Add Range processing
  
  {
    outColor = maxf3(outColor, 0.f);
    outColor = minf3(outColor, 5.f);
  }

  // Add Matrix processing
  
  {
    outColor = vecmul({{0.75383303436172167, 0.045743848965358269, -0.0012103403545183939}, {0.1985973690526166, 0.94177721981169349, 0.01760171730109}, {0.047569596585661789, 0.012478931222948141, 0.98360862305342855}}, outColor);
  }

  // Add PQ curve processing
  
  {
    outColor *= 100.0f;
    outColor.x = linear_to_ST2084(outColor.x);
    outColor.y = linear_to_ST2084(outColor.y);
    outColor.z = linear_to_ST2084(outColor.z);
  }

  // Add Range processing
  
  {
    outColor = maxf3(outColor, 0.f);
  }


  return outColor;
}

