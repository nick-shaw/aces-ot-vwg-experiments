// DEFINE_ACES_PARAM(IS_PARAMETRIC_ACES_TRANSFORM: 0, OUTPUT_COLORSPACE_TAG: sRGB_D60sim_100nits_dim)

// Declaration of tables

__CONSTANT__ float ocio_gamut_cusp_table_0_hues_array[362] = {-1.01858521f, 0.0f, 0.999435902f, 1.9988718f, 2.9983077f, 3.99774361f, 4.99717951f, 5.99661541f, 6.99605131f, 7.99548721f, 8.99492264f, 9.99435902f, 10.9937954f, 11.9932308f, 12.9926662f, 13.9921026f, 14.991539f, 15.9909744f, 16.9904099f, 17.9898453f, 18.9892826f, 19.988718f, 20.9881535f, 21.9875908f, 22.9870262f, 23.9864616f, 24.9858971f, 26.040247f, 27.0408554f, 28.0414639f, 29.0420723f, 30.0426826f, 31.0432892f, 32.0438995f, 33.0445099f, 34.0451164f, 35.045723f, 36.0463333f, 37.0469437f, 38.0475502f, 39.0481606f, 40.0487671f, 41.0493774f, 42.0499878f, 43.0505943f, 44.0512009f, 45.0518112f, 46.0524216f, 47.0530319f, 48.0536385f, 49.054245f, 50.0548553f, 51.0554657f, 52.0560722f, 53.0566788f, 54.0572891f, 55.0578995f, 56.0585098f, 57.0591164f, 58.0597229f, 59.0603333f, 60.0609436f, 61.061554f, 62.0621567f, 63.062767f, 64.0633774f, 65.0639877f, 66.0645905f, 67.0652008f, 68.0658112f, 69.0664215f, 70.0670319f, 71.0676346f, 72.0682449f, 73.0688553f, 74.0694656f, 75.070076f, 76.0706787f, 77.0712891f, 78.0718994f, 79.0725098f, 80.0731125f, 81.0737228f, 82.0743332f, 83.0749435f, 84.0755539f, 85.0761566f, 86.076767f, 87.0773773f, 88.0779877f, 89.0785904f, 90.0792007f, 91.0798111f, 92.0804214f, 93.0810242f, 94.0816345f, 95.0822449f, 96.0828552f, 97.0834579f, 98.0840683f, 99.0846786f, 100.085289f, 101.085899f, 102.086502f, 103.087112f, 104.087723f, 105.088333f, 106.088936f, 106.586899f, 107.593224f, 108.599548f, 109.605881f, 110.612206f, 111.61853f, 112.624855f, 113.63118f, 114.637512f, 115.643837f, 116.650162f, 117.656487f, 118.662811f, 119.669144f, 120.675468f, 121.681793f, 122.688118f, 123.694443f, 124.700775f, 125.7071f, 126.713425f, 127.719749f, 128.726074f, 129.732407f, 130.738739f, 131.745056f, 132.751389f, 133.757706f, 134.764038f, 135.770355f, 136.776688f, 137.78302f, 138.789337f, 139.79567f, 140.802002f, 141.808319f, 142.888168f, 143.968018f, 145.047867f, 146.127716f, 147.207565f, 148.207993f, 149.20842f, 150.208847f, 151.209274f, 152.209702f, 153.210129f, 154.210556f, 155.210983f, 156.211411f, 157.211853f, 158.21228f, 159.212708f, 160.213135f, 161.213562f, 162.213989f, 163.214417f, 164.214844f, 165.215271f, 166.215698f, 167.216125f, 168.216553f, 169.21698f, 170.217407f, 171.217834f, 172.218262f, 173.218689f, 174.219116f, 175.219543f, 176.219971f, 177.220398f, 178.220825f, 179.221252f, 180.22168f, 181.222107f, 182.222549f, 183.222977f, 184.223404f, 185.223831f, 186.224258f, 187.224686f, 188.225113f, 189.22554f, 190.225967f, 191.226395f, 192.226822f, 193.123947f, 194.021088f, 194.918213f, 195.815338f, 196.821686f, 197.828033f, 198.834366f, 199.840714f, 200.847061f, 201.853409f, 202.859756f, 203.866089f, 204.872437f, 205.878784f, 206.885132f, 207.891479f, 208.897812f, 209.90416f, 210.910507f, 211.916855f, 212.923203f, 213.929535f, 214.935883f, 215.94223f, 216.948578f, 217.954926f, 218.961273f, 219.967606f, 220.973953f, 221.980301f, 222.986649f, 223.992981f, 224.999329f, 226.005676f, 227.012024f, 228.018372f, 229.024719f, 230.031052f, 231.037399f, 232.043747f, 233.050095f, 234.056427f, 235.062775f, 236.069122f, 237.07547f, 238.081818f, 239.088165f, 240.094513f, 241.100845f, 242.107193f, 243.113541f, 244.119873f, 245.126221f, 246.132568f, 247.138916f, 248.145264f, 249.151611f, 250.157959f, 251.164291f, 252.170639f, 253.176987f, 254.183334f, 255.189667f, 256.196014f, 257.202362f, 258.20871f, 259.215057f, 260.221405f, 261.227753f, 262.23407f, 263.240417f, 264.246765f, 265.253113f, 266.25946f, 267.265808f, 268.272156f, 269.252869f, 270.233551f, 271.214264f, 272.194946f, 273.175659f, 274.156372f, 275.137054f, 276.117767f, 277.112183f, 278.106598f, 279.101013f, 280.095459f, 281.089874f, 282.08429f, 283.078705f, 284.07312f, 285.067535f, 286.061951f, 287.056396f, 288.050812f, 289.045227f, 290.039642f, 291.034058f, 292.028473f, 293.022888f, 294.017334f, 295.011749f, 296.006165f, 297.00058f, 297.994995f, 298.98941f, 299.983826f, 300.978241f, 301.972687f, 302.967102f, 303.961517f, 304.955933f, 305.950348f, 306.944763f, 307.939178f, 308.933624f, 309.92804f, 310.922455f, 311.91687f, 312.911285f, 313.905701f, 314.900116f, 315.894531f, 316.888977f, 317.883392f, 318.877808f, 319.872223f, 320.866638f, 321.861053f, 322.855469f, 323.849915f, 324.84433f, 325.838745f, 326.83316f, 327.827576f, 328.821991f, 329.816406f, 330.810852f, 331.805267f, 332.799683f, 333.794098f, 334.778015f, 335.761902f, 336.745819f, 337.729736f, 338.713654f, 339.697571f, 340.681458f, 341.665375f, 342.68396f, 343.702545f, 344.72113f, 345.739746f, 346.758331f, 347.776917f, 348.795502f, 349.814087f, 350.832703f, 351.851288f, 352.869873f, 353.888458f, 354.907043f, 355.925629f, 356.944244f, 357.96283f, 358.981415f, 360.0f};

__CONSTANT__ float  ocio_reach_m_table_0[362] = {165.07568359f, 166.79077148f, 168.48144531f, 170.13549805f, 171.75903320f, 173.34594727f, 174.88403320f, 176.37329102f, 177.80761719f, 179.18701172f, 180.51147461f, 181.76879883f, 182.97119141f, 184.11254883f, 185.19287109f, 186.21826172f, 187.18261719f, 188.09204102f, 188.95263672f, 189.76440430f, 190.53344727f, 191.25976562f, 191.95556641f, 192.62084961f, 193.25561523f, 193.87817383f, 194.36645508f, 187.09716797f, 180.40771484f, 174.24316406f, 168.53027344f, 163.23242188f, 158.30688477f, 153.71704102f, 149.43237305f, 145.42236328f, 141.66870117f, 138.14086914f, 134.82666016f, 131.70776367f, 128.77197266f, 126.00097656f, 123.38256836f, 120.90454102f, 118.56079102f, 116.34521484f, 114.23950195f, 112.24975586f, 110.35156250f, 108.55712891f, 106.84814453f, 105.22460938f, 103.68652344f, 102.21557617f, 100.82397461f, 99.49340820f, 98.22998047f, 97.02758789f, 95.88012695f, 94.78759766f, 93.75000000f, 92.76733398f, 91.82739258f, 90.93627930f, 90.08789062f, 89.28222656f, 88.51928711f, 87.79296875f, 87.10937500f, 86.45629883f, 85.84594727f, 85.26611328f, 84.71679688f, 84.20410156f, 83.72192383f, 83.27026367f, 82.84912109f, 82.45849609f, 82.09228516f, 81.75659180f, 81.45141602f, 81.17065430f, 80.91430664f, 80.68847656f, 80.48706055f, 80.31005859f, 80.15747070f, 80.02929688f, 79.92553711f, 79.84619141f, 79.79736328f, 79.76684570f, 79.76074219f, 79.77905273f, 79.82177734f, 79.89501953f, 79.98657227f, 80.10253906f, 80.24902344f, 80.41381836f, 80.60913086f, 80.82275391f, 81.06689453f, 81.34155273f, 81.64062500f, 81.96411133f, 82.31811523f, 82.69653320f, 83.10546875f, 83.54492188f, 84.01489258f, 84.51538086f, 85.05249023f, 85.62011719f, 86.21826172f, 86.85302734f, 87.52441406f, 88.23242188f, 88.98315430f, 89.77050781f, 90.60668945f, 91.47949219f, 92.40112305f, 93.36547852f, 94.38476562f, 95.45288086f, 96.57592773f, 97.75390625f, 98.99902344f, 100.29907227f, 101.66625977f, 103.10668945f, 104.62036133f, 106.20727539f, 107.88574219f, 109.64355469f, 111.49902344f, 113.45214844f, 115.50903320f, 117.67578125f, 119.97070312f, 122.38769531f, 124.94506836f, 127.65502930f, 130.52368164f, 133.56933594f, 136.79809570f, 140.22827148f, 143.88427734f, 141.69311523f, 138.11645508f, 134.73510742f, 131.53076172f, 128.49731445f, 125.62255859f, 122.89428711f, 120.30639648f, 117.84667969f, 115.50292969f, 113.27514648f, 111.15722656f, 109.13696289f, 107.20825195f, 105.37719727f, 103.62548828f, 101.95312500f, 100.36010742f, 98.83422852f, 97.38159180f, 95.98999023f, 94.66552734f, 93.39599609f, 92.18139648f, 91.02172852f, 89.91699219f, 88.85498047f, 87.84179688f, 86.87744141f, 85.95581055f, 85.07080078f, 84.22851562f, 83.42285156f, 82.65991211f, 81.92749023f, 81.23168945f, 80.56640625f, 79.93164062f, 79.33349609f, 78.75976562f, 78.22265625f, 77.70385742f, 77.22167969f, 76.76391602f, 76.33056641f, 75.92163086f, 75.54321289f, 75.18310547f, 74.85351562f, 74.54223633f, 74.25537109f, 73.99291992f, 73.74877930f, 73.52905273f, 73.33374023f, 73.15673828f, 72.99804688f, 72.86376953f, 72.74780273f, 72.65625000f, 72.58300781f, 72.52807617f, 72.49755859f, 72.48535156f, 72.49145508f, 72.52197266f, 72.57080078f, 72.63793945f, 72.72338867f, 72.83325195f, 72.96752930f, 73.11401367f, 73.28491211f, 73.48022461f, 73.69384766f, 73.93188477f, 74.18823242f, 74.46899414f, 74.77416992f, 75.09765625f, 75.45166016f, 75.82397461f, 76.22070312f, 76.64794922f, 77.09960938f, 77.57568359f, 78.07617188f, 78.60717773f, 79.16870117f, 79.75463867f, 80.37719727f, 81.03027344f, 81.71386719f, 82.42797852f, 83.17871094f, 83.96606445f, 84.79003906f, 85.65063477f, 86.55395508f, 87.49389648f, 88.48266602f, 89.51416016f, 90.59448242f, 91.71752930f, 92.89550781f, 94.12841797f, 95.41015625f, 96.75292969f, 98.16284180f, 99.62768555f, 101.15966797f, 102.76489258f, 104.44335938f, 106.20117188f, 108.03833008f, 109.95483398f, 111.96899414f, 114.07470703f, 116.27807617f, 118.59130859f, 121.00830078f, 120.93505859f, 119.94018555f, 118.99414062f, 118.09082031f, 117.23632812f, 116.42456055f, 115.64941406f, 114.91699219f, 114.22729492f, 113.57421875f, 112.95776367f, 112.37792969f, 111.82861328f, 111.32202148f, 110.84594727f, 110.40039062f, 109.99145508f, 109.61303711f, 109.27124023f, 108.95385742f, 108.66699219f, 108.41674805f, 108.19091797f, 107.99560547f, 107.83081055f, 107.69042969f, 107.58666992f, 107.50732422f, 107.45239258f, 107.42797852f, 107.43408203f, 107.46459961f, 107.52563477f, 107.61718750f, 107.73315430f, 107.87963867f, 108.05053711f, 108.25195312f, 108.47778320f, 108.73413086f, 109.02099609f, 109.33837891f, 109.68017578f, 110.05249023f, 110.45532227f, 110.88867188f, 111.35253906f, 111.84692383f, 112.37182617f, 112.92724609f, 113.51318359f, 114.12963867f, 114.78271484f, 115.46630859f, 116.18652344f, 116.93725586f, 117.72460938f, 118.54248047f, 119.40307617f, 120.29418945f, 121.22192383f, 122.19238281f, 123.19335938f, 124.23095703f, 125.31127930f, 126.42822266f, 127.58789062f, 128.77807617f, 130.01098633f, 131.28662109f, 132.59887695f, 133.94775391f, 135.33325195f, 136.76147461f, 138.22631836f, 139.72778320f, 141.25976562f, 142.82836914f, 144.42749023f, 146.06323242f, 147.71728516f, 149.40185547f, 151.10473633f, 152.83203125f, 154.57153320f, 156.32324219f, 158.08105469f, 159.83886719f, 161.59057617f, 163.34228516f, 165.07568359f, 166.79077148f};

__CONSTANT__ float3  ocio_gamut_cusp_table_0[362] = {{55.47735596f, 71.98430634f, 1.12109387f}, {55.20295334f, 72.13582611f, 1.12208426f}, {54.94115829f, 72.29109955f, 1.12309945f}, {54.68672943f, 72.45244598f, 1.12410116f}, {54.43965149f, 72.61967468f, 1.12501967f}, {54.19993973f, 72.79244232f, 1.12600172f}, {53.96755981f, 72.97063446f, 1.12688458f}, {53.74250412f, 73.15394592f, 1.12782323f}, {53.52471924f, 73.34220886f, 1.12864685f}, {53.31420898f, 73.53526306f, 1.12949491f}, {53.11091614f, 73.73299408f, 1.13038313f}, {52.91479874f, 73.93533325f, 1.13116372f}, {52.72581100f, 74.14216614f, 1.13192952f}, {52.54389572f, 74.35359192f, 1.13268864f}, {52.36896133f, 74.56945801f, 1.13340938f}, {52.20096588f, 74.79016113f, 1.13416255f}, {52.03980255f, 75.01549530f, 1.13485384f}, {51.88537979f, 75.24568939f, 1.13552248f}, {51.73760605f, 75.48103333f, 1.13612092f}, {51.59636307f, 75.72166443f, 1.13675940f}, {51.46155930f, 75.96785736f, 1.13733542f}, {51.33304596f, 76.21995544f, 1.13792801f}, {51.21071243f, 76.47817993f, 1.13846552f}, {51.09443665f, 76.74310303f, 1.13898802f}, {50.98407364f, 77.01496887f, 1.13948703f}, {50.87947083f, 77.29434967f, 1.13998652f}, {50.78050995f, 77.58163452f, 1.14040697f}, {50.68205643f, 77.89383698f, 1.14091527f}, {51.37566757f, 75.77306366f, 1.13744605f}, {52.04750824f, 73.80427551f, 1.13420188f}, {52.69920349f, 71.97222900f, 1.13110912f}, {53.33224106f, 70.26377106f, 1.12822700f}, {53.94794464f, 68.66747284f, 1.12546802f}, {54.54751205f, 67.17334747f, 1.12284553f}, {55.13208389f, 65.77268219f, 1.12034249f}, {55.70269394f, 64.45774841f, 1.11798024f}, {56.26025391f, 63.22169495f, 1.11566591f}, {56.80568314f, 62.05843353f, 1.11348987f}, {57.33975220f, 60.96253967f, 1.11140513f}, {57.86324692f, 59.92925262f, 1.10936582f}, {58.37686539f, 58.95414734f, 1.10749102f}, {58.88122940f, 58.03327179f, 1.10551810f}, {59.37699509f, 57.16317368f, 1.10378277f}, {59.86471939f, 56.34062958f, 1.10200095f}, {60.34493256f, 55.56271362f, 1.10029149f}, {60.81818771f, 54.82677460f, 1.09858727f}, {61.28496552f, 54.13047409f, 1.09699106f}, {61.74571609f, 53.47156143f, 1.09541428f}, {62.20086288f, 52.84812546f, 1.09392226f}, {62.65086365f, 52.25823593f, 1.09244871f}, {63.09608841f, 51.70026398f, 1.09095025f}, {63.53689957f, 51.17268372f, 1.08957183f}, {63.97373581f, 50.67409134f, 1.08818245f}, {64.40689850f, 50.20314407f, 1.08683980f}, {64.83673859f, 49.75869370f, 1.08556521f}, {65.26362610f, 49.33960342f, 1.08422899f}, {65.68782043f, 48.94486237f, 1.08291745f}, {66.10966492f, 48.57365417f, 1.08171642f}, {66.52948761f, 48.22499847f, 1.08044660f}, {66.94754791f, 47.89812469f, 1.07924390f}, {67.36422729f, 47.59236908f, 1.07805789f}, {67.77969360f, 47.30706406f, 1.07685339f}, {68.19429779f, 47.04157257f, 1.07571495f}, {68.60830688f, 46.79536438f, 1.07453680f}, {69.02205658f, 46.56790924f, 1.07344556f}, {69.43576050f, 46.35874557f, 1.07238483f}, {69.84971619f, 46.16749573f, 1.07116473f}, {70.26420593f, 45.99373627f, 1.07012224f}, {70.67954254f, 45.83718491f, 1.06913066f}, {71.09597015f, 45.69748306f, 1.06803644f}, {71.51378632f, 45.57441330f, 1.06693065f}, {71.93328094f, 45.46771240f, 1.06585479f}, {72.35475159f, 45.37720108f, 1.06485724f}, {72.77848816f, 45.30273438f, 1.06383395f}, {73.20481873f, 45.24413300f, 1.06283319f}, {73.63399506f, 45.20130157f, 1.06175876f}, {74.06647491f, 45.17422485f, 1.06077576f}, {74.50241089f, 45.16279221f, 1.05971229f}, {74.94230652f, 45.16704178f, 1.05873311f}, {75.38639832f, 45.18695068f, 1.05777609f}, {75.83513641f, 45.22259521f, 1.05674589f}, {76.28884888f, 45.27404785f, 1.05577219f}, {76.74793243f, 45.34139252f, 1.05472553f}, {77.21282959f, 45.42482758f, 1.05378938f}, {77.68396759f, 45.52445602f, 1.05280745f}, {78.16175842f, 45.64052582f, 1.05188823f}, {78.64671326f, 45.77325439f, 1.05088282f}, {79.13935089f, 45.92296219f, 1.04991984f}, {79.64014435f, 46.08990097f, 1.04893184f}, {80.14971924f, 46.27446747f, 1.04801941f}, {80.66860199f, 46.47703552f, 1.04694116f}, {81.19738770f, 46.69801331f, 1.04605210f}, {81.73688507f, 46.93795013f, 1.04521132f}, {82.28766632f, 47.19732666f, 1.04413891f}, {82.85052490f, 47.47672653f, 1.04322803f}, {83.42632294f, 47.77680969f, 1.04234529f}, {84.01586151f, 48.09827042f, 1.04147065f}, {84.62010193f, 48.44187927f, 1.04055130f}, {85.24003601f, 48.80845642f, 1.03964007f}, {85.87669373f, 49.19890976f, 1.03879642f}, {86.53137970f, 49.61428452f, 1.03805268f}, {87.20519257f, 50.05561066f, 1.03725088f}, {87.89957428f, 50.52407455f, 1.03658807f}, {88.61597443f, 51.02102280f, 1.03594577f}, {89.35607910f, 51.54785919f, 1.03554642f}, {90.12166595f, 52.10612869f, 1.04301548f}, {90.91455078f, 52.69752121f, 1.06998253f}, {91.73693085f, 53.32393646f, 1.09930956f}, {92.15794373f, 53.64936447f, 1.11483085f}, {91.81518555f, 53.71981812f, 1.11151826f}, {91.47278595f, 53.80767822f, 1.10845006f}, {91.13050842f, 53.91312408f, 1.10553312f}, {90.78815460f, 54.03631592f, 1.10283923f}, {90.44548035f, 54.17744064f, 1.10032105f}, {90.10229492f, 54.33672714f, 1.09803510f}, {89.75833893f, 54.51452637f, 1.09587574f}, {89.41342163f, 54.71106720f, 1.09380531f}, {89.06729126f, 54.92667007f, 1.09191728f}, {88.71974182f, 55.16178131f, 1.09013009f}, {88.37052155f, 55.41675186f, 1.08847165f}, {88.01938629f, 55.69206619f, 1.08687592f}, {87.66613007f, 55.98822784f, 1.08539987f}, {87.31044006f, 56.30573654f, 1.08402109f}, {86.95207977f, 56.64521027f, 1.08269572f}, {86.59083557f, 57.00727844f, 1.08145225f}, {86.22635651f, 57.39260483f, 1.08030427f}, {85.85842133f, 57.80199051f, 1.07917988f}, {85.48668671f, 58.23624039f, 1.07815003f}, {85.11089325f, 58.69614792f, 1.07715774f}, {84.73071289f, 59.18270493f, 1.07625210f}, {84.34579468f, 59.69696426f, 1.07535493f}, {83.95580292f, 60.23994064f, 1.07459307f}, {83.56039429f, 60.81284714f, 1.07382548f}, {83.15916443f, 61.41700745f, 1.07313621f}, {82.75171661f, 62.05379105f, 1.07244790f}, {82.33765411f, 62.72458649f, 1.07185853f}, {81.91649628f, 63.43118668f, 1.07126284f}, {81.48780823f, 64.17515564f, 1.07077956f}, {81.05107880f, 64.95851898f, 1.07026899f}, {80.60575867f, 65.78321838f, 1.06983578f}, {80.15129852f, 66.65161133f, 1.06941676f}, {79.68713379f, 67.56595612f, 1.06904697f}, {79.21257019f, 68.52908325f, 1.06878197f}, {78.72694397f, 69.54360962f, 1.06848919f}, {78.95340729f, 67.38005829f, 1.06542504f}, {79.17848969f, 65.37351990f, 1.06261957f}, {79.40175629f, 63.50858307f, 1.06002080f}, {79.62284851f, 61.77164459f, 1.05760539f}, {79.84157562f, 60.15079117f, 1.05533016f}, {80.04192352f, 58.74380875f, 1.05340314f}, {80.24000549f, 57.42024612f, 1.05157757f}, {80.43576813f, 56.17368317f, 1.04986608f}, {80.62917328f, 54.99811554f, 1.04821372f}, {80.82021332f, 53.88854599f, 1.04672039f}, {81.00892639f, 52.83991241f, 1.04527128f}, {81.19535828f, 51.84829330f, 1.04392600f}, {81.37950134f, 50.90968323f, 1.04262388f}, {81.56146240f, 50.02048111f, 1.04139793f}, {81.74128723f, 49.17765427f, 1.04026711f}, {81.91902924f, 48.37833405f, 1.03917193f}, {82.09475708f, 47.61979294f, 1.03817105f}, {82.26859283f, 46.89959717f, 1.03720498f}, {82.44055939f, 46.21558380f, 1.03627336f}, {82.61077118f, 45.56564331f, 1.03540897f}, {82.77928925f, 44.94807816f, 1.03454590f}, {82.94621277f, 44.36102295f, 1.03374946f}, {83.11161804f, 43.80295944f, 1.03303266f}, {83.27558899f, 43.27243805f, 1.03232312f}, {83.43820190f, 42.76809311f, 1.03162110f}, {83.59955597f, 42.28862762f, 1.03104341f}, {83.75971985f, 41.83307648f, 1.03036249f}, {83.91878510f, 41.40017319f, 1.02985728f}, {84.07682037f, 40.98899078f, 1.02937198f}, {84.23392487f, 40.59871674f, 1.02882254f}, {84.39015198f, 40.22829819f, 1.02833188f}, {84.54561615f, 39.87723541f, 1.02787387f}, {84.70037842f, 39.54453278f, 1.02748048f}, {84.85452271f, 39.22960281f, 1.02708769f}, {85.00811768f, 38.93193436f, 1.02668214f}, {85.16123962f, 38.65074539f, 1.02634120f}, {85.31400299f, 38.38563538f, 1.02602637f}, {85.46646881f, 38.13607407f, 1.02571166f}, {85.61867523f, 37.90167618f, 1.02551901f}, {85.77077484f, 37.68177032f, 1.02527511f}, {85.92277527f, 37.47618866f, 1.02503788f}, {86.07479095f, 37.28451920f, 1.02479422f}, {86.22692108f, 37.10636139f, 1.02467239f}, {86.37920380f, 36.94144058f, 1.02458274f}, {86.53176117f, 36.78946304f, 1.02444816f}, {86.68464661f, 36.65021133f, 1.02438414f}, {86.83795166f, 36.52344513f, 1.02428174f}, {86.99176788f, 36.40890503f, 1.02426243f}, {87.14617157f, 36.30649948f, 1.02420485f}, {87.30124664f, 36.21595764f, 1.02426243f}, {87.44096375f, 36.14474869f, 1.02431369f}, {87.58136749f, 36.08295059f, 1.02434576f}, {87.72251892f, 36.03036499f, 1.02440345f}, {87.86449432f, 35.98704910f, 1.02460194f}, {87.25018311f, 35.67947006f, 1.00981843f}, {86.64775848f, 35.38789749f, 1.01011086f}, {86.05648041f, 35.11205673f, 1.01036012f}, {85.47573090f, 34.85115433f, 1.01062810f}, {84.90476990f, 34.60487747f, 1.01087749f}, {84.34314728f, 34.37270737f, 1.01112080f}, {83.79017639f, 34.15411758f, 1.01138306f}, {83.24542236f, 33.94876099f, 1.01162028f}, {82.70827484f, 33.75636292f, 1.01188898f}, {82.17832947f, 33.57648468f, 1.01210773f}, {81.65510559f, 33.40878296f, 1.01237667f}, {81.13811493f, 33.25304794f, 1.01260817f}, {80.62700653f, 33.10897446f, 1.01282728f}, {80.12127686f, 32.97633743f, 1.01307142f}, {79.62061310f, 32.85493088f, 1.01332211f}, {79.12460327f, 32.74450684f, 1.01357913f}, {78.63288879f, 32.64484024f, 1.01382375f}, {78.14512634f, 32.55589676f, 1.01404965f}, {77.66098022f, 32.47738647f, 1.01428199f}, {77.18002319f, 32.40938187f, 1.01452684f}, {76.70205688f, 32.35148621f, 1.01475942f}, {76.22671509f, 32.30391693f, 1.01498568f}, {75.75362396f, 32.26638031f, 1.01522470f}, {75.28263092f, 32.23882675f, 1.01545739f}, {74.81327820f, 32.22132492f, 1.01569033f}, {74.34534454f, 32.21379471f, 1.01593602f}, {73.87850189f, 32.21622086f, 1.01616287f}, {73.41256714f, 32.22856903f, 1.01639616f}, {72.94712830f, 32.25086975f, 1.01661682f}, {72.48194122f, 32.28318787f, 1.01687551f}, {72.01676941f, 32.32547379f, 1.01710904f}, {71.55126190f, 32.37791061f, 1.01734269f}, {71.08517456f, 32.44053650f, 1.01758289f}, {70.61825562f, 32.51344299f, 1.01781678f}, {70.15011597f, 32.59671402f, 1.01806343f}, {69.68055725f, 32.69052124f, 1.01829755f}, {69.20925140f, 32.79494095f, 1.01853800f}, {68.73590851f, 32.91016388f, 1.01879764f}, {68.26026154f, 33.03641129f, 1.01903224f}, {67.78192139f, 33.17387390f, 1.01929843f}, {67.30071259f, 33.32267761f, 1.01954579f}, {66.81617737f, 33.48321533f, 1.01979959f}, {66.32802582f, 33.65565872f, 1.02005994f}, {65.83596802f, 33.84024811f, 1.02033305f}, {65.33967590f, 34.03736496f, 1.02059364f}, {64.83872223f, 34.24732208f, 1.02085447f}, {64.33274078f, 34.47048950f, 1.02111530f}, {63.82142258f, 34.70724106f, 1.02140176f}, {63.30435181f, 34.95796967f, 1.02167571f}, {62.78108215f, 35.22319031f, 1.02196240f}, {62.25124741f, 35.50328445f, 1.02223659f}, {61.71437073f, 35.79880142f, 1.02254283f}, {61.16999435f, 36.11035919f, 1.02284276f}, {60.61766815f, 36.43850708f, 1.02314949f}, {60.05691910f, 36.78380966f, 1.02345634f}, {59.48713303f, 37.14706421f, 1.02378237f}, {58.90786743f, 37.52894974f, 1.02409601f}, {58.31848907f, 37.93022919f, 1.02443540f}, {57.71846008f, 38.35169601f, 1.02477491f}, {57.10707474f, 38.79439163f, 1.02512121f}, {56.48366928f, 39.25920486f, 1.02546120f}, {55.84765625f, 39.74710083f, 1.02583361f}, {55.19821167f, 40.25928116f, 1.02621281f}, {54.53459549f, 40.79687119f, 1.02659214f}, {53.85599899f, 41.36120605f, 1.02699101f}, {53.16160965f, 41.95354462f, 1.02739036f}, {52.45047760f, 42.57546616f, 1.02781570f}, {51.72164536f, 43.22851181f, 1.02824152f}, {50.97426224f, 43.91425323f, 1.02869344f}, {50.20708466f, 44.63470459f, 1.02914572f}, {49.41918564f, 45.39164734f, 1.02963722f}, {48.60934067f, 46.18724442f, 1.03012931f}, {47.79793167f, 47.00182724f, 1.03062177f}, {46.96344757f, 47.85739517f, 1.03114712f}, {46.10470963f, 48.75631714f, 1.03168607f}, {45.22055054f, 49.70101166f, 1.03223205f}, {44.30965042f, 50.69423676f, 1.03281760f}, {43.37090683f, 51.73866272f, 1.03342354f}, {42.40308380f, 52.83721542f, 1.03404307f}, {41.40488434f, 53.99309158f, 1.03470266f}, {41.68504333f, 53.82935333f, 1.03461778f}, {41.96573639f, 53.68075180f, 1.03453934f}, {42.24705505f, 53.54714584f, 1.03444791f}, {42.52918243f, 53.42832184f, 1.03436959f}, {42.81223297f, 53.32411575f, 1.03428459f}, {43.09635544f, 53.23440552f, 1.03420639f}, {43.38166428f, 53.15908051f, 1.03411496f}, {43.66833115f, 53.09801865f, 1.03403008f}, {43.95648956f, 53.05114746f, 1.03395832f}, {44.24629211f, 53.01840210f, 1.03386688f}, {44.53788376f, 52.99972916f, 1.03378212f}, {44.83143234f, 52.99509811f, 1.03370380f}, {45.12708664f, 53.00448608f, 1.03361905f}, {45.42500687f, 53.02790070f, 1.03353429f}, {45.72534561f, 53.06537247f, 1.03344309f}, {46.02828217f, 53.11693192f, 1.03335178f}, {46.33403015f, 53.18262482f, 1.03327358f}, {46.64273071f, 53.26252747f, 1.03318238f}, {46.95457077f, 53.35671616f, 1.03309119f}, {47.26974487f, 53.46530151f, 1.03301299f}, {47.58847809f, 53.58837891f, 1.03291535f}, {47.91093826f, 53.72614670f, 1.03282416f}, {48.23735809f, 53.87870026f, 1.03273308f}, {48.56797028f, 54.04626083f, 1.03263545f}, {48.90298080f, 54.22901917f, 1.03254437f}, {49.24265671f, 54.42713928f, 1.03244674f}, {49.58720398f, 54.64094162f, 1.03235567f}, {49.93694305f, 54.87057495f, 1.03226459f}, {50.29210281f, 55.11640930f, 1.03216052f}, {50.65295792f, 55.37873459f, 1.03205001f}, {51.01983643f, 55.65780258f, 1.03195894f}, {51.39302444f, 55.95403290f, 1.03184843f}, {51.77287292f, 56.26776886f, 1.03174448f}, {52.15968323f, 56.59934998f, 1.03164709f}, {52.55383301f, 56.94928360f, 1.03154325f}, {52.95569229f, 57.31803131f, 1.03142631f}, {53.36565399f, 57.70595551f, 1.03132236f}, {53.78411865f, 58.11364746f, 1.03120553f}, {54.21154022f, 58.54164505f, 1.03108227f}, {54.64836502f, 58.99052048f, 1.03096557f}, {55.09506989f, 59.46084213f, 1.03084874f}, {55.55217361f, 59.95336533f, 1.03072548f}, {56.02019501f, 60.46860123f, 1.03059578f}, {56.49969101f, 61.00738144f, 1.03047264f}, {56.99130249f, 61.57057190f, 1.03033018f}, {57.49561691f, 62.15878677f, 1.03020060f}, {58.01336288f, 62.77299118f, 1.03005803f}, {58.54520035f, 63.41410828f, 1.02992201f}, {59.09188461f, 64.08309174f, 1.02977312f}, {59.65422821f, 64.78095245f, 1.02961779f}, {60.23307419f, 65.50881958f, 1.02946901f}, {60.82934189f, 66.26774597f, 1.02930737f}, {61.44395447f, 67.05900574f, 1.02994156f}, {62.07797623f, 67.88393402f, 1.04204702f}, {62.73248672f, 68.74389648f, 1.05414188f}, {63.40860748f, 69.64015961f, 1.06627095f}, {64.10759735f, 70.57458496f, 1.07859015f}, {64.83077240f, 71.54849243f, 1.09103012f}, {64.36103058f, 71.40255737f, 1.09230304f}, {63.90140152f, 71.27340698f, 1.09361541f}, {63.45158768f, 71.16056061f, 1.09490180f}, {63.01127243f, 71.06360626f, 1.09615445f}, {62.58016205f, 70.98188019f, 1.09736586f}, {62.15804291f, 70.91506958f, 1.09863889f}, {61.74467850f, 70.86270142f, 1.09987056f}, {61.33982086f, 70.82427216f, 1.10115659f}, {60.92950058f, 70.79872131f, 1.10240149f}, {60.52791977f, 70.78717804f, 1.10363412f}, {60.13491058f, 70.78912354f, 1.10484707f}, {59.75033569f, 70.80417633f, 1.10613763f}, {59.37406540f, 70.83181763f, 1.10735631f}, {59.00598145f, 70.87167358f, 1.10858512f}, {58.64598846f, 70.92313385f, 1.10977149f}, {58.29397583f, 70.98587799f, 1.11095297f}, {57.94990158f, 71.05944824f, 1.11214435f}, {57.61368942f, 71.14333344f, 1.11333084f}, {57.28528976f, 71.23706818f, 1.11447442f}, {56.96467590f, 71.34037018f, 1.11558235f}, {56.65180588f, 71.45270538f, 1.11670768f}, {56.34666061f, 71.57365417f, 1.11788118f}, {56.04919052f, 71.70285797f, 1.11892700f}, {55.75944138f, 71.83985138f, 1.12001324f}, {55.47735596f, 71.98430634f, 1.12109387f}, {55.20295334f, 72.13582611f, 1.12208426f}};

// Extra functions not from OCIO

typedef struct
{
    float3 x;
    float3 y;
    float3 z;
} float3x3;

__DEVICE__ inline float3 vecmul( float3x3 m, float3 v)
{
    float3 r;

    r.x = m.x.x * v.x + m.y.x * v.y + m.z.x * v.z;
    r.y = m.x.y * v.x + m.y.y * v.y + m.z.y * v.z;
    r.z = m.x.z * v.x + m.y.z * v.y + m.z.z * v.z;
    
    return r;
}

__DEVICE__ inline float vecdot( float3 a, float3 b)
{   
    return a.x*b.x + a.y*b.y + a.z*b.z;
}

__DEVICE__ inline float3 maxf3(float3 a, float b)
{
    float3 c;

    c.x = _fmaxf(a.x, b);
    c.y = _fmaxf(a.y, b);
    c.z = _fmaxf(a.z, b);

    return c;
}

__DEVICE__ inline float3 minf3(float3 a, float b)
{
    float3 c;

    c.x = _fminf(a.x, b);
    c.y = _fminf(a.y, b);
    c.z = _fminf(a.z, b);

    return c;
}

__DEVICE__ inline float3 powf3(float3 a, float b)
{
    a.x = _powf(a.x, b);
    a.y = _powf(a.y, b);
    a.z = _powf(a.z, b);

    return a;
}

__DEVICE__ inline float3 absf3(float3 a)
{
    a.x = _fabs(a.x);
    a.y = _fabs(a.y);
    a.z = _fabs(a.z);

    return a;
}

__DEVICE__ inline float3 signf3(float3 a)
{
    a.x = _copysignf(1.0f, a.x);
    a.y = _copysignf(1.0f, a.y);
    a.z = _copysignf(1.0f, a.z);

    return a;
}

// OCIO functions

__DEVICE__ float ocio_reach_m_table_0_sample(float h)
{
  int i_base = (int)_floorf(h);
  int i_lo = i_base + 1;
  int i_hi = i_lo + 1;
  float lo = ocio_reach_m_table_0[i_lo];
  float hi = ocio_reach_m_table_0[i_hi];
  float t = h - i_base;
  return _mix(lo, hi, t);
}

__DEVICE__ float ocio_tonescale_fwd0(float J)
{
  float A = 0.0323680267f * _powf(_fabs(J) * 0.00999999978f, 0.879464149f);
  float Y = _powf(( 27.1299992f * A) / (1.0f - A), 2.3809523809523809f);
  float f = 1.04710376f * _powf(Y / (Y + 0.73009213709383403f), 1.14999998f);
  float Y_ts = max(0.0f, f * f / (f + 0.0399999991f));
  float F_L_Y = _powf(0.79370057210326195f * Y_ts, 0.42f);
  float J_ts = 100. * _powf((F_L_Y / ( 27.1299992f + F_L_Y)) * 30.8946857f, 1.13705599f);
  return J_ts;
}

__DEVICE__ float ocio_toe_fwd0(float x, float limit, float k1_in, float k2_in)
{
  float k2 = max(k2_in, 0.001f);
  float k1 = _sqrtf(k1_in * k1_in + k2 * k2);
  float k3 = (limit + k1) / (limit + k2);
  return (x > limit) ? x : 0.5f * (k3 * x - k1 + _sqrtf((k3 * x - k1) * (k3 * x - k1) + 4.0f * k2 * k3 * x));
}

__DEVICE__ float3 ocio_gamut_cusp_table_0_sample(float h)
{
  int i = int(h) + 1;
  int i_lo = int(max(float(0), float(i + 0)));
  int i_hi = int(min(float(361), float(i + 2)));
  while (i_lo + 1 < i_hi)
  {
    float hcur = ocio_gamut_cusp_table_0_hues_array[i];
    if (h > hcur)
    {
      i_lo = i;
    }
    else
    {
      i_hi = i;
    }
    i = (i_lo + i_hi) / 2;
  }
  float3 lo = ocio_gamut_cusp_table_0[i_hi - 1];
  float3 hi = ocio_gamut_cusp_table_0[i_hi];
  float t = (h - ocio_gamut_cusp_table_0_hues_array[i_hi - 1]) / (ocio_gamut_cusp_table_0_hues_array[i_hi] - ocio_gamut_cusp_table_0_hues_array[i_hi - 1]);
  return _mix(lo, hi, t);
}

__DEVICE__ float ocio_get_focus_gain0(float J, float cuspJ)
{
  float thr = mix(cuspJ, 100.000000f, 0.300000f);
  if (J > thr)
  {
    float gain = ( 100.f - thr) / max(0.0001f, 100.f - J);
    gain = _logf(gain)/_logf(10.0f);
    return gain * gain + 1.0f;
  }
  else
  {
    return 1.0f;
  }
}

__DEVICE__ float ocio_solve_J_intersect0(float J, float M, float focusJ, float slope_gain)
{
  float M_scaled = M / slope_gain;
  float a = M_scaled / focusJ;
  if (J < focusJ)
  {
    float b = 1.0f - M_scaled;
    float c = -J;
    float det =  b * b - 4.f * a * c;
    float root =  _sqrtf(det);
    return -2.0f * c / (b + root);
  }
  else
  {
    float b = - (1.0f + M_scaled + 100.f * a);
    float c = 100.f * M_scaled + J;
    float det =  b * b - 4.f * a * c;
    float root =  _sqrtf(det);
    return -2.0f * c / (b - root);
  }
}

__DEVICE__ float ocio_find_gamut_boundary_intersection0(float2 JM_cusp, float gamma_top_inv, float gamma_bottom_inv, float J_intersect_source, float J_intersect_cusp, float slope)
{
  float M_boundary_lower = J_intersect_cusp * _powf(J_intersect_source / J_intersect_cusp, gamma_bottom_inv) / (JM_cusp.r / JM_cusp.g - slope);
  float M_boundary_upper = JM_cusp.g * (100.f - J_intersect_cusp) * _powf((100.f - J_intersect_source) / (100.f - J_intersect_cusp), gamma_top_inv) / (slope * JM_cusp.g + 100.f - JM_cusp.r);
  float smin = 0.0f;
  {
    float a = M_boundary_lower;
    float b = M_boundary_upper;
    float s = 0.119999997f * JM_cusp.g;
    float h = max(s - _fabs(a - b), 0.0f) / s;
    smin = min(a, b) - h * h * h * s * 0.16666666666666666f;
  }
  return smin;
}

__DEVICE__ float ocio_remap_M_fwd0(float M, float gamut_boundary_M, float reach_boundary_M)
{
  float boundary_ratio = gamut_boundary_M / reach_boundary_M;
  float proportion = max(boundary_ratio, 0.75f);
  float threshold = proportion * gamut_boundary_M;
  if (proportion >= 1.0f || M <= threshold)
  {
    return M;
  }
  float m_offset = M - threshold;
  float gamut_offset = gamut_boundary_M - threshold;
  float reach_offset = reach_boundary_M - threshold;
  float scale = reach_offset / ((reach_offset / gamut_offset) - 1.0f);
  float nd = m_offset / scale;
  return threshold + scale * nd / (1.0f + nd);
}

__DEVICE__ float3 ocio_gamut_compress0(float3 JMh, float Jx, float3 JMGcusp, float reachMaxM)
{
  float J = JMh.r;
  float M = JMh.g;
  float h = JMh.b;
  if (M <= 0.0f || J > 100.f)
  {
    return float3(J, 0.0f, h);
  }
  else
  {
    float2 JMcusp = JMGcusp.rg;
    float focusJ = mix(JMcusp.r, 34.096539f, min(1.0f, 1.300000f - (JMcusp.r / 100.000000f)));
    float slope_gain = 135.f * ocio_get_focus_gain0(Jx, JMcusp.r);
    float J_intersect_source = ocio_solve_J_intersect0(JMh.r, JMh.g, focusJ, slope_gain);
    float gamut_slope = (J_intersect_source < focusJ) ? J_intersect_source : (100.f - J_intersect_source);
    gamut_slope = gamut_slope * (J_intersect_source - focusJ) / (focusJ * slope_gain);
    float gamma_top_inv = JMGcusp.b;
    float gamma_bottom_inv = 0.877192974f;
    float J_intersect_cusp = ocio_solve_J_intersect0(JMcusp.r, JMcusp.g, focusJ, slope_gain);
    float gamutBoundaryM = ocio_find_gamut_boundary_intersection0(JMcusp, gamma_top_inv, gamma_bottom_inv, J_intersect_source, J_intersect_cusp, gamut_slope);
    if (gamutBoundaryM <= 0.0f)
    {
      return float3(J, 0.0f, h);
    }
    float reachBoundaryM = 100.f * _powf(J_intersect_source / 100.f,  0.879464149f);
    reachBoundaryM = reachBoundaryM / ((100.f / reachMaxM) - gamut_slope);
    float remapped_M = ocio_remap_M_fwd0(M, gamutBoundaryM, reachBoundaryM);
    float remapped_J = J_intersect_source + remapped_M * gamut_slope;
    return make_float3(remapped_J, remapped_M, h);
  }
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
{
  float3 inPixel = make_float3(p_R, p_G, p_B);
  float3 outColor = inPixel;
    
  // Add Matrix processing

  {
    outColor = vecmul({{1.4514393161456653f, -0.07655377339602043f, 0.008316148425697719f}, {-0.23651074689374019f, 1.1762296998335731f, -0.0060324497910210278f}, {-0.21492856925192524f, -0.099675926437552201f, 0.9977163013653233f}}, outColor);
  }

  // Add Range processing

  {
    outColor = maxf3(outColor, 0.f);
    outColor = minf3(outColor, 1024.f);
  }

  // Add Matrix processing

  {
    outColor = vecmul({{0.69545224135745176f, 0.044794563372037632f, -0.0055258825581135443f}, {0.14067869647029416f, 0.85967111845642163f, 0.0040252103059786586f}, {0.16386906217225403f, 0.095534318171540358f, 1.0015006722521349f}}, outColor);
  }

  // Add FixedFunction 'ACES_OutputTransform20 (Forward)' processing
  
  {
    
    // Add RGB to JMh

    float3 Aab;
    {
      {
        float3 lms = vecmul({{0.445181042f, 0.123734146f, 0.0117007261f}, {0.34964928f, 0.613643706f, 0.0280607939f}, {-0.00112973212f, 0.0563228019f, 0.753939033f}}, outColor);
        float3 F_L_v = powf3(absf3(lms), 0.419999987f);
        float3 rgb_a = (signf3(lms) * F_L_v) / ( 27.1299992f + F_L_v);
        Aab = vecmul({{20.25881f, 15480.f, 1720.f}, {10.129405f, -16887.2734f, 1720.f}, {0.506470263f, 1407.27271f, -3440.f}}, rgb_a);
      }
      {
        float J = 100.f * _powf(Aab.r, 1.13705599f);
        float M = (J == 0.0f) ? 0.0f : _sqrtf(Aab.g * Aab.g + Aab.b * Aab.b);
        float h = (Aab.g == 0.0f) ? 0.0f : _atan2f(Aab.b, Aab.g) * 57.29577951308238f;
        h = h - _floorf(h / 360.0f) * 360.0f;
        h = (h < 0.0f) ? h + 360.0f : h;
        outColor = make_float3(J, M, h);
      }
    }
    float h_rad = outColor.b * 0.0174532924f;
    float cos_hr = _cosf(h_rad);
    float sin_hr = _sinf(h_rad);

    // Add ToneScale and ChromaCompress (fwd)
    
    float J_ts = ocio_tonescale_fwd0(outColor.r);
    // Sample tables (fwd)
    float reachMaxM = ocio_reach_m_table_0_sample(outColor.b);

    {
      float J = outColor.r;
      float M = outColor.g;
      float h = outColor.b;
      float M_cp = M;
      if (M != 0.0f)
      {
        float nJ = J_ts / 100.f;
        float snJ = max(0.0f, 1.0f - nJ);
        float Mnorm;
        {
          float cos_hr2 = 2.0f * cos_hr * cos_hr - 1.0f;
          float sin_hr2 = 2.0f * cos_hr * sin_hr;
          float cos_hr3 = 4.0f * cos_hr * cos_hr * cos_hr - 3.0f * cos_hr;
          float sin_hr3 = 3.0f * sin_hr - 4.0f * sin_hr * sin_hr * sin_hr;
          float3 cosines = make_float3(cos_hr, cos_hr2, cos_hr3);
          float3 cosine_weights = float3(11.341321604032515f, 16.469863649185896f, 7.8842182208776475f);
          float3 sines = float3(sin_hr, sin_hr2, sin_hr3);
          float3 sine_weights = float3(14.665187919584513f, -6.3725780354404442f, 9.1941277054452897f);
          Mnorm = vecdot(cosines, cosine_weights) + vecdot(sines, sine_weights) + 77.133051547393805f;
        }
        float limit = _powf(nJ, 0.879464149f) * reachMaxM / Mnorm;
        M_cp = M * _powf(J_ts / J, 0.879464149f);
        M_cp = M_cp / Mnorm;
        M_cp = limit - ocio_toe_fwd0(limit - M_cp, limit - 0.001f, snJ * 1.29999995f, _sqrtf(nJ * nJ + 0.00499999989f));
        M_cp = ocio_toe_fwd0(M_cp, limit, nJ * 2.4000001f, snJ);
        M_cp = M_cp * Mnorm;
      }
      outColor = make_float3(J_ts, M_cp, h);
    }

    // Add GamutCompress (fwd)
    
    {
      float3 JMGcusp = ocio_gamut_cusp_table_0_sample(outColor.b);
      outColor = ocio_gamut_compress0(outColor, outColor.r, JMGcusp, reachMaxM);
    }

    // Add JMh to RGB
    
    {
      float3 JMh = outColor;
      float3 Aab;
      {
        Aab.r = _powf(JMh.r * 0.00999999978f, 0.879464149f);
        Aab.g = JMh.g * cos_hr;
        Aab.b = JMh.g * sin_hr;
      }
      {
        float3 rgb_a = vecmul({{0.0323680267f, 0.0323680267, 0.0323680267f}, {2.07657631e-05f, -4.10250432e-05f, -1.01296409e-05f}, {1.3260621e-05f, -1.20174373e-05f, -0.000290076074f}}, Aab);
        float3 lms = signf3(rgb_a) * powf3( 27.1299992f * absf3(rgb_a) / (1.0f - absf3(rgb_a)), 2.38095236f);
        outColor = vecmul({{7.09727955f, -1.47939813f, 0.0115827117f}, {-5.78375864f, 3.09762168f, -0.343844742f}, {-0.0536001846f, -0.358302563f, 1.59218299f}}, lms);
      }
    }
  }

  // Add Range processing
  
  {
    outColor = maxf3(outColor, 0.f);
    outColor = minf3(outColor, 1.f);
  }

  // Add Matrix processing
  
  {
    outColor *= make_float3(1.f, 0.949804485f, 0.874143481f);
  }
  

  // Add Gamma 'monCurveRev' processing
  
  {
    outColor.x = outColor.x <= 0.00303993467f ? 12.9232101f * outColor.x : 1.05499995f * _powf(outColor.x, 0.416666657f) - 0.05499995f;
    outColor.y = outColor.y <= 0.00303993467f ? 12.9232101f * outColor.y : 1.05499995f * _powf(outColor.y, 0.416666657f) - 0.05499995f;
    outColor.z = outColor.z <= 0.00303993467f ? 12.9232101f * outColor.z : 1.05499995f * _powf(outColor.z, 0.416666657f) - 0.05499995f;
  }

  return outColor;
}

