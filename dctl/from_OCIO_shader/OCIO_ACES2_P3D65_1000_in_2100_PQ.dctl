// DEFINE_ACES_PARAM(IS_PARAMETRIC_ACES_TRANSFORM: 0, OUTPUT_COLORSPACE_TAG: Rec2020_1000nits_15nits_ST2084)

// Declaration of tables

__CONSTANT__ float ocio_gamut_cusp_table_0_hues_array[362] = {-1.00411987f, 0.f, 0.996928871f, 1.99385774f, 2.99078655f, 3.98771548f, 4.98464441f, 5.9815731f, 6.97850227f, 7.97543097f, 8.97235966f, 9.96928883f, 10.966218f, 11.9631462f, 12.9600754f, 13.9570045f, 14.9539328f, 15.9508619f, 16.9477901f, 17.9447193f, 18.9416485f, 19.9385777f, 20.9355068f, 21.932436f, 22.9293633f, 23.9262924f, 24.9232216f, 25.9201508f, 26.8787594f, 27.837368f, 28.7959766f, 29.8027439f, 30.8095112f, 31.8162766f, 32.8230438f, 33.8298111f, 34.8365784f, 35.8433456f, 36.8501129f, 37.8568802f, 38.8636475f, 39.8704147f, 40.877182f, 41.8839455f, 42.8907127f, 43.89748f, 44.9042473f, 45.9110146f, 46.9177818f, 47.9245453f, 48.9313126f, 49.9380798f, 50.9448471f, 51.9516144f, 52.9583817f, 53.9651489f, 54.9719162f, 55.9786835f, 56.9854507f, 57.992218f, 58.9989853f, 60.0057526f, 61.0125198f, 62.0192871f, 63.0260544f, 64.0328217f, 65.0395889f, 66.0463562f, 67.0531158f, 68.0598831f, 69.0666504f, 70.0734177f, 71.0801849f, 72.0869522f, 73.0937195f, 74.1004868f, 75.107254f, 76.1140213f, 77.1207886f, 78.1275558f, 79.1343231f, 80.1410904f, 81.1478577f, 82.1546249f, 83.1613922f, 84.1681595f, 85.1749268f, 86.181694f, 87.1884613f, 88.1952209f, 89.2019882f, 90.2087555f, 91.2155228f, 92.22229f, 93.2290573f, 94.2358246f, 95.2425919f, 96.2493591f, 97.2561264f, 98.2628937f, 99.2696609f, 100.276428f, 101.283195f, 102.289963f, 103.29673f, 104.30349f, 105.310257f, 106.317024f, 107.344032f, 108.321091f, 109.298157f, 110.275215f, 111.252274f, 112.229332f, 113.206398f, 114.183456f, 115.160515f, 116.137581f, 117.114639f, 118.091698f, 119.068756f, 120.045822f, 121.022881f, 121.999939f, 122.977005f, 123.954063f, 124.931122f, 125.908188f, 126.885246f, 127.862305f, 128.839371f, 129.816422f, 130.793488f, 131.770554f, 132.747604f, 133.72467f, 134.701721f, 135.678787f, 136.655853f, 137.632904f, 138.60997f, 139.587036f, 140.564087f, 141.541153f, 142.538528f, 143.535889f, 144.533264f, 145.530624f, 146.528f, 147.542053f, 148.556107f, 149.570145f, 150.584198f, 151.598251f, 152.612305f, 153.626358f, 154.640411f, 155.654449f, 156.668503f, 157.682556f, 158.696609f, 159.710663f, 160.724701f, 161.738754f, 162.752808f, 163.766861f, 164.780914f, 165.794968f, 166.809006f, 167.823059f, 168.837112f, 169.851166f, 170.865219f, 171.879272f, 172.893311f, 173.907364f, 174.921417f, 175.935471f, 176.949524f, 177.963562f, 178.977615f, 179.991669f, 181.005722f, 182.019775f, 183.033813f, 184.047867f, 185.06192f, 186.075974f, 187.090027f, 188.10408f, 189.118134f, 190.132172f, 191.146225f, 192.160278f, 192.967346f, 193.774414f, 194.581482f, 195.585876f, 196.590256f, 197.59465f, 198.59903f, 199.603424f, 200.607819f, 201.612198f, 202.616592f, 203.620972f, 204.625366f, 205.629761f, 206.63414f, 207.638535f, 208.642914f, 209.647308f, 210.651703f, 211.656082f, 212.660477f, 213.664871f, 214.66925f, 215.673645f, 216.678024f, 217.682419f, 218.686813f, 219.691193f, 220.695587f, 221.699982f, 222.704361f, 223.708755f, 224.713135f, 225.717529f, 226.721924f, 227.726303f, 228.730698f, 229.735077f, 230.739471f, 231.743866f, 232.748245f, 233.75264f, 234.757019f, 235.761414f, 236.765808f, 237.770187f, 238.774582f, 239.778961f, 240.783356f, 241.78775f, 242.79213f, 243.796524f, 244.800903f, 245.805298f, 246.809692f, 247.814072f, 248.818466f, 249.822845f, 250.82724f, 251.831635f, 252.836014f, 253.840408f, 254.844788f, 255.849182f, 256.853577f, 257.857971f, 258.862366f, 259.86673f, 260.871124f, 261.875519f, 262.879913f, 263.884277f, 264.888672f, 265.893066f, 266.897461f, 267.890686f, 268.883942f, 269.877167f, 270.870422f, 271.863647f, 272.856903f, 273.850128f, 274.843384f, 275.836609f, 276.843658f, 277.850739f, 278.857788f, 279.864868f, 280.871918f, 281.878998f, 282.886047f, 283.893127f, 284.900177f, 285.907257f, 286.914307f, 287.921387f, 288.928436f, 289.935486f, 290.942566f, 291.949615f, 292.956696f, 293.963745f, 294.970825f, 295.977875f, 296.984955f, 297.992004f, 298.999084f, 300.006134f, 301.013214f, 302.020264f, 303.027344f, 304.034393f, 305.041443f, 306.048523f, 307.055573f, 308.062653f, 309.069702f, 310.076782f, 311.083832f, 312.090912f, 313.097961f, 314.105042f, 315.112091f, 316.119171f, 317.126221f, 318.133301f, 319.14035f, 320.1474f, 321.15448f, 322.16153f, 323.16861f, 324.175659f, 325.182739f, 326.189789f, 327.196869f, 328.203918f, 329.210999f, 330.218048f, 331.225128f, 332.232178f, 333.239258f, 334.246307f, 335.253357f, 336.260437f, 337.204651f, 338.148834f, 339.093018f, 340.037231f, 340.981445f, 341.925629f, 342.929749f, 343.933899f, 344.938019f, 345.942169f, 346.946289f, 347.950409f, 348.954559f, 349.958679f, 350.96283f, 351.966949f, 352.971069f, 353.97522f, 354.97934f, 355.983459f, 356.98761f, 357.99173f, 358.99588f, 360.0f};

__CONSTANT__ float  ocio_reach_m_table_0[362] = {394.51293945f, 398.65112305f, 402.71606445f, 406.68334961f, 410.55297852f, 414.30664062f, 417.93823242f, 421.43554688f, 424.79858398f, 428.01513672f, 431.09130859f, 434.02099609f, 436.80419922f, 439.44702148f, 441.94946289f, 444.31762695f, 446.55761719f, 448.68164062f, 450.69580078f, 452.60620117f, 454.42504883f, 456.16455078f, 457.83691406f, 459.44824219f, 461.01074219f, 462.54272461f, 464.04418945f, 464.02587891f, 447.30224609f, 431.87866211f, 417.61474609f, 404.38842773f, 392.09594727f, 380.64575195f, 369.95239258f, 359.95483398f, 350.59204102f, 341.80908203f, 333.55102539f, 325.78735352f, 318.46923828f, 311.56616211f, 305.04760742f, 298.88305664f, 293.05419922f, 287.53662109f, 282.30590820f, 277.34375000f, 272.63793945f, 268.17016602f, 263.92211914f, 259.88769531f, 256.05468750f, 252.40478516f, 248.93188477f, 245.62988281f, 242.48657227f, 239.49584961f, 236.64550781f, 233.93554688f, 231.35986328f, 228.90625000f, 226.57470703f, 224.35302734f, 222.24731445f, 220.23925781f, 218.34106445f, 216.54052734f, 214.83154297f, 213.21411133f, 211.68212891f, 210.24169922f, 208.88061523f, 207.59887695f, 206.39648438f, 205.27343750f, 204.21752930f, 203.24096680f, 202.33154297f, 201.48925781f, 200.72021484f, 200.01220703f, 199.37744141f, 198.80371094f, 198.29101562f, 197.83935547f, 197.45483398f, 197.13134766f, 196.86279297f, 196.66137695f, 196.51489258f, 196.43554688f, 196.41113281f, 196.44775391f, 196.54541016f, 196.69799805f, 196.91772461f, 197.19238281f, 197.53417969f, 197.93090820f, 198.39477539f, 198.91967773f, 199.51171875f, 200.16479492f, 200.88500977f, 201.67236328f, 202.52685547f, 203.44848633f, 204.44335938f, 205.51147461f, 206.65283203f, 207.87353516f, 209.16748047f, 210.54687500f, 212.01171875f, 213.55590820f, 215.19165039f, 216.91894531f, 218.74389648f, 220.66650391f, 222.69287109f, 224.82299805f, 227.06298828f, 229.42504883f, 231.90307617f, 234.50927734f, 237.24975586f, 240.12451172f, 243.14575195f, 246.31958008f, 249.65820312f, 253.16162109f, 256.84814453f, 260.72387695f, 264.80102539f, 269.09179688f, 273.60839844f, 278.36303711f, 283.37402344f, 288.65966797f, 294.23217773f, 300.12207031f, 306.34765625f, 312.93945312f, 319.91577148f, 327.31323242f, 335.16235352f, 343.50585938f, 343.71948242f, 334.78393555f, 326.34887695f, 318.37768555f, 310.83374023f, 303.68652344f, 296.91772461f, 290.49682617f, 284.39331055f, 278.60107422f, 273.08959961f, 267.84667969f, 262.85400391f, 258.09936523f, 253.57055664f, 249.24926758f, 245.12329102f, 241.19262695f, 237.43286133f, 233.85009766f, 230.42602539f, 227.14843750f, 224.02343750f, 221.03271484f, 218.17626953f, 215.44189453f, 212.83569336f, 210.33935547f, 207.95288086f, 205.67016602f, 203.49121094f, 201.40991211f, 199.42016602f, 197.52197266f, 195.71533203f, 193.98193359f, 192.33398438f, 190.76538086f, 189.27612305f, 187.85400391f, 186.50512695f, 185.22338867f, 184.00878906f, 182.85522461f, 181.76879883f, 180.74340820f, 179.77905273f, 178.87573242f, 178.02734375f, 177.23388672f, 176.49536133f, 175.81176758f, 175.18310547f, 174.60327148f, 174.07836914f, 173.60229492f, 173.17504883f, 172.79663086f, 172.46704102f, 172.19238281f, 171.96044922f, 171.77734375f, 171.63696289f, 171.55151367f, 171.50878906f, 171.51489258f, 171.56982422f, 171.66748047f, 171.81396484f, 172.00927734f, 172.25341797f, 172.54028320f, 172.88208008f, 173.26660156f, 173.70605469f, 174.18823242f, 174.72534180f, 175.31127930f, 175.95214844f, 176.64184570f, 177.38647461f, 178.18603516f, 179.04052734f, 179.94995117f, 180.92041016f, 181.94580078f, 183.03833008f, 184.18579102f, 185.40039062f, 186.67602539f, 188.02490234f, 189.43481445f, 190.92407227f, 192.48046875f, 194.11010742f, 195.82519531f, 197.61352539f, 199.48730469f, 201.44653320f, 203.49121094f, 205.63354492f, 207.86743164f, 210.20507812f, 212.64038086f, 215.18554688f, 217.84667969f, 220.61767578f, 223.51074219f, 226.53198242f, 229.68139648f, 232.96508789f, 236.39526367f, 239.97802734f, 243.71337891f, 247.61352539f, 251.68457031f, 255.93261719f, 260.36987305f, 265.00244141f, 269.84252930f, 274.13940430f, 271.96655273f, 269.89135742f, 267.91992188f, 266.05224609f, 264.27612305f, 262.59155273f, 260.99853516f, 259.49096680f, 258.07495117f, 256.73828125f, 255.48706055f, 254.30908203f, 253.21655273f, 252.19726562f, 251.25122070f, 250.38452148f, 249.58496094f, 248.85864258f, 248.19946289f, 247.61352539f, 247.09472656f, 246.64306641f, 246.25854492f, 245.94116211f, 245.69091797f, 245.50170898f, 245.37963867f, 245.32470703f, 245.33081055f, 245.40405273f, 245.53833008f, 245.73974609f, 246.00219727f, 246.33178711f, 246.72241211f, 247.18017578f, 247.70507812f, 248.29101562f, 248.94409180f, 249.67041016f, 250.45776367f, 251.31225586f, 252.23388672f, 253.22875977f, 254.29077148f, 255.41992188f, 256.62841797f, 257.90405273f, 259.25292969f, 260.67504883f, 262.17651367f, 263.75732422f, 265.41137695f, 267.14477539f, 268.96362305f, 270.86181641f, 272.83935547f, 274.90844727f, 277.05688477f, 279.29687500f, 281.62231445f, 284.03930664f, 286.54174805f, 289.14184570f, 291.83349609f, 294.62280273f, 297.49755859f, 300.47607422f, 303.54614258f, 306.71386719f, 309.97314453f, 313.33007812f, 316.77856445f, 320.32470703f, 323.95629883f, 327.67944336f, 331.48803711f, 335.38208008f, 339.34936523f, 343.38989258f, 347.49755859f, 351.66625977f, 355.88378906f, 360.14404297f, 364.44091797f, 368.76220703f, 373.09570312f, 377.42919922f, 381.75048828f, 386.04736328f, 390.30761719f, 394.51293945f, 398.65112305f};

__CONSTANT__ float3  ocio_gamut_cusp_table_0[362] = {{165.59550476f, 210.20629883f, 1.11851442f}, {164.61743164f, 211.09878540f, 1.11979890f}, {163.67593384f, 211.98735046f, 1.12102473f}, {162.76435852f, 212.87646484f, 1.12229931f}, {161.88294983f, 213.76368713f, 1.12350762f}, {161.03201294f, 214.64718628f, 1.12470305f}, {160.21171570f, 215.52513123f, 1.12587786f}, {159.42227173f, 216.39595032f, 1.12701631f}, {158.66377258f, 217.25833130f, 1.12814951f}, {157.93621826f, 218.11090088f, 1.12923026f}, {157.23948669f, 218.95294189f, 1.13030517f}, {156.57348633f, 219.78382874f, 1.13133550f}, {155.93797302f, 220.60333252f, 1.13232064f}, {155.33262634f, 221.41122437f, 1.13328397f}, {154.75708008f, 222.20750427f, 1.13422537f}, {154.21084595f, 222.99319458f, 1.13512921f}, {153.69338989f, 223.76863098f, 1.13598692f}, {153.20416260f, 224.53529358f, 1.13682246f}, {152.74241638f, 225.29396057f, 1.13764358f}, {152.30751038f, 226.04660034f, 1.13842607f}, {151.89869690f, 226.79475403f, 1.13920176f}, {151.51512146f, 227.54042053f, 1.13989127f}, {151.15592957f, 228.28564453f, 1.14057386f}, {150.82037354f, 229.03273010f, 1.14127302f}, {150.50749207f, 229.78410339f, 1.14190924f}, {150.21647644f, 230.54219055f, 1.14249051f}, {149.94638062f, 231.30982971f, 1.14309633f}, {149.69631958f, 232.08975220f, 1.14367080f}, {149.47392273f, 232.85383606f, 1.14417398f}, {149.26841736f, 233.63453674f, 1.14466953f}, {149.07902527f, 234.43449402f, 1.14513361f}, {150.88478088f, 228.41018677f, 1.14207649f}, {152.63114929f, 222.81848145f, 1.13921762f}, {154.32356262f, 217.61410522f, 1.13650703f}, {155.96675110f, 212.75872803f, 1.13390362f}, {157.56472778f, 208.21949768f, 1.13149953f}, {159.12112427f, 203.96823120f, 1.12917566f}, {160.63919067f, 199.98025513f, 1.12695444f}, {162.12179565f, 196.23393250f, 1.12481117f}, {163.57162476f, 192.71020508f, 1.12276089f}, {164.99102783f, 189.39218140f, 1.12084830f}, {166.38220215f, 186.26506042f, 1.11894226f}, {167.74717712f, 183.31530762f, 1.11713421f}, {169.08782959f, 180.53082275f, 1.11537731f}, {170.40585327f, 177.90098572f, 1.11372447f}, {171.70295715f, 175.41606140f, 1.11208403f}, {172.98063660f, 173.06700134f, 1.11045599f}, {174.24024963f, 170.84608459f, 1.10893023f}, {175.48320007f, 168.74600220f, 1.10745358f}, {176.71070862f, 166.75991821f, 1.10599577f}, {177.92401123f, 164.88212585f, 1.10454929f}, {179.12429810f, 163.10690308f, 1.10324752f}, {180.31259155f, 161.42922974f, 1.10191953f}, {181.48991394f, 159.84460449f, 1.10061669f}, {182.65737915f, 158.34872437f, 1.09933174f}, {183.81587219f, 156.93765259f, 1.09809399f}, {184.96635437f, 155.60791016f, 1.09685159f}, {186.10971069f, 154.35618591f, 1.09564865f}, {187.24687195f, 153.17955017f, 1.09445560f}, {188.37866211f, 152.07505798f, 1.09340382f}, {189.50588989f, 151.04031372f, 1.09225214f}, {190.62942505f, 150.07298279f, 1.09116101f}, {191.75009155f, 149.17091370f, 1.09005749f}, {192.86859131f, 148.33207703f, 1.08897805f}, {193.98582458f, 147.55487061f, 1.08800173f}, {195.10249329f, 146.83749390f, 1.08693361f}, {196.21949768f, 146.17860413f, 1.08586740f}, {197.33749390f, 145.57670593f, 1.08490384f}, {198.45729065f, 145.03080750f, 1.08392048f}, {199.57974243f, 144.53964233f, 1.08299625f}, {200.70558167f, 144.10237122f, 1.08200932f}, {201.83555603f, 143.71807861f, 1.08106685f}, {202.97067261f, 143.38615417f, 1.08018315f}, {204.11151123f, 143.10583496f, 1.07926512f}, {205.25912476f, 142.87669373f, 1.07837021f}, {206.41427612f, 142.69824219f, 1.07743394f}, {207.57775879f, 142.57023621f, 1.07655621f}, {208.75065613f, 142.49246216f, 1.07575023f}, {209.93380737f, 142.46478271f, 1.07485414f}, {211.12826538f, 142.48718262f, 1.07404375f}, {212.33489990f, 142.55964661f, 1.07317853f}, {213.55490112f, 142.68249512f, 1.07241273f}, {214.78915405f, 142.85594177f, 1.07158506f}, {216.03897095f, 143.08036804f, 1.07081473f}, {217.30540466f, 143.35620117f, 1.07008028f}, {218.58990479f, 143.68408203f, 1.06929815f}, {219.89352417f, 144.06469727f, 1.06855190f}, {221.21772766f, 144.49879456f, 1.06788337f}, {222.56396484f, 144.98738098f, 1.06715298f}, {223.93374634f, 145.53141785f, 1.06654167f}, {225.32878113f, 146.13211060f, 1.06582713f}, {226.75068665f, 146.79081726f, 1.06527960f}, {228.20124817f, 147.50892639f, 1.06473267f}, {229.68254089f, 148.28813171f, 1.06426227f}, {231.19651794f, 149.13005066f, 1.06361973f}, {232.74557495f, 150.03681946f, 1.06320572f}, {234.33186340f, 151.01042175f, 1.06276429f}, {235.95819092f, 152.05328369f, 1.06246114f}, {237.62702942f, 153.16789246f, 1.06226826f}, {239.34159851f, 154.35711670f, 1.06209612f}, {241.10501099f, 155.62399292f, 1.06196523f}, {242.92080688f, 156.97193909f, 1.06206846f}, {244.79286194f, 158.40451050f, 1.06237841f}, {246.72508240f, 159.92582703f, 1.06275749f}, {248.72207642f, 161.54005432f, 1.06349552f}, {250.78887939f, 163.25231934f, 1.07794428f}, {252.93074036f, 165.06762695f, 1.10016596f}, {255.15396118f, 166.99206543f, 1.12403953f}, {257.51202393f, 169.07392883f, 1.15056181f}, {256.48925781f, 169.28802490f, 1.14653599f}, {255.46803284f, 169.55464172f, 1.14285719f}, {254.44767761f, 169.87400818f, 1.13938391f}, {253.42758179f, 170.24673462f, 1.13611293f}, {252.40707397f, 170.67346191f, 1.13309586f}, {251.38558960f, 171.15476990f, 1.13025844f}, {250.36244202f, 171.69151306f, 1.12742734f}, {249.33692932f, 172.28445435f, 1.12490380f}, {248.30856323f, 172.93472290f, 1.12243772f}, {247.27655029f, 173.64329529f, 1.12012041f}, {246.24028015f, 174.41133118f, 1.11791933f}, {245.19900513f, 175.24032593f, 1.11581790f}, {244.15216064f, 176.13157654f, 1.11389863f}, {243.09890747f, 177.08648682f, 1.11199343f}, {242.03858948f, 178.10704041f, 1.11017001f}, {240.97042847f, 179.19493103f, 1.10846508f}, {239.89369202f, 180.35191345f, 1.10684001f}, {238.80758667f, 181.58056641f, 1.10530186f}, {237.71128845f, 182.88282776f, 1.10381258f}, {236.60392761f, 184.26133728f, 1.10239398f}, {235.48466492f, 185.71894836f, 1.10106051f}, {234.35244751f, 187.25827026f, 1.09974492f}, {233.20658875f, 188.88258362f, 1.09853566f}, {232.04582214f, 190.59527588f, 1.09735847f}, {230.86921692f, 192.39999390f, 1.09624243f}, {229.67564392f, 194.30044556f, 1.09517252f}, {228.46403503f, 196.30122375f, 1.09418523f}, {227.23309326f, 198.40658569f, 1.09320688f}, {225.98156738f, 200.62168884f, 1.09226668f}, {224.70796204f, 202.95181274f, 1.09140098f}, {223.41108704f, 205.40260315f, 1.09058714f}, {222.08921814f, 207.98031616f, 1.08980370f}, {220.74076843f, 210.69203186f, 1.08908665f}, {219.36408997f, 213.54486084f, 1.08839929f}, {217.95726013f, 216.54693604f, 1.08775628f}, {218.51911926f, 209.99333191f, 1.08392775f}, {219.09318542f, 203.87902832f, 1.08036113f}, {219.67694092f, 198.16419983f, 1.07698083f}, {220.26821899f, 192.81370544f, 1.07385373f}, {220.86512756f, 187.79617310f, 1.07089162f}, {221.47619629f, 183.00810242f, 1.06808507f}, {222.09007263f, 178.50942993f, 1.06545973f}, {222.70565796f, 174.27740479f, 1.06292295f}, {223.32186890f, 170.29176331f, 1.06055605f}, {223.93789673f, 166.53369141f, 1.05832958f}, {224.55310059f, 162.98631287f, 1.05626225f}, {225.16694641f, 159.63471985f, 1.05420291f}, {225.77893066f, 156.46520996f, 1.05235434f}, {226.38880920f, 153.46524048f, 1.05055928f}, {226.99623108f, 150.62377930f, 1.04888475f}, {227.60104370f, 147.93051147f, 1.04732263f}, {228.20310974f, 145.37609863f, 1.04574502f}, {228.80232239f, 142.95208740f, 1.04431856f}, {229.39868164f, 140.65086365f, 1.04296243f}, {229.99205017f, 138.46487427f, 1.04164290f}, {230.58264160f, 136.38743591f, 1.04042566f}, {231.17041016f, 134.41328430f, 1.03929734f}, {231.75549316f, 132.53601074f, 1.03811848f}, {232.33790588f, 130.75077820f, 1.03708017f}, {232.91786194f, 129.05317688f, 1.03608334f}, {233.49546814f, 127.43840790f, 1.03516030f}, {234.07084656f, 125.90248108f, 1.03424549f}, {234.64419556f, 124.44226074f, 1.03341699f}, {235.21571350f, 123.05363464f, 1.03262901f}, {235.78558350f, 121.73342133f, 1.03184199f}, {236.35388184f, 120.47877502f, 1.03112113f}, {236.92089844f, 119.28697205f, 1.03047264f}, {237.48689270f, 118.15531158f, 1.02981198f}, {238.05201721f, 117.08183289f, 1.02923620f}, {238.61648560f, 116.06392670f, 1.02871919f}, {239.18054199f, 115.09930420f, 1.02820277f}, {239.74444580f, 114.18637848f, 1.02773190f}, {240.30845642f, 113.32356262f, 1.02730668f}, {240.87266541f, 112.50892639f, 1.02692664f}, {241.43750000f, 111.74095154f, 1.02656639f}, {242.00312805f, 111.01839447f, 1.02629626f}, {242.56987000f, 110.33974457f, 1.02601361f}, {243.13787842f, 109.70361328f, 1.02575016f}, {243.70751953f, 109.10948944f, 1.02554464f}, {244.27909851f, 108.55577850f, 1.02541637f}, {244.85278320f, 108.04170990f, 1.02527511f}, {245.42892456f, 107.56675720f, 1.02518535f}, {246.00787354f, 107.12932587f, 1.02518535f}, {246.58984375f, 106.72933960f, 1.02521741f}, {247.17526245f, 106.36585999f, 1.02528155f}, {247.64375305f, 106.10243988f, 1.02539706f}, {248.11485291f, 105.86150360f, 1.02551258f}, {248.58860779f, 105.64303589f, 1.02566028f}, {246.80447388f, 104.58697510f, 1.00951350f}, {245.05928040f, 103.58178711f, 1.00881732f}, {243.35063171f, 102.62539673f, 1.00896013f}, {241.67654419f, 101.71598816f, 1.00917137f}, {240.03507996f, 100.85175323f, 1.00934553f}, {238.42451477f, 100.03111267f, 1.00952590f}, {236.84286499f, 99.25236511f, 1.00970006f}, {235.28862000f, 98.51438904f, 1.00986814f}, {233.76025391f, 97.81589508f, 1.01003003f}, {232.25617981f, 97.15534210f, 1.01019192f}, {230.77516174f, 96.53209686f, 1.01036012f}, {229.31573486f, 95.94433594f, 1.01054072f}, {227.87661743f, 95.39186096f, 1.01072156f}, {226.45663452f, 94.87319183f, 1.01085246f}, {225.05462646f, 94.38800812f, 1.01102102f}, {223.66950989f, 93.93478394f, 1.01120198f}, {222.30014038f, 93.51358032f, 1.01135802f}, {220.94555664f, 93.12328339f, 1.01150787f}, {219.60478210f, 92.76350403f, 1.01164532f}, {218.27668762f, 92.43339539f, 1.01182020f}, {216.96061707f, 92.13276672f, 1.01198268f}, {215.65554810f, 91.86073303f, 1.01213896f}, {214.36068726f, 91.61720276f, 1.01228905f}, {213.07504272f, 91.40183258f, 1.01244545f}, {211.79792786f, 91.21417236f, 1.01258314f}, {210.52848816f, 91.05382538f, 1.01277089f}, {209.26608276f, 90.92082214f, 1.01290238f}, {208.00975037f, 90.81478119f, 1.01305270f}, {206.75895691f, 90.73554230f, 1.01320934f}, {205.51287842f, 90.68286896f, 1.01335967f}, {204.27069092f, 90.65687561f, 1.01351643f}, {203.03192139f, 90.65740204f, 1.01366067f}, {201.79577637f, 90.68433380f, 1.01382375f}, {200.56149292f, 90.73787689f, 1.01396799f}, {199.32853699f, 90.81794739f, 1.01411235f}, {198.09596252f, 90.92485046f, 1.01426935f}, {196.86343384f, 91.05828857f, 1.01443899f}, {195.63008118f, 91.21891785f, 1.01458347f}, {194.39520264f, 91.40653992f, 1.01474679f}, {193.15829468f, 91.62155914f, 1.01489758f}, {191.91856384f, 91.86432648f, 1.01504862f}, {190.67527771f, 92.13516998f, 1.01520586f}, {189.42787170f, 92.43425751f, 1.01536310f}, {188.17561340f, 92.76212311f, 1.01552665f}, {186.91780090f, 93.11923218f, 1.01568413f}, {185.65376282f, 93.50598907f, 1.01585412f}, {184.38282776f, 93.92289734f, 1.01600528f}, {183.10408020f, 94.37075043f, 1.01616919f}, {181.81701660f, 94.84995270f, 1.01633942f}, {180.52073669f, 95.36133575f, 1.01650953f}, {179.21449280f, 95.90546417f, 1.01667988f}, {177.89761353f, 96.48326874f, 1.01684403f}, {176.56922913f, 97.09544373f, 1.01702070f}, {175.22857666f, 97.74300385f, 1.01718473f}, {173.87469482f, 98.42687988f, 1.01737440f}, {172.50688171f, 99.14811707f, 1.01755750f}, {171.12409973f, 99.90780640f, 1.01773453f}, {169.72572327f, 100.70697021f, 1.01793051f}, {168.31056213f, 101.54705048f, 1.01812029f}, {166.87777710f, 102.42926788f, 1.01830387f}, {165.42637634f, 103.35495758f, 1.01850641f}, {163.95539856f, 104.32572937f, 1.01870894f}, {162.46389771f, 105.34296417f, 1.01889908f}, {160.95065308f, 106.40848541f, 1.01911449f}, {159.41474915f, 107.52391815f, 1.01932383f}, {157.85494995f, 108.69124603f, 1.01953948f}, {156.27024841f, 109.91231537f, 1.01976144f}, {154.65930176f, 111.18933105f, 1.01998377f}, {153.02107239f, 112.52439117f, 1.02021873f}, {151.35429382f, 113.91986084f, 1.02044106f}, {149.65795898f, 115.37796783f, 1.02069545f}, {147.93045044f, 116.90163422f, 1.02093709f}, {146.19055176f, 118.47520447f, 1.02118528f}, {144.41796875f, 120.11798859f, 1.02144003f}, {142.61135864f, 121.83302307f, 1.02171397f}, {140.76962280f, 123.62318420f, 1.02198160f}, {138.89170837f, 125.49147797f, 1.02225578f}, {136.97630310f, 127.44132996f, 1.02254915f}, {135.02243042f, 129.47602844f, 1.02284920f}, {133.02899170f, 131.59902954f, 1.02314305f}, {130.99517822f, 133.81394958f, 1.02345634f}, {131.70141602f, 133.46794128f, 1.02341151f}, {132.40832520f, 133.16127014f, 1.02336037f}, {133.11625671f, 132.89344788f, 1.02331555f}, {133.82562256f, 132.66418457f, 1.02327085f}, {134.53678894f, 132.47308350f, 1.02321970f}, {135.25013733f, 132.31993103f, 1.02317500f}, {135.96607971f, 132.20442200f, 1.02312386f}, {136.68496704f, 132.12646484f, 1.02308559f}, {137.40722656f, 132.08592224f, 1.02304089f}, {138.13328552f, 132.08271790f, 1.02300251f}, {138.86354065f, 132.11679077f, 1.02295148f}, {139.59843445f, 132.18811035f, 1.02290034f}, {140.33837891f, 132.29687500f, 1.02286196f}, {141.08381653f, 132.44314575f, 1.02281725f}, {141.83532715f, 132.62712097f, 1.02277255f}, {142.59315491f, 132.84896851f, 1.02271509f}, {143.35795593f, 133.10903931f, 1.02267683f}, {144.13018799f, 133.40754700f, 1.02262580f}, {144.91035461f, 133.74497986f, 1.02258110f}, {145.69897461f, 134.12167358f, 1.02252376f}, {146.49665833f, 134.53817749f, 1.02248549f}, {147.30389404f, 134.99491882f, 1.02243435f}, {148.12138367f, 135.49255371f, 1.02238333f}, {148.94963074f, 136.03186035f, 1.02234507f}, {149.78938293f, 136.61343384f, 1.02228761f}, {150.64118958f, 137.23788452f, 1.02223659f}, {151.50590515f, 137.90640259f, 1.02218556f}, {152.38410950f, 138.61953735f, 1.02214086f}, {153.27667236f, 139.37847900f, 1.02208364f}, {154.18437195f, 140.18437195f, 1.02203894f}, {155.10806274f, 141.03797913f, 1.02198160f}, {156.04853821f, 141.94085693f, 1.02193689f}, {157.00685120f, 142.89402771f, 1.02186692f}, {157.98393250f, 143.89904785f, 1.02181590f}, {158.98074341f, 144.95726013f, 1.02176487f}, {159.99856567f, 146.07037354f, 1.02170753f}, {161.03828430f, 147.23983765f, 1.02165020f}, {162.10130310f, 148.46739197f, 1.02158010f}, {163.18875122f, 149.75514221f, 1.02152908f}, {164.30220032f, 151.10501099f, 1.02146554f}, {165.44285583f, 152.51895142f, 1.02140176f}, {166.61236572f, 153.99942017f, 1.02133811f}, {167.81228638f, 155.54864502f, 1.02126801f}, {169.04440308f, 157.16912842f, 1.02120435f}, {170.31050110f, 158.86354065f, 1.02114081f}, {171.61247253f, 160.63491821f, 1.02107072f}, {172.95249939f, 162.48608398f, 1.02100718f}, {174.33265686f, 164.42022705f, 1.02092445f}, {175.75541687f, 166.44093323f, 1.02085447f}, {177.22317505f, 168.55158997f, 1.02077806f}, {178.73873901f, 170.75610352f, 1.02069545f}, {180.30487061f, 173.05831909f, 1.02062559f}, {181.92469788f, 175.46286011f, 1.02054286f}, {183.60148621f, 177.97407532f, 1.02045381f}, {185.33877563f, 180.59687805f, 1.02091169f}, {187.14041138f, 183.33604431f, 1.03412139f}, {189.01031494f, 186.19760132f, 1.04743636f}, {190.95294189f, 189.18678284f, 1.06097484f}, {192.97297668f, 192.30973816f, 1.07457912f}, {195.07548523f, 195.57315063f, 1.08845723f}, {193.57560730f, 195.82423401f, 1.08961546f}, {192.10162354f, 196.11531067f, 1.09084129f}, {190.65275574f, 196.44512939f, 1.09200466f}, {189.22848511f, 196.81303406f, 1.09319961f}, {187.82838440f, 197.21774292f, 1.09449208f}, {186.45219421f, 197.65827942f, 1.09569991f}, {185.01438904f, 198.16473389f, 1.09704983f}, {183.60287476f, 198.70903015f, 1.09835899f}, {182.21745300f, 199.28955078f, 1.09972286f}, {180.85792542f, 199.90510559f, 1.10106051f}, {179.52430725f, 200.55352783f, 1.10239398f}, {178.21652222f, 201.23355103f, 1.10376048f}, {176.93467712f, 201.94311523f, 1.10516763f}, {175.67889404f, 202.68020630f, 1.10647380f}, {174.44934082f, 203.44311523f, 1.10784280f}, {173.24630737f, 204.22976685f, 1.10923052f}, {172.07006836f, 205.03771973f, 1.11053884f}, {170.92091370f, 205.86495972f, 1.11192548f}, {169.79925537f, 206.70889282f, 1.11320984f}, {168.70547485f, 207.56750488f, 1.11459577f}, {167.63995361f, 208.43817139f, 1.11593187f}, {166.60317993f, 209.31861877f, 1.11722565f}, {165.59550476f, 210.20629883f, 1.11851442f}, {164.61743164f, 211.09878540f, 1.11979890f}};

// Extra functions not from OCIO

// ST2084 constants
__CONSTANT__ float st2084_m_1=2610.0f / 4096.0f * (1.0f / 4.0f);
__CONSTANT__ float st2084_m_2=2523.0f / 4096.0f * 128.0f;
__CONSTANT__ float st2084_c_1=3424.0f / 4096.0f;
__CONSTANT__ float st2084_c_2=2413.0f / 4096.0f * 32.0f;
__CONSTANT__ float st2084_c_3=2392.0f / 4096.0f * 32.0f;
__CONSTANT__ float st2084_m_1_d = 8192.0f / 1305.0f; // 1.0f / st2084_m_1;
__CONSTANT__ float st2084_m_2_d = 32.0f / 2523.0f; // 1.0f / st2084_m_2;
__CONSTANT__ float st2084_L_p = 10000.0f;

typedef struct
{
    float3 x;
    float3 y;
    float3 z;
} float3x3;

__DEVICE__ inline float3 vecmul( float3x3 m, float3 v)
{
    float3 r;

    r.x = m.x.x * v.x + m.y.x * v.y + m.z.x * v.z;
    r.y = m.x.y * v.x + m.y.y * v.y + m.z.y * v.z;
    r.z = m.x.z * v.x + m.y.z * v.y + m.z.z * v.z;
    
    return r;
}

__DEVICE__ inline float vecdot( float3 a, float3 b)
{   
    return a.x*b.x + a.y*b.y + a.z*b.z;
}

__DEVICE__ inline float3 maxf3(float3 a, float b)
{
    float3 c;

    c.x = _fmaxf(a.x, b);
    c.y = _fmaxf(a.y, b);
    c.z = _fmaxf(a.z, b);

    return c;
}

__DEVICE__ inline float3 minf3(float3 a, float b)
{
    float3 c;

    c.x = _fminf(a.x, b);
    c.y = _fminf(a.y, b);
    c.z = _fminf(a.z, b);

    return c;
}

__DEVICE__ inline float3 powf3(float3 a, float b)
{
    a.x = _powf(a.x, b);
    a.y = _powf(a.y, b);
    a.z = _powf(a.z, b);

    return a;
}

__DEVICE__ inline float3 absf3(float3 a)
{
    a.x = _fabs(a.x);
    a.y = _fabs(a.y);
    a.z = _fabs(a.z);

    return a;
}

__DEVICE__ inline float3 signf3(float3 a)
{
    a.x = _copysignf(1.0f, a.x);
    a.y = _copysignf(1.0f, a.y);
    a.z = _copysignf(1.0f, a.z);

    return a;
}

__DEVICE__ inline float linear_to_ST2084( float v )
{
    float Y_p = _powf(_fmaxf(0.0f, v) / st2084_L_p, st2084_m_1);

    return _powf((st2084_c_1 + st2084_c_2 * Y_p) / (st2084_c_3 * Y_p + 1.0f), st2084_m_2);
}

// OCIO functions

__DEVICE__ float ocio_reach_m_table_0_sample(float h)
{
  int i_base = (int)_floorf(h);
  int i_lo = i_base + 1;
  int i_hi = i_lo + 1;
  float lo = ocio_reach_m_table_0[i_lo];
  float hi = ocio_reach_m_table_0[i_hi];
  float t = h - i_base;
  return _mix(lo, hi, t);
}

__DEVICE__ float ocio_tonescale_fwd0(float J)
{
  float A = 0.0323680267f * _powf(_fabs(J) * 0.00999999978f, 0.879464149f);
  float Y = _powf(( 27.1299992f * A) / (1.0f - A), 2.3809523809523809f);
  float f = 10.1729107f * _powf(Y / (Y + 4.6796021847256952f), 1.14999998f);
  float Y_ts = max(0.0f, f * f / (f + 0.0399999991f));
  float F_L_Y = _powf(0.79370057210326195f * Y_ts, 0.42f);
  float J_ts = 100.f * _powf((F_L_Y / ( 27.1299992f + F_L_Y)) * 30.8946857f, 1.13705599f);
  return J_ts;
}

__DEVICE__ float ocio_toe_fwd0(float x, float limit, float k1_in, float k2_in)
{
  float k2 = max(k2_in, 0.001f);
  float k1 = _sqrtf(k1_in * k1_in + k2 * k2);
  float k3 = (limit + k1) / (limit + k2);
  return (x > limit) ? x : 0.5f * (k3 * x - k1 + _sqrtf((k3 * x - k1) * (k3 * x - k1) + 4.0f * k2 * k3 * x));
}

__DEVICE__ float3 ocio_gamut_cusp_table_0_sample(float h)
{
  int i = int(h) + 1;
  int i_lo = int(max(float(0), float(i + 0)));
  int i_hi = int(min(float(361), float(i + 2)));
  while (i_lo + 1 < i_hi)
  {
    float hcur = ocio_gamut_cusp_table_0_hues_array[i];
    if (h > hcur)
    {
      i_lo = i;
    }
    else
    {
      i_hi = i;
    }
    i = (i_lo + i_hi) / 2;
  }
  float3 lo = ocio_gamut_cusp_table_0[i_hi - 1];
  float3 hi = ocio_gamut_cusp_table_0[i_hi];
  float t = (h - ocio_gamut_cusp_table_0_hues_array[i_hi - 1]) / (ocio_gamut_cusp_table_0_hues_array[i_hi] - ocio_gamut_cusp_table_0_hues_array[i_hi - 1]);
  return _mix(lo, hi, t);
}

__DEVICE__ float ocio_get_focus_gain0(float J, float cuspJ)
{
  float thr = mix(cuspJ, 283.249878f, 0.300000f);
  if (J > thr)
  {
    float gain = ( 283.249878f - thr) / max(0.0001f, 283.249878f - J);
    gain = _logf(gain)/_logf(10.0f);
    return gain * gain + 1.0f;
  }
  else
  {
    return 1.0f;
  }
}

__DEVICE__ float ocio_solve_J_intersect0(float J, float M, float focusJ, float slope_gain)
{
  float M_scaled = M / slope_gain;
  float a = M_scaled / focusJ;
  if (J < focusJ)
  {
    float b = 1.0f - M_scaled;
    float c = -J;
    float det =  b * b - 4.f * a * c;
    float root =  _sqrtf(det);
    return -2.0f * c / (b + root);
  }
  else
  {
    float b = - (1.0f + M_scaled + 283.249878f * a);
    float c = 283.249878f * M_scaled + J;
    float det =  b * b - 4.f * a * c;
    float root =  _sqrtf(det);
    return -2.0f * c / (b - root);
  }
}

__DEVICE__ float ocio_find_gamut_boundary_intersection0(float2 JM_cusp, float gamma_top_inv, float gamma_bottom_inv, float J_intersect_source, float J_intersect_cusp, float slope)
{
  float M_boundary_lower = J_intersect_cusp * _powf(J_intersect_source / J_intersect_cusp, gamma_bottom_inv) / (JM_cusp.r / JM_cusp.g - slope);
  float M_boundary_upper = JM_cusp.g * (283.249878f - J_intersect_cusp) * _powf((283.249878f - J_intersect_source) / (283.249878f - J_intersect_cusp), gamma_top_inv) / (slope * JM_cusp.g + 283.249878f - JM_cusp.r);
  float smin = 0.0f;
  {
    float a = M_boundary_lower;
    float b = M_boundary_upper;
    float s = 0.119999997f * JM_cusp.g;
    float h = max(s - _fabs(a - b), 0.0f) / s;
    smin = min(a, b) - h * h * h * s * 0.16666666666666666f;
  }
  return smin;
}

__DEVICE__ float ocio_remap_M_fwd0(float M, float gamut_boundary_M, float reach_boundary_M)
{
  float boundary_ratio = gamut_boundary_M / reach_boundary_M;
  float proportion = max(boundary_ratio, 0.75f);
  float threshold = proportion * gamut_boundary_M;
  if (proportion >= 1.0f || M <= threshold)
  {
    return M;
  }
  float m_offset = M - threshold;
  float gamut_offset = gamut_boundary_M - threshold;
  float reach_offset = reach_boundary_M - threshold;
  float scale = reach_offset / ((reach_offset / gamut_offset) - 1.0f);
  float nd = m_offset / scale;
  return threshold + scale * nd / (1.0f + nd);
}

__DEVICE__ float3 ocio_gamut_compress0(float3 JMh, float Jx, float3 JMGcusp, float reachMaxM)
{
  float J = JMh.r;
  float M = JMh.g;
  float h = JMh.b;
  if (M <= 0.0f || J >  283.249878f)
  {
    return make_float3(J, 0.0f, h);
  }
  else
  {
    float2 JMcusp = JMGcusp.rg;
    float focusJ = mix(JMcusp.r, 40.816883f, min(1.0f, 1.300000f - (JMcusp.r / 283.249878f)));
    float slope_gain = 1051.56519f * ocio_get_focus_gain0(Jx, JMcusp.r);
    float J_intersect_source = ocio_solve_J_intersect0(JMh.r, JMh.g, focusJ, slope_gain);
    float gamut_slope = (J_intersect_source < focusJ) ? J_intersect_source : (283.249878f - J_intersect_source);
    gamut_slope = gamut_slope * (J_intersect_source - focusJ) / (focusJ * slope_gain);
    float gamma_top_inv = JMGcusp.b;
    float gamma_bottom_inv = 0.826446235f;
    float J_intersect_cusp = ocio_solve_J_intersect0(JMcusp.r, JMcusp.g, focusJ, slope_gain);
    float gamutBoundaryM = ocio_find_gamut_boundary_intersection0(JMcusp, gamma_top_inv, gamma_bottom_inv, J_intersect_source, J_intersect_cusp, gamut_slope);
    if (gamutBoundaryM <= 0.0f)
    {
      return make_float3(J, 0.0f, h);
    }
    float reachBoundaryM = 283.249878f * _powf(J_intersect_source / 283.249878f,  0.879464149f);
    reachBoundaryM = reachBoundaryM / ((283.249878f / reachMaxM) - gamut_slope);
    float remapped_M = ocio_remap_M_fwd0(M, gamutBoundaryM, reachBoundaryM);
    float remapped_J = J_intersect_source + remapped_M * gamut_slope;
    return make_float3(remapped_J, remapped_M, h);
  }
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
{
  float3 inPixel = make_float3(p_R, p_G, p_B);
  float3 outColor = inPixel;
    
  // Add Matrix processing

  {
    outColor = vecmul({{1.4514393161456653f, -0.07655377339602043f, 0.008316148425697719f}, {-0.23651074689374019f, 1.1762296998335731f, -0.0060324497910210278f}, {-0.21492856925192524f, -0.099675926437552201f, 0.9977163013653233f}}, outColor);
  }

  // Add Range processing

  {
    outColor = maxf3(outColor, 0.f);
    outColor = minf3(outColor, 4096.f);
  }

  // Add Matrix processing

  {
    outColor = vecmul({{0.69545224135745176f, 0.044794563372037632f, -0.0055258825581135443f}, {0.14067869647029416f, 0.85967111845642163f, 0.0040252103059786586f}, {0.16386906217225403f, 0.095534318171540358f, 1.0015006722521349f}}, outColor);
  }

  // Add FixedFunction 'ACES_OutputTransform20 (Forward)' processing
  
  {
    
    // Add RGB to JMh
    
    float3 JMh;
    float3 Aab;
    {
      {
        float3 lms = vecmul({{0.445181042f, 0.123734146f, 0.0117007261f}, {0.34964928f, 0.613643706f, 0.0280607939f}, {-0.00112973212f, 0.0563228019f, 0.753939033f}}, outColor);
        float3 F_L_v = powf3(absf3(lms), 0.419999987f);
        float3 rgb_a = (signf3(lms) * F_L_v) / ( 27.1299992f + F_L_v);
        Aab = vecmul({{20.25881f, 15480.f, 1720.f}, {10.129405f, -16887.2734f, 1720.f}, {0.506470263f, 1407.27271f, -3440.f}}, rgb_a);
      }
      {
        float J = 100.f * _powf(Aab.r, 1.13705599f);
        float M = (J == 0.0f) ? 0.0f : _sqrtf(Aab.g * Aab.g + Aab.b * Aab.b);
        float h = (Aab.g == 0.0f) ? 0.0f : _atan2f(Aab.b, Aab.g) * 57.29577951308238f;
        h = h - _floorf(h / 360.0f) * 360.0f;
        h = (h < 0.0f) ? h + 360.0f : h;
        JMh = make_float3(J, M, h);
      }
      outColor = JMh;
    }
    float h_rad = outColor.b * 0.0174532924f;
    float cos_hr = _cosf(h_rad);
    float sin_hr = _sinf(h_rad);

    // Add ToneScale and ChromaCompress (fwd)
    
    float J_ts = ocio_tonescale_fwd0(outColor.r);
    // Sample tables (fwd)
    float reachMaxM = ocio_reach_m_table_0_sample(outColor.b);

    {
      float J = outColor.r;
      float M = outColor.g;
      float h = outColor.b;
      float M_cp = M;
      if (M != 0.0f)
      {
        float nJ = J_ts / 283.249878f;
        float snJ = max(0.0f, 1.0f - nJ);
        float Mnorm;
        {
          float cos_hr2 = 2.0f * cos_hr * cos_hr - 1.0f;
          float sin_hr2 = 2.0f * cos_hr * sin_hr;
          float cos_hr3 = 4.0f * cos_hr * cos_hr * cos_hr - 3.0f * cos_hr;
          float sin_hr3 = 3.0f * sin_hr - 4.0f * sin_hr * sin_hr * sin_hr;
          float3 cosines = make_float3(cos_hr, cos_hr2, cos_hr3);
          float3 cosine_weights = float3(28.177105004310604f, 40.918782982468606f, 19.588056175708772f);
          float3 sines = float3(sin_hr, sin_hr2, sin_hr3);
          float3 sine_weights = float3(36.435131137728689f, -15.832440585136412f, 22.842479106426239f);
          Mnorm = vecdot(cosines, cosine_weights) + vecdot(sines, sine_weights) + 191.63428819274904f;
        }
        float limit = _powf(nJ, 0.879464149f) * reachMaxM / Mnorm;
        M_cp = M * _powf(J_ts / J, 0.879464149f);
        M_cp = M_cp / Mnorm;
        M_cp = limit - ocio_toe_fwd0(limit - M_cp, limit - 0.001f, snJ * 0.402999997f, _sqrtf(nJ * nJ + 0.000500000024f));
        M_cp = ocio_toe_fwd0(M_cp, limit, nJ * 10.3199997f, snJ);
        M_cp = M_cp * Mnorm;
      }
      outColor = make_float3(J_ts, M_cp, h);
    }

    // Add GamutCompress (fwd)
    
    {
      float3 JMGcusp = ocio_gamut_cusp_table_0_sample(outColor.b);
      outColor = ocio_gamut_compress0(outColor, outColor.r, JMGcusp, reachMaxM);
    }

    // Add JMh to RGB
    
    {
      float3 JMh = outColor;
      float3 Aab;
      {
        Aab.r = _powf(JMh.r * 0.00999999978f, 0.879464149f);
        Aab.g = JMh.g * cos_hr;
        Aab.b = JMh.g * sin_hr;
      }
      {
        float3 rgb_a = vecmul({{0.0323680267f, 0.0323680267, 0.0323680267f}, {2.07657631e-05f, -4.10250432e-05f, -1.01296409e-05f}, {1.3260621e-05f, -1.20174373e-05f, -0.000290076074f}}, Aab);
        float3 lms = signf3(rgb_a) * powf3( 27.1299992f * absf3(rgb_a) / (1.0f - absf3(rgb_a)), 2.38095236f);
        JMh = vecmul({{5.86586046f, -1.17879069f, 0.0301606283f}, {-4.48821688f, 2.81135988f, -0.16902554f}, {-0.117723338f, -0.372647762f, 1.39878595f}}, lms);
      }
      outColor = JMh;
    }
  }

  // Add Range processing
  
  {
    outColor = maxf3(outColor, 0.f);
    outColor = minf3(outColor, 10.f);
  }

  // Add Matrix processing
  
  {
    outColor = vecmul({{0.75383303436172167, 0.045743848965358269, -0.0012103403545183939}, {0.1985973690526166, 0.94177721981169349, 0.01760171730109}, {0.047569596585661789, 0.012478931222948141, 0.98360862305342855}}, outColor);
  }

  // Add PQ curve processing
  
  {
    outColor *= 100.0f;
    outColor.x = linear_to_ST2084(outColor.x);
    outColor.y = linear_to_ST2084(outColor.y);
    outColor.z = linear_to_ST2084(outColor.z);
  }

  // Add Range processing
  
  {
    outColor = maxf3(outColor, 0.f);
  }


  return outColor;
}

